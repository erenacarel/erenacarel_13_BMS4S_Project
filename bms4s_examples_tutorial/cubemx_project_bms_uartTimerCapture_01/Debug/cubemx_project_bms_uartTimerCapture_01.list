
cubemx_project_bms_uartTimerCapture_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004d84  08004d84  00005d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e28  08004e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e30  08004e30  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e34  08004e34  00005e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000005c  08004e94  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08004e94  0000630c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da49  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203c  00000000  00000000  00013ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00015b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a95  00000000  00000000  00016890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c5  00000000  00000000  00017325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f982  00000000  00000000  0002f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6e2  00000000  00000000  0003f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce94e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  000ce994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000d2830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d6c 	.word	0x08004d6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004d6c 	.word	0x08004d6c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2uiz>:
 80008f8:	004a      	lsls	r2, r1, #1
 80008fa:	d211      	bcs.n	8000920 <__aeabi_d2uiz+0x28>
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000900:	d211      	bcs.n	8000926 <__aeabi_d2uiz+0x2e>
 8000902:	d50d      	bpl.n	8000920 <__aeabi_d2uiz+0x28>
 8000904:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d40e      	bmi.n	800092c <__aeabi_d2uiz+0x34>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	4770      	bx	lr
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	4770      	bx	lr
 8000926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092a:	d102      	bne.n	8000932 <__aeabi_d2uiz+0x3a>
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	4770      	bx	lr
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	4770      	bx	lr

08000938 <UsrReadAdc>:
	FREQUENCY = TIM_CLOCK / ARR              2000000 / 100 = 20 KHz
	DUTY = (CCRx / ARR) x 100                30 / 100 x100 = 20
*/

void UsrReadAdc(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 800093c:	4b74      	ldr	r3, [pc, #464]	@ (8000b10 <UsrReadAdc+0x1d8>)
 800093e:	2201      	movs	r2, #1
 8000940:	605a      	str	r2, [r3, #4]
	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000942:	4b73      	ldr	r3, [pc, #460]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000944:	2206      	movs	r2, #6
 8000946:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_1;
 8000948:	4b71      	ldr	r3, [pc, #452]	@ (8000b10 <UsrReadAdc+0x1d8>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800094e:	4970      	ldr	r1, [pc, #448]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000950:	4870      	ldr	r0, [pc, #448]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000952:	f001 f9e3 	bl	8001d1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000956:	486f      	ldr	r0, [pc, #444]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000958:	f000 ff22 	bl	80017a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800095c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000960:	486c      	ldr	r0, [pc, #432]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000962:	f000 fff7 	bl	8001954 <HAL_ADC_PollForConversion>
	readValue1 = HAL_ADC_GetValue(&hadc1);
 8000966:	486b      	ldr	r0, [pc, #428]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000968:	f001 f8fa 	bl	8001b60 <HAL_ADC_GetValue>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b69      	ldr	r3, [pc, #420]	@ (8000b18 <UsrReadAdc+0x1e0>)
 8000972:	801a      	strh	r2, [r3, #0]
	sprintf(buffer, "adc1: %d\n", readValue1);
 8000974:	4b68      	ldr	r3, [pc, #416]	@ (8000b18 <UsrReadAdc+0x1e0>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4968      	ldr	r1, [pc, #416]	@ (8000b1c <UsrReadAdc+0x1e4>)
 800097c:	4868      	ldr	r0, [pc, #416]	@ (8000b20 <UsrReadAdc+0x1e8>)
 800097e:	f003 fd45 	bl	800440c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000982:	4867      	ldr	r0, [pc, #412]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000984:	f7ff fbe2 	bl	800014c <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	4964      	ldr	r1, [pc, #400]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000990:	4864      	ldr	r0, [pc, #400]	@ (8000b24 <UsrReadAdc+0x1ec>)
 8000992:	f003 fbbc 	bl	800410e <HAL_UART_Transmit>
	memset(buffer, 0, 20);
 8000996:	2214      	movs	r2, #20
 8000998:	2100      	movs	r1, #0
 800099a:	4861      	ldr	r0, [pc, #388]	@ (8000b20 <UsrReadAdc+0x1e8>)
 800099c:	f003 fd56 	bl	800444c <memset>
	HAL_ADC_Stop(&hadc1);
 80009a0:	485c      	ldr	r0, [pc, #368]	@ (8000b14 <UsrReadAdc+0x1dc>)
 80009a2:	f000 ffab 	bl	80018fc <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80009a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b10 <UsrReadAdc+0x1d8>)
 80009a8:	2206      	movs	r2, #6
 80009aa:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_2;
 80009ac:	4b58      	ldr	r3, [pc, #352]	@ (8000b10 <UsrReadAdc+0x1d8>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80009b2:	4957      	ldr	r1, [pc, #348]	@ (8000b10 <UsrReadAdc+0x1d8>)
 80009b4:	4857      	ldr	r0, [pc, #348]	@ (8000b14 <UsrReadAdc+0x1dc>)
 80009b6:	f001 f9b1 	bl	8001d1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80009ba:	4856      	ldr	r0, [pc, #344]	@ (8000b14 <UsrReadAdc+0x1dc>)
 80009bc:	f000 fef0 	bl	80017a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80009c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009c4:	4853      	ldr	r0, [pc, #332]	@ (8000b14 <UsrReadAdc+0x1dc>)
 80009c6:	f000 ffc5 	bl	8001954 <HAL_ADC_PollForConversion>
	readValue2 = HAL_ADC_GetValue(&hadc1);
 80009ca:	4852      	ldr	r0, [pc, #328]	@ (8000b14 <UsrReadAdc+0x1dc>)
 80009cc:	f001 f8c8 	bl	8001b60 <HAL_ADC_GetValue>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b54      	ldr	r3, [pc, #336]	@ (8000b28 <UsrReadAdc+0x1f0>)
 80009d6:	801a      	strh	r2, [r3, #0]
	sprintf(buffer, "adc2: %d\n", readValue2);
 80009d8:	4b53      	ldr	r3, [pc, #332]	@ (8000b28 <UsrReadAdc+0x1f0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4953      	ldr	r1, [pc, #332]	@ (8000b2c <UsrReadAdc+0x1f4>)
 80009e0:	484f      	ldr	r0, [pc, #316]	@ (8000b20 <UsrReadAdc+0x1e8>)
 80009e2:	f003 fd13 	bl	800440c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80009e6:	484e      	ldr	r0, [pc, #312]	@ (8000b20 <UsrReadAdc+0x1e8>)
 80009e8:	f7ff fbb0 	bl	800014c <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	2364      	movs	r3, #100	@ 0x64
 80009f2:	494b      	ldr	r1, [pc, #300]	@ (8000b20 <UsrReadAdc+0x1e8>)
 80009f4:	484b      	ldr	r0, [pc, #300]	@ (8000b24 <UsrReadAdc+0x1ec>)
 80009f6:	f003 fb8a 	bl	800410e <HAL_UART_Transmit>
	memset(buffer, 0, 20);
 80009fa:	2214      	movs	r2, #20
 80009fc:	2100      	movs	r1, #0
 80009fe:	4848      	ldr	r0, [pc, #288]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000a00:	f003 fd24 	bl	800444c <memset>
	HAL_ADC_Stop(&hadc1);
 8000a04:	4843      	ldr	r0, [pc, #268]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a06:	f000 ff79 	bl	80018fc <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a0a:	4b41      	ldr	r3, [pc, #260]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_3;
 8000a10:	4b3f      	ldr	r3, [pc, #252]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000a16:	493e      	ldr	r1, [pc, #248]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000a18:	483e      	ldr	r0, [pc, #248]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a1a:	f001 f97f 	bl	8001d1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000a1e:	483d      	ldr	r0, [pc, #244]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a20:	f000 febe 	bl	80017a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a28:	483a      	ldr	r0, [pc, #232]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a2a:	f000 ff93 	bl	8001954 <HAL_ADC_PollForConversion>
	readValue3 = HAL_ADC_GetValue(&hadc1);
 8000a2e:	4839      	ldr	r0, [pc, #228]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a30:	f001 f896 	bl	8001b60 <HAL_ADC_GetValue>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b3d      	ldr	r3, [pc, #244]	@ (8000b30 <UsrReadAdc+0x1f8>)
 8000a3a:	801a      	strh	r2, [r3, #0]
	sprintf(buffer, "adc3: %d\n", readValue3);
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b30 <UsrReadAdc+0x1f8>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	493c      	ldr	r1, [pc, #240]	@ (8000b34 <UsrReadAdc+0x1fc>)
 8000a44:	4836      	ldr	r0, [pc, #216]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000a46:	f003 fce1 	bl	800440c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000a4a:	4835      	ldr	r0, [pc, #212]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000a4c:	f7ff fb7e 	bl	800014c <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	2364      	movs	r3, #100	@ 0x64
 8000a56:	4932      	ldr	r1, [pc, #200]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000a58:	4832      	ldr	r0, [pc, #200]	@ (8000b24 <UsrReadAdc+0x1ec>)
 8000a5a:	f003 fb58 	bl	800410e <HAL_UART_Transmit>
	memset(buffer, 0, 20);
 8000a5e:	2214      	movs	r2, #20
 8000a60:	2100      	movs	r1, #0
 8000a62:	482f      	ldr	r0, [pc, #188]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000a64:	f003 fcf2 	bl	800444c <memset>
	HAL_ADC_Stop(&hadc1);
 8000a68:	482a      	ldr	r0, [pc, #168]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a6a:	f000 ff47 	bl	80018fc <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000a70:	2206      	movs	r2, #6
 8000a72:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_4;
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000a7a:	4925      	ldr	r1, [pc, #148]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000a7c:	4825      	ldr	r0, [pc, #148]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a7e:	f001 f94d 	bl	8001d1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000a82:	4824      	ldr	r0, [pc, #144]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a84:	f000 fe8c 	bl	80017a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a8c:	4821      	ldr	r0, [pc, #132]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a8e:	f000 ff61 	bl	8001954 <HAL_ADC_PollForConversion>
	readValue4 = HAL_ADC_GetValue(&hadc1);
 8000a92:	4820      	ldr	r0, [pc, #128]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000a94:	f001 f864 	bl	8001b60 <HAL_ADC_GetValue>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <UsrReadAdc+0x200>)
 8000a9e:	801a      	strh	r2, [r3, #0]
	sprintf(buffer, "adc4: %d\n", readValue4);
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <UsrReadAdc+0x200>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4925      	ldr	r1, [pc, #148]	@ (8000b3c <UsrReadAdc+0x204>)
 8000aa8:	481d      	ldr	r0, [pc, #116]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000aaa:	f003 fcaf 	bl	800440c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000aae:	481c      	ldr	r0, [pc, #112]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000ab0:	f7ff fb4c 	bl	800014c <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	4919      	ldr	r1, [pc, #100]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000abc:	4819      	ldr	r0, [pc, #100]	@ (8000b24 <UsrReadAdc+0x1ec>)
 8000abe:	f003 fb26 	bl	800410e <HAL_UART_Transmit>
	memset(buffer, 0, 20);
 8000ac2:	2214      	movs	r2, #20
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <UsrReadAdc+0x1e8>)
 8000ac8:	f003 fcc0 	bl	800444c <memset>
	HAL_ADC_Stop(&hadc1);
 8000acc:	4811      	ldr	r0, [pc, #68]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000ace:	f000 ff15 	bl	80018fc <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000ad4:	2206      	movs	r2, #6
 8000ad6:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_VREFINT;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000ada:	2211      	movs	r2, #17
 8000adc:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000ade:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <UsrReadAdc+0x1d8>)
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000ae2:	f001 f91b 	bl	8001d1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000ae6:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000ae8:	f000 fe5a 	bl	80017a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000aec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000af0:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000af2:	f000 ff2f 	bl	8001954 <HAL_ADC_PollForConversion>
	readValue5 = HAL_ADC_GetValue(&hadc1);
 8000af6:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000af8:	f001 f832 	bl	8001b60 <HAL_ADC_GetValue>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <UsrReadAdc+0x208>)
 8000b02:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <UsrReadAdc+0x1dc>)
 8000b06:	f000 fef9 	bl	80018fc <HAL_ADC_Stop>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001b0 	.word	0x200001b0
 8000b14:	20000078 	.word	0x20000078
 8000b18:	20000188 	.word	0x20000188
 8000b1c:	08004d84 	.word	0x08004d84
 8000b20:	2000019c 	.word	0x2000019c
 8000b24:	20000138 	.word	0x20000138
 8000b28:	2000018a 	.word	0x2000018a
 8000b2c:	08004d90 	.word	0x08004d90
 8000b30:	2000018c 	.word	0x2000018c
 8000b34:	08004d9c 	.word	0x08004d9c
 8000b38:	2000018e 	.word	0x2000018e
 8000b3c:	08004da8 	.word	0x08004da8
 8000b40:	20000190 	.word	0x20000190

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fcf0 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f89c 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f000 fa66 	bl	8001020 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b54:	f000 f932 	bl	8000dbc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b58:	f000 fa38 	bl	8000fcc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f9e8 	bl	8000f30 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b60:	f000 f8ee 	bl	8000d40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000b64:	483d      	ldr	r0, [pc, #244]	@ (8000c5c <main+0x118>)
 8000b66:	f001 fa6d 	bl	8002044 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UsrReadAdc();
 8000b6a:	f7ff fee5 	bl	8000938 <UsrReadAdc>
	  pil1 = (readValue1/4096.0)*1000;
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c60 <main+0x11c>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fc44 	bl	8000400 <__aeabi_i2d>
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	4b39      	ldr	r3, [pc, #228]	@ (8000c64 <main+0x120>)
 8000b7e:	f7ff fdd3 	bl	8000728 <__aeabi_ddiv>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	4610      	mov	r0, r2
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	4b36      	ldr	r3, [pc, #216]	@ (8000c68 <main+0x124>)
 8000b90:	f7ff fca0 	bl	80004d4 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f7ff feac 	bl	80008f8 <__aeabi_d2uiz>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <main+0x128>)
 8000ba6:	801a      	strh	r2, [r3, #0]
	  pil2 = (readValue2/4096.0)*1000;
 8000ba8:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <main+0x12c>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc27 	bl	8000400 <__aeabi_i2d>
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c64 <main+0x120>)
 8000bb8:	f7ff fdb6 	bl	8000728 <__aeabi_ddiv>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <main+0x124>)
 8000bca:	f7ff fc83 	bl	80004d4 <__aeabi_dmul>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f7ff fe8f 	bl	80008f8 <__aeabi_d2uiz>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <main+0x130>)
 8000be0:	801a      	strh	r2, [r3, #0]
	  pil3 = (readValue3/4096.0)*1000;
 8000be2:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <main+0x134>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc0a 	bl	8000400 <__aeabi_i2d>
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <main+0x120>)
 8000bf2:	f7ff fd99 	bl	8000728 <__aeabi_ddiv>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <main+0x124>)
 8000c04:	f7ff fc66 	bl	80004d4 <__aeabi_dmul>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f7ff fe72 	bl	80008f8 <__aeabi_d2uiz>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <main+0x138>)
 8000c1a:	801a      	strh	r2, [r3, #0]
	  pil4 = (readValue4/4096.0)*1000;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <main+0x13c>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fbed 	bl	8000400 <__aeabi_i2d>
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <main+0x120>)
 8000c2c:	f7ff fd7c 	bl	8000728 <__aeabi_ddiv>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	4610      	mov	r0, r2
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <main+0x124>)
 8000c3e:	f7ff fc49 	bl	80004d4 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fe55 	bl	80008f8 <__aeabi_d2uiz>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <main+0x140>)
 8000c54:	801a      	strh	r2, [r3, #0]
	  UsrReadAdc();
 8000c56:	bf00      	nop
 8000c58:	e787      	b.n	8000b6a <main+0x26>
 8000c5a:	bf00      	nop
 8000c5c:	20000078 	.word	0x20000078
 8000c60:	20000188 	.word	0x20000188
 8000c64:	40b00000 	.word	0x40b00000
 8000c68:	408f4000 	.word	0x408f4000
 8000c6c:	20000192 	.word	0x20000192
 8000c70:	2000018a 	.word	0x2000018a
 8000c74:	20000194 	.word	0x20000194
 8000c78:	2000018c 	.word	0x2000018c
 8000c7c:	20000196 	.word	0x20000196
 8000c80:	2000018e 	.word	0x2000018e
 8000c84:	20000198 	.word	0x20000198

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	@ 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c92:	2228      	movs	r2, #40	@ 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fbd8 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fcfa 	bl	80026d8 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cea:	f000 f9fb 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 ff66 	bl	8002bdc <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d16:	f000 f9e5 	bl	80010e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d22:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 f8e6 	bl	8002ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d32:	f000 f9d7 	bl	80010e4 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3750      	adds	r7, #80	@ 0x50
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d52:	4a19      	ldr	r2, [pc, #100]	@ (8000db8 <MX_ADC1_Init+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d6a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d7e:	f000 fc37 	bl	80015f0 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d88:	f000 f9ac 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d94:	2307      	movs	r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_ADC1_Init+0x74>)
 8000d9e:	f000 ffbd 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000da8:	f000 f99c 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000078 	.word	0x20000078
 8000db8:	40012400 	.word	0x40012400

08000dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b096      	sub	sp, #88	@ 0x58
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	615a      	str	r2, [r3, #20]
 8000dec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2220      	movs	r2, #32
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fb29 	bl	800444c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8000f2c <MX_TIM1_Init+0x170>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000e00:	4b49      	ldr	r3, [pc, #292]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e02:	2203      	movs	r2, #3
 8000e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b48      	ldr	r3, [pc, #288]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8000e0c:	4b46      	ldr	r3, [pc, #280]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e0e:	2259      	movs	r2, #89	@ 0x59
 8000e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e18:	4b43      	ldr	r3, [pc, #268]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1e:	4b42      	ldr	r3, [pc, #264]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e24:	4840      	ldr	r0, [pc, #256]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e26:	f002 f9d3 	bl	80031d0 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e30:	f000 f958 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e38:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4839      	ldr	r0, [pc, #228]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e42:	f002 fc37 	bl	80036b4 <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e4c:	f000 f94a 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e50:	4835      	ldr	r0, [pc, #212]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e52:	f002 fa0c 	bl	800326e <HAL_TIM_PWM_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e5c:	f000 f942 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482e      	ldr	r0, [pc, #184]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000e70:	f003 f818 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e7a:	f000 f933 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	@ 0x60
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 26;
 8000e82:	231a      	movs	r3, #26
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4821      	ldr	r0, [pc, #132]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000ea4:	f002 fb44 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000eae:	f000 f919 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481a      	ldr	r0, [pc, #104]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000ec0:	f002 fb36 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000eca:	f000 f90b 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000ed8:	f002 fb2a 	bl	8003530 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000ee2:	f000 f8ff 	bl	80010e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000ef2:	23c8      	movs	r3, #200	@ 0xc8
 8000ef4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000f0a:	f003 f829 	bl	8003f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000f14:	f000 f8e6 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <MX_TIM1_Init+0x16c>)
 8000f1a:	f000 f9a7 	bl	800126c <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3758      	adds	r7, #88	@ 0x58
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000a8 	.word	0x200000a8
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f56:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f64:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f76:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f78:	f002 f92a 	bl	80031d0 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f82:	f000 f8af 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f94:	f002 fb8e 	bl	80036b4 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f9e:	f000 f8a1 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000fb0:	f002 ff78 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fba:	f000 f893 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000f0 	.word	0x200000f0

08000fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_USART1_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8001004:	f003 f833 	bl	800406e <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f869 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000138 	.word	0x20000138
 800101c:	40013800 	.word	0x40013800

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a19      	ldr	r2, [pc, #100]	@ (8001090 <MX_GPIO_Init+0x70>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a13      	ldr	r2, [pc, #76]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_GPIO_Init+0x70>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <MX_GPIO_Init+0x70>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <MX_GPIO_Init+0x70>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <MX_GPIO_Init+0x70>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_TIM_OC_DelayElapsedCallback>:
	g_timeoutMs = 0;
}

//void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	// dusen kenar yakalandiginda complementary pwm baslat
//	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	// periyod doldugunda complementary pwm durdur

}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	g_pwmCounter++;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80010ca:	701a      	strb	r2, [r3, #0]

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80010cc:	2100      	movs	r1, #0
 80010ce:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80010d0:	f002 fe4a 	bl	8003d68 <HAL_TIMEx_PWMN_Start>

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000180 	.word	0x20000180
 80010e0:	200000a8 	.word	0x200000a8

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_MspInit+0x6c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a18      	ldr	r2, [pc, #96]	@ (800115c <HAL_MspInit+0x6c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_MspInit+0x6c>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_MspInit+0x6c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <HAL_MspInit+0x6c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <HAL_MspInit+0x6c>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2005      	movs	r0, #5
 800112c:	f001 f919 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001130:	2005      	movs	r0, #5
 8001132:	f001 f932 	bl	800239a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_MspInit+0x70>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_MspInit+0x70>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000

08001164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_ADC_MspInit+0x7c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d129      	bne.n	80011d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_ADC_MspInit+0x80>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_ADC_MspInit+0x80>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_ADC_MspInit+0x80>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_ADC_MspInit+0x80>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <HAL_ADC_MspInit+0x80>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_ADC_MspInit+0x80>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80011b4:	231e      	movs	r3, #30
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <HAL_ADC_MspInit+0x84>)
 80011c4:	f001 f904 	bl	80023d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2012      	movs	r0, #18
 80011ce:	f001 f8c8 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011d2:	2012      	movs	r0, #18
 80011d4:	f001 f8e1 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40012400 	.word	0x40012400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001264 <HAL_TIM_Base_MspInit+0x78>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d114      	bne.n	8001228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 8001204:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201b      	movs	r0, #27
 800121c:	f001 f8a1 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001220:	201b      	movs	r0, #27
 8001222:	f001 f8ba 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001226:	e018      	b.n	800125a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001230:	d113      	bne.n	800125a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_TIM_Base_MspInit+0x7c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201c      	movs	r0, #28
 8001250:	f001 f887 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001254:	201c      	movs	r0, #28
 8001256:	f001 f8a0 	bl	800239a <HAL_NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40012c00 	.word	0x40012c00
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <HAL_TIM_MspPostInit+0x8c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d131      	bne.n	80012f0 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <HAL_TIM_MspPostInit+0x90>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <HAL_TIM_MspPostInit+0x90>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <HAL_TIM_MspPostInit+0x90>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_TIM_MspPostInit+0x90>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <HAL_TIM_MspPostInit+0x90>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_TIM_MspPostInit+0x90>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012bc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	480b      	ldr	r0, [pc, #44]	@ (8001300 <HAL_TIM_MspPostInit+0x94>)
 80012d2:	f001 f87d 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80012d6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <HAL_TIM_MspPostInit+0x98>)
 80012ec:	f001 f870 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40012c00 	.word	0x40012c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00
 8001304:	40010800 	.word	0x40010800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <HAL_UART_MspInit+0xa4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d13d      	bne.n	80013a4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a20      	ldr	r2, [pc, #128]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1a      	ldr	r2, [pc, #104]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001358:	2340      	movs	r3, #64	@ 0x40
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <HAL_UART_MspInit+0xac>)
 800136c:	f001 f830 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <HAL_UART_MspInit+0xac>)
 8001384:	f001 f824 	bl	80023d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_UART_MspInit+0xb0>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
 800139e:	4a06      	ldr	r2, [pc, #24]	@ (80013b8 <HAL_UART_MspInit+0xb0>)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	40010000 	.word	0x40010000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f8d4 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <ADC1_2_IRQHandler+0x10>)
 8001426:	f000 fba7 	bl	8001b78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000078 	.word	0x20000078

08001434 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <TIM1_CC_IRQHandler+0x10>)
 800143a:	f001 ff70 	bl	800331e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000a8 	.word	0x200000a8

08001448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	g_timeoutMs++;
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <TIM2_IRQHandler+0x18>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <TIM2_IRQHandler+0x18>)
 8001454:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001456:	4803      	ldr	r0, [pc, #12]	@ (8001464 <TIM2_IRQHandler+0x1c>)
 8001458:	f001 ff61 	bl	800331e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000184 	.word	0x20000184
 8001464:	200000f0 	.word	0x200000f0

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f002 ffe0 	bl	800445c <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20005000 	.word	0x20005000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	200001bc 	.word	0x200001bc
 80014d0:	20000310 	.word	0x20000310

080014d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff fff8 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480b      	ldr	r0, [pc, #44]	@ (8001514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014e6:	490c      	ldr	r1, [pc, #48]	@ (8001518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e8:	4a0c      	ldr	r2, [pc, #48]	@ (800151c <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014fc:	4c09      	ldr	r4, [pc, #36]	@ (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f002 ffad 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff fb19 	bl	8000b44 <main>
  bx lr
 8001512:	4770      	bx	lr
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800151c:	08004e38 	.word	0x08004e38
  ldr r2, =_sbss
 8001520:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001524:	2000030c 	.word	0x2000030c

08001528 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <CAN1_RX1_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_Init+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <HAL_Init+0x28>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 ff05 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fdd2 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 ff1d 	bl	80023b6 <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 fee5 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_IncTick+0x1c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_IncTick+0x20>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a03      	ldr	r2, [pc, #12]	@ (80015d8 <HAL_IncTick+0x20>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000008 	.word	0x20000008
 80015d8:	200001c0 	.word	0x200001c0

080015dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b02      	ldr	r3, [pc, #8]	@ (80015ec <HAL_GetTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	200001c0 	.word	0x200001c0

080015f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0be      	b.n	8001790 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fd98 	bl	8001164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fcc3 	bl	8001fc0 <ADC_ConversionStop_Disable>
 800163a:	4603      	mov	r3, r0
 800163c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 8099 	bne.w	800177e <HAL_ADC_Init+0x18e>
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 8095 	bne.w	800177e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001658:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	f043 0202 	orr.w	r2, r3, #2
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001670:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b1b      	ldrb	r3, [r3, #12]
 8001676:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001678:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	4313      	orrs	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001688:	d003      	beq.n	8001692 <HAL_ADC_Init+0xa2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <HAL_ADC_Init+0xa8>
 8001692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001696:	e000      	b.n	800169a <HAL_ADC_Init+0xaa>
 8001698:	2300      	movs	r3, #0
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7d1b      	ldrb	r3, [r3, #20]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d119      	bne.n	80016dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7b1b      	ldrb	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	035a      	lsls	r2, r3, #13
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	e00b      	b.n	80016dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	f043 0220 	orr.w	r2, r3, #32
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <HAL_ADC_Init+0x1a8>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	430b      	orrs	r3, r1
 8001702:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800170c:	d003      	beq.n	8001716 <HAL_ADC_Init+0x126>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d104      	bne.n	8001720 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	3b01      	subs	r3, #1
 800171c:	051b      	lsls	r3, r3, #20
 800171e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	430a      	orrs	r2, r1
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_ADC_Init+0x1ac>)
 800173c:	4013      	ands	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	d10b      	bne.n	800175c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800175a:	e018      	b.n	800178e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	f023 0312 	bic.w	r3, r3, #18
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	f043 0210 	orr.w	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	ffe1f7fd 	.word	0xffe1f7fd
 800179c:	ff1f0efe 	.word	0xff1f0efe

080017a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Start+0x1a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e098      	b.n	80018ec <HAL_ADC_Start+0x14c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fba2 	bl	8001f0c <ADC_Enable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8087 	bne.w	80018e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a41      	ldr	r2, [pc, #260]	@ (80018f4 <HAL_ADC_Start+0x154>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_Start+0x5e>
 80017f2:	4b41      	ldr	r3, [pc, #260]	@ (80018f8 <HAL_ADC_Start+0x158>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d115      	bne.n	800182a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d026      	beq.n	8001866 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001820:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001828:	e01d      	b.n	8001866 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2f      	ldr	r2, [pc, #188]	@ (80018f8 <HAL_ADC_Start+0x158>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_ADC_Start+0xaa>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2b      	ldr	r2, [pc, #172]	@ (80018f4 <HAL_ADC_Start+0x154>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10d      	bne.n	8001866 <HAL_ADC_Start+0xc6>
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_ADC_Start+0x158>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800185e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	f023 0206 	bic.w	r2, r3, #6
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800187e:	e002      	b.n	8001886 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f06f 0202 	mvn.w	r2, #2
 8001896:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018a6:	d113      	bne.n	80018d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_ADC_Start+0x154>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d105      	bne.n	80018be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_ADC_Start+0x158>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e00c      	b.n	80018ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	e003      	b.n	80018ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40012800 	.word	0x40012800
 80018f8:	40012400 	.word	0x40012400

080018fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Stop+0x1a>
 8001912:	2302      	movs	r3, #2
 8001914:	e01a      	b.n	800194c <HAL_ADC_Stop+0x50>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fb4e 	bl	8001fc0 <ADC_ConversionStop_Disable>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800196a:	f7ff fe37 	bl	80015dc <HAL_GetTick>
 800196e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001982:	f043 0220 	orr.w	r2, r3, #32
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0d3      	b.n	8001b3e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d131      	bne.n	8001a08 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d12a      	bne.n	8001a08 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019b2:	e021      	b.n	80019f8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ba:	d01d      	beq.n	80019f8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x7e>
 80019c2:	f7ff fe0b 	bl	80015dc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d212      	bcs.n	80019f8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f043 0204 	orr.w	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0a2      	b.n	8001b3e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0d6      	beq.n	80019b4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a06:	e070      	b.n	8001aea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a08:	4b4f      	ldr	r3, [pc, #316]	@ (8001b48 <HAL_ADC_PollForConversion+0x1f4>)
 8001a0a:	681c      	ldr	r4, [r3, #0]
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f001 fb29 	bl	8003064 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a12:	4603      	mov	r3, r0
 8001a14:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <HAL_ADC_PollForConversion+0x1f8>)
 8001a20:	400b      	ands	r3, r1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d118      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x104>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	4b48      	ldr	r3, [pc, #288]	@ (8001b50 <HAL_ADC_PollForConversion+0x1fc>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x104>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	4b46      	ldr	r3, [pc, #280]	@ (8001b54 <HAL_ADC_PollForConversion+0x200>)
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <HAL_ADC_PollForConversion+0x100>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
 8001a48:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <HAL_ADC_PollForConversion+0x204>)
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_PollForConversion+0x100>
 8001a50:	2314      	movs	r3, #20
 8001a52:	e020      	b.n	8001a96 <HAL_ADC_PollForConversion+0x142>
 8001a54:	2329      	movs	r3, #41	@ 0x29
 8001a56:	e01e      	b.n	8001a96 <HAL_ADC_PollForConversion+0x142>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <HAL_ADC_PollForConversion+0x200>)
 8001a60:	400b      	ands	r3, r1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_ADC_PollForConversion+0x120>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68d9      	ldr	r1, [r3, #12]
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_ADC_PollForConversion+0x204>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x13c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <HAL_ADC_PollForConversion+0x208>)
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x140>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68d9      	ldr	r1, [r3, #12]
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_ADC_PollForConversion+0x208>)
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x140>
 8001a90:	2354      	movs	r3, #84	@ 0x54
 8001a92:	e000      	b.n	8001a96 <HAL_ADC_PollForConversion+0x142>
 8001a94:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a9c:	e021      	b.n	8001ae2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d01a      	beq.n	8001adc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_ADC_PollForConversion+0x168>
 8001aac:	f7ff fd96 	bl	80015dc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d20f      	bcs.n	8001adc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d90b      	bls.n	8001adc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e030      	b.n	8001b3e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8d9      	bhi.n	8001a9e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f06f 0212 	mvn.w	r2, #18
 8001af2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b0a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b0e:	d115      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d111      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	24924924 	.word	0x24924924
 8001b50:	00924924 	.word	0x00924924
 8001b54:	12492492 	.word	0x12492492
 8001b58:	00492492 	.word	0x00492492
 8001b5c:	00249249 	.word	0x00249249

08001b60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03e      	beq.n	8001c18 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d039      	beq.n	8001c18 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bc6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bca:	d11d      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d119      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0220 	bic.w	r2, r2, #32
 8001be2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f874 	bl	8001cf6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f06f 0212 	mvn.w	r2, #18
 8001c16:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d04d      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d048      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001c4e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001c52:	d012      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d125      	bne.n	8001cae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c6c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c70:	d11d      	bne.n	8001cae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c88:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa76 	bl	80021a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 020c 	mvn.w	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d012      	beq.n	8001cee <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00d      	beq.n	8001cee <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f812 	bl	8001d08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0201 	mvn.w	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x20>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e0dc      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x1da>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d81c      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b05      	subs	r3, #5
 8001d5e:	221f      	movs	r2, #31
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4019      	ands	r1, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b05      	subs	r3, #5
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d84:	e03c      	b.n	8001e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d81c      	bhi.n	8001dc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b23      	subs	r3, #35	@ 0x23
 8001da0:	221f      	movs	r2, #31
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4019      	ands	r1, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b23      	subs	r3, #35	@ 0x23
 8001dba:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc6:	e01b      	b.n	8001e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b41      	subs	r3, #65	@ 0x41
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4019      	ands	r1, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b41      	subs	r3, #65	@ 0x41
 8001df4:	fa00 f203 	lsl.w	r2, r0, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d91c      	bls.n	8001e42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	3b1e      	subs	r3, #30
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6898      	ldr	r0, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	3b1e      	subs	r3, #30
 8001e34:	fa00 f203 	lsl.w	r2, r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	e019      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6919      	ldr	r1, [r3, #16]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	2207      	movs	r2, #7
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4019      	ands	r1, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6898      	ldr	r0, [r3, #8]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d003      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e82:	2b11      	cmp	r3, #17
 8001e84:	d132      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d125      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d126      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001eac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d11a      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_ADC_ConfigChannel+0x1e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0c9a      	lsrs	r2, r3, #18
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x1b2>
 8001eda:	e007      	b.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40012400 	.word	0x40012400
 8001f04:	20000000 	.word	0x20000000
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d040      	beq.n	8001fac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <ADC_Enable+0xac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fbc <ADC_Enable+0xb0>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	0c9b      	lsrs	r3, r3, #18
 8001f46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f48:	e002      	b.n	8001f50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f56:	f7ff fb41 	bl	80015dc <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f5c:	e01f      	b.n	8001f9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f5e:	f7ff fb3d 	bl	80015dc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d918      	bls.n	8001f9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d011      	beq.n	8001f9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d1d8      	bne.n	8001f5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d12e      	bne.n	8002038 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fea:	f7ff faf7 	bl	80015dc <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ff0:	e01b      	b.n	800202a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ff2:	f7ff faf3 	bl	80015dc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d914      	bls.n	800202a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10d      	bne.n	800202a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	f043 0210 	orr.w	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e007      	b.n	800203a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d0dc      	beq.n	8001ff2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_ADCEx_Calibration_Start+0x1e>
 800205e:	2302      	movs	r3, #2
 8002060:	e097      	b.n	8002192 <HAL_ADCEx_Calibration_Start+0x14e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa8 	bl	8001fc0 <ADC_ConversionStop_Disable>
 8002070:	4603      	mov	r3, r0
 8002072:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff49 	bl	8001f0c <ADC_Enable>
 800207a:	4603      	mov	r3, r0
 800207c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 8081 	bne.w	8002188 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800209a:	4b40      	ldr	r3, [pc, #256]	@ (800219c <HAL_ADCEx_Calibration_Start+0x158>)
 800209c:	681c      	ldr	r4, [r3, #0]
 800209e:	2002      	movs	r0, #2
 80020a0:	f000 ffe0 	bl	8003064 <HAL_RCCEx_GetPeriphCLKFreq>
 80020a4:	4603      	mov	r3, r0
 80020a6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80020aa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80020ac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80020ae:	e002      	b.n	80020b6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f9      	bne.n	80020b0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0208 	orr.w	r2, r2, #8
 80020ca:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020cc:	f7ff fa86 	bl	80015dc <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020d2:	e01b      	b.n	800210c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020d4:	f7ff fa82 	bl	80015dc <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b0a      	cmp	r3, #10
 80020e0:	d914      	bls.n	800210c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00d      	beq.n	800210c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	f023 0312 	bic.w	r3, r3, #18
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e042      	b.n	8002192 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1dc      	bne.n	80020d4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0204 	orr.w	r2, r2, #4
 8002128:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800212a:	f7ff fa57 	bl	80015dc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002130:	e01b      	b.n	800216a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002132:	f7ff fa53 	bl	80015dc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b0a      	cmp	r3, #10
 800213e:	d914      	bls.n	800216a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	f023 0312 	bic.w	r3, r3, #18
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e013      	b.n	8002192 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1dc      	bne.n	8002132 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	f023 0303 	bic.w	r3, r3, #3
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002190:	7dfb      	ldrb	r3, [r7, #23]
}
 8002192:	4618      	mov	r0, r3
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4906      	ldr	r1, [pc, #24]	@ (800224c <__NVIC_EnableIRQ+0x34>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	@ (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	@ (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	@ 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff90 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff2d 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff42 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff90 	bl	80022a4 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5f 	bl	8002250 <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff35 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b08b      	sub	sp, #44	@ 0x2c
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e2:	e169      	b.n	80026b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023e4:	2201      	movs	r2, #1
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f040 8158 	bne.w	80026b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a9a      	ldr	r2, [pc, #616]	@ (8002670 <HAL_GPIO_Init+0x2a0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d05e      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 800240c:	4a98      	ldr	r2, [pc, #608]	@ (8002670 <HAL_GPIO_Init+0x2a0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d875      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 8002412:	4a98      	ldr	r2, [pc, #608]	@ (8002674 <HAL_GPIO_Init+0x2a4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d058      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 8002418:	4a96      	ldr	r2, [pc, #600]	@ (8002674 <HAL_GPIO_Init+0x2a4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d86f      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 800241e:	4a96      	ldr	r2, [pc, #600]	@ (8002678 <HAL_GPIO_Init+0x2a8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d052      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 8002424:	4a94      	ldr	r2, [pc, #592]	@ (8002678 <HAL_GPIO_Init+0x2a8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d869      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 800242a:	4a94      	ldr	r2, [pc, #592]	@ (800267c <HAL_GPIO_Init+0x2ac>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d04c      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 8002430:	4a92      	ldr	r2, [pc, #584]	@ (800267c <HAL_GPIO_Init+0x2ac>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d863      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 8002436:	4a92      	ldr	r2, [pc, #584]	@ (8002680 <HAL_GPIO_Init+0x2b0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d046      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 800243c:	4a90      	ldr	r2, [pc, #576]	@ (8002680 <HAL_GPIO_Init+0x2b0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d85d      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 8002442:	2b12      	cmp	r3, #18
 8002444:	d82a      	bhi.n	800249c <HAL_GPIO_Init+0xcc>
 8002446:	2b12      	cmp	r3, #18
 8002448:	d859      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 800244a:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <HAL_GPIO_Init+0x80>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	080024cb 	.word	0x080024cb
 8002454:	080024a5 	.word	0x080024a5
 8002458:	080024b7 	.word	0x080024b7
 800245c:	080024f9 	.word	0x080024f9
 8002460:	080024ff 	.word	0x080024ff
 8002464:	080024ff 	.word	0x080024ff
 8002468:	080024ff 	.word	0x080024ff
 800246c:	080024ff 	.word	0x080024ff
 8002470:	080024ff 	.word	0x080024ff
 8002474:	080024ff 	.word	0x080024ff
 8002478:	080024ff 	.word	0x080024ff
 800247c:	080024ff 	.word	0x080024ff
 8002480:	080024ff 	.word	0x080024ff
 8002484:	080024ff 	.word	0x080024ff
 8002488:	080024ff 	.word	0x080024ff
 800248c:	080024ff 	.word	0x080024ff
 8002490:	080024ff 	.word	0x080024ff
 8002494:	080024ad 	.word	0x080024ad
 8002498:	080024c1 	.word	0x080024c1
 800249c:	4a79      	ldr	r2, [pc, #484]	@ (8002684 <HAL_GPIO_Init+0x2b4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024a2:	e02c      	b.n	80024fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e029      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	623b      	str	r3, [r7, #32]
          break;
 80024b4:	e024      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	3308      	adds	r3, #8
 80024bc:	623b      	str	r3, [r7, #32]
          break;
 80024be:	e01f      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	330c      	adds	r3, #12
 80024c6:	623b      	str	r3, [r7, #32]
          break;
 80024c8:	e01a      	b.n	8002500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024d2:	2304      	movs	r3, #4
 80024d4:	623b      	str	r3, [r7, #32]
          break;
 80024d6:	e013      	b.n	8002500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e0:	2308      	movs	r3, #8
 80024e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	611a      	str	r2, [r3, #16]
          break;
 80024ea:	e009      	b.n	8002500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ec:	2308      	movs	r3, #8
 80024ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	615a      	str	r2, [r3, #20]
          break;
 80024f6:	e003      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
          break;
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x130>
          break;
 80024fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2bff      	cmp	r3, #255	@ 0xff
 8002504:	d801      	bhi.n	800250a <HAL_GPIO_Init+0x13a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	e001      	b.n	800250e <HAL_GPIO_Init+0x13e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2bff      	cmp	r3, #255	@ 0xff
 8002514:	d802      	bhi.n	800251c <HAL_GPIO_Init+0x14c>
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	e002      	b.n	8002522 <HAL_GPIO_Init+0x152>
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	3b08      	subs	r3, #8
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	210f      	movs	r1, #15
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	401a      	ands	r2, r3
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	431a      	orrs	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80b1 	beq.w	80026b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002550:	4b4d      	ldr	r3, [pc, #308]	@ (8002688 <HAL_GPIO_Init+0x2b8>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a4c      	ldr	r2, [pc, #304]	@ (8002688 <HAL_GPIO_Init+0x2b8>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_GPIO_Init+0x2b8>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002568:	4a48      	ldr	r2, [pc, #288]	@ (800268c <HAL_GPIO_Init+0x2bc>)
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a40      	ldr	r2, [pc, #256]	@ (8002690 <HAL_GPIO_Init+0x2c0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_GPIO_Init+0x1ec>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3f      	ldr	r2, [pc, #252]	@ (8002694 <HAL_GPIO_Init+0x2c4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00d      	beq.n	80025b8 <HAL_GPIO_Init+0x1e8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3e      	ldr	r2, [pc, #248]	@ (8002698 <HAL_GPIO_Init+0x2c8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <HAL_GPIO_Init+0x1e4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a3d      	ldr	r2, [pc, #244]	@ (800269c <HAL_GPIO_Init+0x2cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_GPIO_Init+0x1e0>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x1ee>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e004      	b.n	80025be <HAL_GPIO_Init+0x1ee>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x1ee>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_GPIO_Init+0x1ee>
 80025bc:	2300      	movs	r3, #0
 80025be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c0:	f002 0203 	and.w	r2, r2, #3
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ce:	492f      	ldr	r1, [pc, #188]	@ (800268c <HAL_GPIO_Init+0x2bc>)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	492c      	ldr	r1, [pc, #176]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4928      	ldr	r1, [pc, #160]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002600:	4013      	ands	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002610:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4922      	ldr	r1, [pc, #136]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	60cb      	str	r3, [r1, #12]
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	43db      	mvns	r3, r3
 8002626:	491e      	ldr	r1, [pc, #120]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002628:	4013      	ands	r3, r2
 800262a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4918      	ldr	r1, [pc, #96]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	43db      	mvns	r3, r3
 800264e:	4914      	ldr	r1, [pc, #80]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002650:	4013      	ands	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d021      	beq.n	80026a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	490e      	ldr	r1, [pc, #56]	@ (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e021      	b.n	80026b2 <HAL_GPIO_Init+0x2e2>
 800266e:	bf00      	nop
 8002670:	10320000 	.word	0x10320000
 8002674:	10310000 	.word	0x10310000
 8002678:	10220000 	.word	0x10220000
 800267c:	10210000 	.word	0x10210000
 8002680:	10120000 	.word	0x10120000
 8002684:	10110000 	.word	0x10110000
 8002688:	40021000 	.word	0x40021000
 800268c:	40010000 	.word	0x40010000
 8002690:	40010800 	.word	0x40010800
 8002694:	40010c00 	.word	0x40010c00
 8002698:	40011000 	.word	0x40011000
 800269c:	40011400 	.word	0x40011400
 80026a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4909      	ldr	r1, [pc, #36]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	3301      	adds	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f47f ae8e 	bne.w	80023e4 <HAL_GPIO_Init+0x14>
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	372c      	adds	r7, #44	@ 0x2c
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40010400 	.word	0x40010400

080026d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e272      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8087 	beq.w	8002806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f8:	4b92      	ldr	r3, [pc, #584]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b04      	cmp	r3, #4
 8002702:	d00c      	beq.n	800271e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002704:	4b8f      	ldr	r3, [pc, #572]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d112      	bne.n	8002736 <HAL_RCC_OscConfig+0x5e>
 8002710:	4b8c      	ldr	r3, [pc, #560]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271c:	d10b      	bne.n	8002736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271e:	4b89      	ldr	r3, [pc, #548]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d06c      	beq.n	8002804 <HAL_RCC_OscConfig+0x12c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d168      	bne.n	8002804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e24c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x76>
 8002740:	4b80      	ldr	r3, [pc, #512]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a7f      	ldr	r2, [pc, #508]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e02e      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x98>
 8002756:	4b7b      	ldr	r3, [pc, #492]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7a      	ldr	r2, [pc, #488]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800275c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b78      	ldr	r3, [pc, #480]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a77      	ldr	r2, [pc, #476]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002768:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0xbc>
 800277a:	4b72      	ldr	r3, [pc, #456]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a71      	ldr	r2, [pc, #452]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b6f      	ldr	r3, [pc, #444]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6e      	ldr	r2, [pc, #440]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 8002794:	4b6b      	ldr	r3, [pc, #428]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6a      	ldr	r2, [pc, #424]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b68      	ldr	r3, [pc, #416]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a67      	ldr	r2, [pc, #412]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe ff12 	bl	80015dc <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe ff0e 	bl	80015dc <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e200      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xe4>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fefe 	bl	80015dc <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe fefa 	bl	80015dc <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e1ec      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x10c>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d063      	beq.n	80028da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002812:	4b4c      	ldr	r3, [pc, #304]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d11c      	bne.n	8002864 <HAL_RCC_OscConfig+0x18c>
 800282a:	4b46      	ldr	r3, [pc, #280]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d116      	bne.n	8002864 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	4b43      	ldr	r3, [pc, #268]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x176>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e1c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4939      	ldr	r1, [pc, #228]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	e03a      	b.n	80028da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe feb3 	bl	80015dc <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287a:	f7fe feaf 	bl	80015dc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1a1      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4927      	ldr	r1, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fe92 	bl	80015dc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028bc:	f7fe fe8e 	bl	80015dc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e180      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d03a      	beq.n	800295c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d019      	beq.n	8002922 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	4b17      	ldr	r3, [pc, #92]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fe72 	bl	80015dc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fe6e 	bl	80015dc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e160      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <HAL_RCC_OscConfig+0x26c>)
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800291a:	2001      	movs	r0, #1
 800291c:	f000 face 	bl	8002ebc <RCC_Delay>
 8002920:	e01c      	b.n	800295c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe fe58 	bl	80015dc <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292e:	e00f      	b.n	8002950 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe fe54 	bl	80015dc <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d908      	bls.n	8002950 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e146      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	42420000 	.word	0x42420000
 800294c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	4b92      	ldr	r3, [pc, #584]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e9      	bne.n	8002930 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a6 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	4b88      	ldr	r3, [pc, #544]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a87      	ldr	r2, [pc, #540]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]
 8002986:	4b85      	ldr	r3, [pc, #532]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b82      	ldr	r3, [pc, #520]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c8>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fe15 	bl	80015dc <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fe11 	bl	80015dc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	@ 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e103      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b75      	ldr	r3, [pc, #468]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x312>
 80029dc:	4b6f      	ldr	r3, [pc, #444]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4a6e      	ldr	r2, [pc, #440]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6213      	str	r3, [r2, #32]
 80029e8:	e02d      	b.n	8002a46 <HAL_RCC_OscConfig+0x36e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x334>
 80029f2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4a69      	ldr	r2, [pc, #420]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6213      	str	r3, [r2, #32]
 80029fe:	4b67      	ldr	r3, [pc, #412]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a66      	ldr	r2, [pc, #408]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	f023 0304 	bic.w	r3, r3, #4
 8002a08:	6213      	str	r3, [r2, #32]
 8002a0a:	e01c      	b.n	8002a46 <HAL_RCC_OscConfig+0x36e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x356>
 8002a14:	4b61      	ldr	r3, [pc, #388]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4a60      	ldr	r2, [pc, #384]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	4b5e      	ldr	r3, [pc, #376]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4a5d      	ldr	r2, [pc, #372]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCC_OscConfig+0x36e>
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a5a      	ldr	r2, [pc, #360]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	4b58      	ldr	r3, [pc, #352]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a57      	ldr	r2, [pc, #348]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d015      	beq.n	8002a7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fdc5 	bl	80015dc <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fdc1 	bl	80015dc <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0b1      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ee      	beq.n	8002a56 <HAL_RCC_OscConfig+0x37e>
 8002a78:	e014      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fdaf 	bl	80015dc <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fdab 	bl	80015dc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e09b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a98:	4b40      	ldr	r3, [pc, #256]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a3b      	ldr	r2, [pc, #236]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8087 	beq.w	8002bce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac0:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d061      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d146      	bne.n	8002b62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	4b33      	ldr	r3, [pc, #204]	@ (8002ba4 <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe fd7f 	bl	80015dc <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fd7b 	bl	80015dc <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e06d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af4:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b08:	d108      	bne.n	8002b1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4921      	ldr	r1, [pc, #132]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a19      	ldr	r1, [r3, #32]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	491b      	ldr	r1, [pc, #108]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fd4f 	bl	80015dc <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe fd4b 	bl	80015dc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e03d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x46a>
 8002b60:	e035      	b.n	8002bce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fd38 	bl	80015dc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fd34 	bl	80015dc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e026      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x498>
 8002b8e:	e01e      	b.n	8002bce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e019      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_OscConfig+0x500>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0d0      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d910      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b67      	ldr	r3, [pc, #412]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4965      	ldr	r1, [pc, #404]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b63      	ldr	r3, [pc, #396]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b8      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c38:	4b59      	ldr	r3, [pc, #356]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c50:	4b53      	ldr	r3, [pc, #332]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b50      	ldr	r3, [pc, #320]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	494d      	ldr	r1, [pc, #308]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d040      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b47      	ldr	r3, [pc, #284]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d115      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b41      	ldr	r3, [pc, #260]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e073      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b3d      	ldr	r3, [pc, #244]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4936      	ldr	r1, [pc, #216]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fc86 	bl	80015dc <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fc82 	bl	80015dc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e053      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b2d      	ldr	r3, [pc, #180]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b27      	ldr	r3, [pc, #156]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d210      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0207 	bic.w	r2, r3, #7
 8002d12:	4922      	ldr	r1, [pc, #136]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e032      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4916      	ldr	r1, [pc, #88]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d56:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	490e      	ldr	r1, [pc, #56]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d6a:	f000 f821 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	490a      	ldr	r1, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	5ccb      	ldrb	r3, [r1, r3]
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <HAL_RCC_ClockConfig+0x1cc>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x1d0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fbe4 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08004db4 	.word	0x08004db4
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000004 	.word	0x20000004

08002db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dde:	e027      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002de2:	613b      	str	r3, [r7, #16]
      break;
 8002de4:	e027      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dfe:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0c5b      	lsrs	r3, r3, #17
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	4a11      	ldr	r2, [pc, #68]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e12:	fb03 f202 	mul.w	r2, r3, r2
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e004      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e32:	613b      	str	r3, [r7, #16]
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	693b      	ldr	r3, [r7, #16]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	007a1200 	.word	0x007a1200
 8002e4c:	08004dcc 	.word	0x08004dcc
 8002e50:	08004ddc 	.word	0x08004ddc
 8002e54:	003d0900 	.word	0x003d0900

08002e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e5c:	4b02      	ldr	r3, [pc, #8]	@ (8002e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e70:	f7ff fff2 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4903      	ldr	r1, [pc, #12]	@ (8002e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08004dc4 	.word	0x08004dc4

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e98:	f7ff ffde 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0adb      	lsrs	r3, r3, #11
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4903      	ldr	r1, [pc, #12]	@ (8002eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08004dc4 	.word	0x08004dc4

08002ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <RCC_Delay+0x34>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <RCC_Delay+0x38>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0a5b      	lsrs	r3, r3, #9
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ed8:	bf00      	nop
  }
  while (Delay --);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	60fa      	str	r2, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <RCC_Delay+0x1c>
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	10624dd3 	.word	0x10624dd3

08002ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d07d      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f18:	4b4f      	ldr	r3, [pc, #316]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	61d3      	str	r3, [r2, #28]
 8002f30:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b46      	ldr	r3, [pc, #280]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d118      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4c:	4b43      	ldr	r3, [pc, #268]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a42      	ldr	r2, [pc, #264]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f58:	f7fe fb40 	bl	80015dc <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	e008      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe fb3c 	bl	80015dc <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e06d      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b3a      	ldr	r3, [pc, #232]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7e:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02e      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d027      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fac:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fb2:	4a29      	ldr	r2, [pc, #164]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d014      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fb0b 	bl	80015dc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fb07 	bl	80015dc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e036      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4917      	ldr	r1, [pc, #92]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800300e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	490b      	ldr	r1, [pc, #44]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4904      	ldr	r1, [pc, #16]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420440 	.word	0x42420440

08003064 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b10      	cmp	r3, #16
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b10      	cmp	r3, #16
 800308a:	f200 808a 	bhi.w	80031a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d045      	beq.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d075      	beq.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800309a:	e082      	b.n	80031a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800309c:	4b46      	ldr	r3, [pc, #280]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80030a2:	4b45      	ldr	r3, [pc, #276]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d07b      	beq.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0c9b      	lsrs	r3, r3, #18
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	4a41      	ldr	r2, [pc, #260]	@ (80031bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80030b8:	5cd3      	ldrb	r3, [r2, r3]
 80030ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030c6:	4b3c      	ldr	r3, [pc, #240]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0c5b      	lsrs	r3, r3, #17
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	4a3b      	ldr	r2, [pc, #236]	@ (80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80030e0:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	e004      	b.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4a34      	ldr	r2, [pc, #208]	@ (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80030fc:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003108:	d102      	bne.n	8003110 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	61bb      	str	r3, [r7, #24]
      break;
 800310e:	e04a      	b.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4a2d      	ldr	r2, [pc, #180]	@ (80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	61bb      	str	r3, [r7, #24]
      break;
 800311e:	e042      	b.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003120:	4b25      	ldr	r3, [pc, #148]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003130:	d108      	bne.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800313c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e01f      	b.n	8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800314a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800314e:	d109      	bne.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003150:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800315c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	e00f      	b.n	8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800316e:	d11c      	bne.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d016      	beq.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800317c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003180:	61bb      	str	r3, [r7, #24]
      break;
 8003182:	e012      	b.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003184:	e011      	b.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003186:	f7ff fe85 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0b9b      	lsrs	r3, r3, #14
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	61bb      	str	r3, [r7, #24]
      break;
 80031a0:	e004      	b.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80031a2:	bf00      	nop
 80031a4:	e002      	b.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80031aa:	bf00      	nop
    }
  }
  return (frequency);
 80031ac:	69bb      	ldr	r3, [r7, #24]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08004de0 	.word	0x08004de0
 80031c0:	08004df0 	.word	0x08004df0
 80031c4:	007a1200 	.word	0x007a1200
 80031c8:	003d0900 	.word	0x003d0900
 80031cc:	aaaaaaab 	.word	0xaaaaaaab

080031d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e041      	b.n	8003266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fff8 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 fb2a 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e041      	b.n	8003304 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f839 	bl	800330c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f000 fadb 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d122      	bne.n	800337a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11b      	bne.n	800337a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f06f 0202 	mvn.w	r2, #2
 800334a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa6e 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 8003366:	e005      	b.n	8003374 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fd fe93 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fea2 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d122      	bne.n	80033ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d11b      	bne.n	80033ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f06f 0204 	mvn.w	r2, #4
 800339e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa44 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 80033ba:	e005      	b.n	80033c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fd fe69 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fe78 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d122      	bne.n	8003422 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11b      	bne.n	8003422 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0208 	mvn.w	r2, #8
 80033f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2204      	movs	r2, #4
 80033f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa1a 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 800340e:	e005      	b.n	800341c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd fe3f 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fe4e 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d122      	bne.n	8003476 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b10      	cmp	r3, #16
 800343c:	d11b      	bne.n	8003476 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f06f 0210 	mvn.w	r2, #16
 8003446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2208      	movs	r2, #8
 800344c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f9f0 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 8003462:	e005      	b.n	8003470 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fd fe15 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fe24 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0201 	mvn.w	r2, #1
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fe02 	bl	80010a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ac:	2b80      	cmp	r3, #128	@ 0x80
 80034ae:	d10e      	bne.n	80034ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b80      	cmp	r3, #128	@ 0x80
 80034bc:	d107      	bne.n	80034ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fda3 	bl	8004014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b40      	cmp	r3, #64	@ 0x40
 80034da:	d10e      	bne.n	80034fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d107      	bne.n	80034fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9ad 	bl	8003854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d10e      	bne.n	8003526 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d107      	bne.n	8003526 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0220 	mvn.w	r2, #32
 800351e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fd6e 	bl	8004002 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800354a:	2302      	movs	r3, #2
 800354c:	e0ae      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	f200 809f 	bhi.w	800369c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800355e:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003599 	.word	0x08003599
 8003568:	0800369d 	.word	0x0800369d
 800356c:	0800369d 	.word	0x0800369d
 8003570:	0800369d 	.word	0x0800369d
 8003574:	080035d9 	.word	0x080035d9
 8003578:	0800369d 	.word	0x0800369d
 800357c:	0800369d 	.word	0x0800369d
 8003580:	0800369d 	.word	0x0800369d
 8003584:	0800361b 	.word	0x0800361b
 8003588:	0800369d 	.word	0x0800369d
 800358c:	0800369d 	.word	0x0800369d
 8003590:	0800369d 	.word	0x0800369d
 8003594:	0800365b 	.word	0x0800365b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f9c4 	bl	800392c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0208 	orr.w	r2, r2, #8
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0204 	bic.w	r2, r2, #4
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	619a      	str	r2, [r3, #24]
      break;
 80035d6:	e064      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fa0a 	bl	80039f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6999      	ldr	r1, [r3, #24]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	619a      	str	r2, [r3, #24]
      break;
 8003618:	e043      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fa53 	bl	8003acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0208 	orr.w	r2, r2, #8
 8003634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0204 	bic.w	r2, r2, #4
 8003644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	61da      	str	r2, [r3, #28]
      break;
 8003658:	e023      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fa9d 	bl	8003ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69d9      	ldr	r1, [r3, #28]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	61da      	str	r2, [r3, #28]
      break;
 800369a:	e002      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
      break;
 80036a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0b4      	b.n	800383a <HAL_TIM_ConfigClockSource+0x186>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003708:	d03e      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0xd4>
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370e:	f200 8087 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003716:	f000 8086 	beq.w	8003826 <HAL_TIM_ConfigClockSource+0x172>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371e:	d87f      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b70      	cmp	r3, #112	@ 0x70
 8003722:	d01a      	beq.n	800375a <HAL_TIM_ConfigClockSource+0xa6>
 8003724:	2b70      	cmp	r3, #112	@ 0x70
 8003726:	d87b      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b60      	cmp	r3, #96	@ 0x60
 800372a:	d050      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x11a>
 800372c:	2b60      	cmp	r3, #96	@ 0x60
 800372e:	d877      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b50      	cmp	r3, #80	@ 0x50
 8003732:	d03c      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0xfa>
 8003734:	2b50      	cmp	r3, #80	@ 0x50
 8003736:	d873      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	d058      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x13a>
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d86f      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b30      	cmp	r3, #48	@ 0x30
 8003742:	d064      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x15a>
 8003744:	2b30      	cmp	r3, #48	@ 0x30
 8003746:	d86b      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b20      	cmp	r3, #32
 800374a:	d060      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x15a>
 800374c:	2b20      	cmp	r3, #32
 800374e:	d867      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05c      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b10      	cmp	r3, #16
 8003756:	d05a      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x15a>
 8003758:	e062      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	f000 fade 	bl	8003d2a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800377c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	609a      	str	r2, [r3, #8]
      break;
 8003786:	e04f      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	f000 fac7 	bl	8003d2a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037aa:	609a      	str	r2, [r3, #8]
      break;
 80037ac:	e03c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa3e 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2150      	movs	r1, #80	@ 0x50
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa95 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e02c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 fa5c 	bl	8003c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2160      	movs	r1, #96	@ 0x60
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fa85 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80037ec:	e01c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	461a      	mov	r2, r3
 80037fc:	f000 fa1e 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2140      	movs	r1, #64	@ 0x40
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fa75 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 800380c:	e00c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f000 fa6c 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 800381e:	e003      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e000      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a29      	ldr	r2, [pc, #164]	@ (8003920 <TIM_Base_SetConfig+0xb8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00b      	beq.n	8003898 <TIM_Base_SetConfig+0x30>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003886:	d007      	beq.n	8003898 <TIM_Base_SetConfig+0x30>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a26      	ldr	r2, [pc, #152]	@ (8003924 <TIM_Base_SetConfig+0xbc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_Base_SetConfig+0x30>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <TIM_Base_SetConfig+0xc0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003920 <TIM_Base_SetConfig+0xb8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0x62>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0x62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <TIM_Base_SetConfig+0xbc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0x62>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <TIM_Base_SetConfig+0xc0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a07      	ldr	r2, [pc, #28]	@ (8003920 <TIM_Base_SetConfig+0xb8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	615a      	str	r2, [r3, #20]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800

0800392c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 0201 	bic.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0303 	bic.w	r3, r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f023 0302 	bic.w	r3, r3, #2
 8003974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a1c      	ldr	r2, [pc, #112]	@ (80039f4 <TIM_OC1_SetConfig+0xc8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d10c      	bne.n	80039a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0308 	bic.w	r3, r3, #8
 800398e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a13      	ldr	r2, [pc, #76]	@ (80039f4 <TIM_OC1_SetConfig+0xc8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d111      	bne.n	80039ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40012c00 	.word	0x40012c00

080039f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 0210 	bic.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 0320 	bic.w	r3, r3, #32
 8003a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <TIM_OC2_SetConfig+0xd0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10d      	bne.n	8003a74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a14      	ldr	r2, [pc, #80]	@ (8003ac8 <TIM_OC2_SetConfig+0xd0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d113      	bne.n	8003aa4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	40012c00 	.word	0x40012c00

08003acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <TIM_OC3_SetConfig+0xd0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10d      	bne.n	8003b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a14      	ldr	r2, [pc, #80]	@ (8003b9c <TIM_OC3_SetConfig+0xd0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d113      	bne.n	8003b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00

08003ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003c38 <TIM_OC4_SetConfig+0x98>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d109      	bne.n	8003c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00

08003c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0210 	bic.w	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	031b      	lsls	r3, r3, #12
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f043 0307 	orr.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b087      	sub	sp, #28
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	021a      	lsls	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	609a      	str	r2, [r3, #8]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_TIMEx_PWMN_Start+0x24>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e022      	b.n	8003dd2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d109      	bne.n	8003da6 <HAL_TIMEx_PWMN_Start+0x3e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e015      	b.n	8003dd2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIMEx_PWMN_Start+0x58>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e008      	b.n	8003dd2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e059      	b.n	8003e8e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <HAL_TIMEx_PWMN_Start+0x82>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003de8:	e013      	b.n	8003e12 <HAL_TIMEx_PWMN_Start+0xaa>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d104      	bne.n	8003dfa <HAL_TIMEx_PWMN_Start+0x92>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003df8:	e00b      	b.n	8003e12 <HAL_TIMEx_PWMN_Start+0xaa>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIMEx_PWMN_Start+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e08:	e003      	b.n	8003e12 <HAL_TIMEx_PWMN_Start+0xaa>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2204      	movs	r2, #4
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f903 	bl	8004026 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	@ (8003e98 <HAL_TIMEx_PWMN_Start+0x130>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_TIMEx_PWMN_Start+0xf0>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e42:	d009      	beq.n	8003e58 <HAL_TIMEx_PWMN_Start+0xf0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <HAL_TIMEx_PWMN_Start+0x134>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIMEx_PWMN_Start+0xf0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <HAL_TIMEx_PWMN_Start+0x138>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d010      	beq.n	8003e8c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	e007      	b.n	8003e8c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800

08003ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e046      	b.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a16      	ldr	r2, [pc, #88]	@ (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f08:	d009      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a10      	ldr	r2, [pc, #64]	@ (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10c      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800

08003f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e03d      	b.n	8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004026:	b480      	push	{r7}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2204      	movs	r2, #4
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	43db      	mvns	r3, r3
 8004048:	401a      	ands	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	431a      	orrs	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e042      	b.n	8004106 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fd f937 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2224      	movs	r2, #36	@ 0x24
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f91c 	bl	80042f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b08a      	sub	sp, #40	@ 0x28
 8004112:	af02      	add	r7, sp, #8
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d16d      	bne.n	800420a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_UART_Transmit+0x2c>
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e066      	b.n	800420c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2221      	movs	r2, #33	@ 0x21
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414c:	f7fd fa46 	bl	80015dc <HAL_GetTick>
 8004150:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004166:	d108      	bne.n	800417a <HAL_UART_Transmit+0x6c>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e003      	b.n	8004182 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004182:	e02a      	b.n	80041da <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2200      	movs	r2, #0
 800418c:	2180      	movs	r1, #128	@ 0x80
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f840 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e036      	b.n	800420c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	3302      	adds	r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e007      	b.n	80041cc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1cf      	bne.n	8004184 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2140      	movs	r1, #64	@ 0x40
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f810 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e006      	b.n	800420c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b090      	sub	sp, #64	@ 0x40
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004224:	e050      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d04c      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800422e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <UART_WaitOnFlagUntilTimeout+0x30>
 8004234:	f7fd f9d2 	bl	80015dc <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004240:	429a      	cmp	r2, r3
 8004242:	d241      	bcs.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004264:	637a      	str	r2, [r7, #52]	@ 0x34
 8004266:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800426a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	613b      	str	r3, [r7, #16]
   return(result);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004298:	623a      	str	r2, [r7, #32]
 800429a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	69f9      	ldr	r1, [r7, #28]
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e00f      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d09f      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3740      	adds	r7, #64	@ 0x40
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800432a:	f023 030c 	bic.w	r3, r3, #12
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	430b      	orrs	r3, r1
 8004336:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2c      	ldr	r2, [pc, #176]	@ (8004404 <UART_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7fe fd9c 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	e002      	b.n	8004366 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7fe fd84 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004364:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	4a22      	ldr	r2, [pc, #136]	@ (8004408 <UART_SetConfig+0x118>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	0119      	lsls	r1, r3, #4
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f2f3 	udiv	r2, r2, r3
 800439c:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <UART_SetConfig+0x118>)
 800439e:	fba3 0302 	umull	r0, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2064      	movs	r0, #100	@ 0x64
 80043a6:	fb00 f303 	mul.w	r3, r0, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	3332      	adds	r3, #50	@ 0x32
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <UART_SetConfig+0x118>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043bc:	4419      	add	r1, r3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009a      	lsls	r2, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <UART_SetConfig+0x118>)
 80043d6:	fba3 0302 	umull	r0, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2064      	movs	r0, #100	@ 0x64
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	@ 0x32
 80043e8:	4a07      	ldr	r2, [pc, #28]	@ (8004408 <UART_SetConfig+0x118>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	440a      	add	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40013800 	.word	0x40013800
 8004408:	51eb851f 	.word	0x51eb851f

0800440c <siprintf>:
 800440c:	b40e      	push	{r1, r2, r3}
 800440e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004412:	b500      	push	{lr}
 8004414:	b09c      	sub	sp, #112	@ 0x70
 8004416:	ab1d      	add	r3, sp, #116	@ 0x74
 8004418:	9002      	str	r0, [sp, #8]
 800441a:	9006      	str	r0, [sp, #24]
 800441c:	9107      	str	r1, [sp, #28]
 800441e:	9104      	str	r1, [sp, #16]
 8004420:	4808      	ldr	r0, [pc, #32]	@ (8004444 <siprintf+0x38>)
 8004422:	4909      	ldr	r1, [pc, #36]	@ (8004448 <siprintf+0x3c>)
 8004424:	f853 2b04 	ldr.w	r2, [r3], #4
 8004428:	9105      	str	r1, [sp, #20]
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	a902      	add	r1, sp, #8
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	f000 f992 	bl	8004758 <_svfiprintf_r>
 8004434:	2200      	movs	r2, #0
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	b01c      	add	sp, #112	@ 0x70
 800443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004440:	b003      	add	sp, #12
 8004442:	4770      	bx	lr
 8004444:	2000000c 	.word	0x2000000c
 8004448:	ffff0208 	.word	0xffff0208

0800444c <memset>:
 800444c:	4603      	mov	r3, r0
 800444e:	4402      	add	r2, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <__errno>:
 800445c:	4b01      	ldr	r3, [pc, #4]	@ (8004464 <__errno+0x8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	2600      	movs	r6, #0
 800446c:	4d0c      	ldr	r5, [pc, #48]	@ (80044a0 <__libc_init_array+0x38>)
 800446e:	4c0d      	ldr	r4, [pc, #52]	@ (80044a4 <__libc_init_array+0x3c>)
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	f000 fc78 	bl	8004d6c <_init>
 800447c:	2600      	movs	r6, #0
 800447e:	4d0a      	ldr	r5, [pc, #40]	@ (80044a8 <__libc_init_array+0x40>)
 8004480:	4c0a      	ldr	r4, [pc, #40]	@ (80044ac <__libc_init_array+0x44>)
 8004482:	1b64      	subs	r4, r4, r5
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08004e30 	.word	0x08004e30
 80044a4:	08004e30 	.word	0x08004e30
 80044a8:	08004e30 	.word	0x08004e30
 80044ac:	08004e34 	.word	0x08004e34

080044b0 <__retarget_lock_acquire_recursive>:
 80044b0:	4770      	bx	lr

080044b2 <__retarget_lock_release_recursive>:
 80044b2:	4770      	bx	lr

080044b4 <_free_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4605      	mov	r5, r0
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d040      	beq.n	800453e <_free_r+0x8a>
 80044bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c0:	1f0c      	subs	r4, r1, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	18e4      	addlt	r4, r4, r3
 80044c8:	f000 f8de 	bl	8004688 <__malloc_lock>
 80044cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004540 <_free_r+0x8c>)
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	b933      	cbnz	r3, 80044e0 <_free_r+0x2c>
 80044d2:	6063      	str	r3, [r4, #4]
 80044d4:	6014      	str	r4, [r2, #0]
 80044d6:	4628      	mov	r0, r5
 80044d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044dc:	f000 b8da 	b.w	8004694 <__malloc_unlock>
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	d908      	bls.n	80044f6 <_free_r+0x42>
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	1821      	adds	r1, r4, r0
 80044e8:	428b      	cmp	r3, r1
 80044ea:	bf01      	itttt	eq
 80044ec:	6819      	ldreq	r1, [r3, #0]
 80044ee:	685b      	ldreq	r3, [r3, #4]
 80044f0:	1809      	addeq	r1, r1, r0
 80044f2:	6021      	streq	r1, [r4, #0]
 80044f4:	e7ed      	b.n	80044d2 <_free_r+0x1e>
 80044f6:	461a      	mov	r2, r3
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b10b      	cbz	r3, 8004500 <_free_r+0x4c>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d9fa      	bls.n	80044f6 <_free_r+0x42>
 8004500:	6811      	ldr	r1, [r2, #0]
 8004502:	1850      	adds	r0, r2, r1
 8004504:	42a0      	cmp	r0, r4
 8004506:	d10b      	bne.n	8004520 <_free_r+0x6c>
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	4401      	add	r1, r0
 800450c:	1850      	adds	r0, r2, r1
 800450e:	4283      	cmp	r3, r0
 8004510:	6011      	str	r1, [r2, #0]
 8004512:	d1e0      	bne.n	80044d6 <_free_r+0x22>
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4408      	add	r0, r1
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	e7da      	b.n	80044d6 <_free_r+0x22>
 8004520:	d902      	bls.n	8004528 <_free_r+0x74>
 8004522:	230c      	movs	r3, #12
 8004524:	602b      	str	r3, [r5, #0]
 8004526:	e7d6      	b.n	80044d6 <_free_r+0x22>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	1821      	adds	r1, r4, r0
 800452c:	428b      	cmp	r3, r1
 800452e:	bf01      	itttt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	1809      	addeq	r1, r1, r0
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	6054      	str	r4, [r2, #4]
 800453c:	e7cb      	b.n	80044d6 <_free_r+0x22>
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	20000308 	.word	0x20000308

08004544 <sbrk_aligned>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4e0f      	ldr	r6, [pc, #60]	@ (8004584 <sbrk_aligned+0x40>)
 8004548:	460c      	mov	r4, r1
 800454a:	6831      	ldr	r1, [r6, #0]
 800454c:	4605      	mov	r5, r0
 800454e:	b911      	cbnz	r1, 8004556 <sbrk_aligned+0x12>
 8004550:	f000 fbaa 	bl	8004ca8 <_sbrk_r>
 8004554:	6030      	str	r0, [r6, #0]
 8004556:	4621      	mov	r1, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f000 fba5 	bl	8004ca8 <_sbrk_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	d103      	bne.n	800456a <sbrk_aligned+0x26>
 8004562:	f04f 34ff 	mov.w	r4, #4294967295
 8004566:	4620      	mov	r0, r4
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	1cc4      	adds	r4, r0, #3
 800456c:	f024 0403 	bic.w	r4, r4, #3
 8004570:	42a0      	cmp	r0, r4
 8004572:	d0f8      	beq.n	8004566 <sbrk_aligned+0x22>
 8004574:	1a21      	subs	r1, r4, r0
 8004576:	4628      	mov	r0, r5
 8004578:	f000 fb96 	bl	8004ca8 <_sbrk_r>
 800457c:	3001      	adds	r0, #1
 800457e:	d1f2      	bne.n	8004566 <sbrk_aligned+0x22>
 8004580:	e7ef      	b.n	8004562 <sbrk_aligned+0x1e>
 8004582:	bf00      	nop
 8004584:	20000304 	.word	0x20000304

08004588 <_malloc_r>:
 8004588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800458c:	1ccd      	adds	r5, r1, #3
 800458e:	f025 0503 	bic.w	r5, r5, #3
 8004592:	3508      	adds	r5, #8
 8004594:	2d0c      	cmp	r5, #12
 8004596:	bf38      	it	cc
 8004598:	250c      	movcc	r5, #12
 800459a:	2d00      	cmp	r5, #0
 800459c:	4606      	mov	r6, r0
 800459e:	db01      	blt.n	80045a4 <_malloc_r+0x1c>
 80045a0:	42a9      	cmp	r1, r5
 80045a2:	d904      	bls.n	80045ae <_malloc_r+0x26>
 80045a4:	230c      	movs	r3, #12
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	2000      	movs	r0, #0
 80045aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004684 <_malloc_r+0xfc>
 80045b2:	f000 f869 	bl	8004688 <__malloc_lock>
 80045b6:	f8d8 3000 	ldr.w	r3, [r8]
 80045ba:	461c      	mov	r4, r3
 80045bc:	bb44      	cbnz	r4, 8004610 <_malloc_r+0x88>
 80045be:	4629      	mov	r1, r5
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff ffbf 	bl	8004544 <sbrk_aligned>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	4604      	mov	r4, r0
 80045ca:	d158      	bne.n	800467e <_malloc_r+0xf6>
 80045cc:	f8d8 4000 	ldr.w	r4, [r8]
 80045d0:	4627      	mov	r7, r4
 80045d2:	2f00      	cmp	r7, #0
 80045d4:	d143      	bne.n	800465e <_malloc_r+0xd6>
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	d04b      	beq.n	8004672 <_malloc_r+0xea>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	4639      	mov	r1, r7
 80045de:	4630      	mov	r0, r6
 80045e0:	eb04 0903 	add.w	r9, r4, r3
 80045e4:	f000 fb60 	bl	8004ca8 <_sbrk_r>
 80045e8:	4581      	cmp	r9, r0
 80045ea:	d142      	bne.n	8004672 <_malloc_r+0xea>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	4630      	mov	r0, r6
 80045f0:	1a6d      	subs	r5, r5, r1
 80045f2:	4629      	mov	r1, r5
 80045f4:	f7ff ffa6 	bl	8004544 <sbrk_aligned>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d03a      	beq.n	8004672 <_malloc_r+0xea>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	442b      	add	r3, r5
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	f8d8 3000 	ldr.w	r3, [r8]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	bb62      	cbnz	r2, 8004664 <_malloc_r+0xdc>
 800460a:	f8c8 7000 	str.w	r7, [r8]
 800460e:	e00f      	b.n	8004630 <_malloc_r+0xa8>
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	1b52      	subs	r2, r2, r5
 8004614:	d420      	bmi.n	8004658 <_malloc_r+0xd0>
 8004616:	2a0b      	cmp	r2, #11
 8004618:	d917      	bls.n	800464a <_malloc_r+0xc2>
 800461a:	1961      	adds	r1, r4, r5
 800461c:	42a3      	cmp	r3, r4
 800461e:	6025      	str	r5, [r4, #0]
 8004620:	bf18      	it	ne
 8004622:	6059      	strne	r1, [r3, #4]
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	bf08      	it	eq
 8004628:	f8c8 1000 	streq.w	r1, [r8]
 800462c:	5162      	str	r2, [r4, r5]
 800462e:	604b      	str	r3, [r1, #4]
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f82f 	bl	8004694 <__malloc_unlock>
 8004636:	f104 000b 	add.w	r0, r4, #11
 800463a:	1d23      	adds	r3, r4, #4
 800463c:	f020 0007 	bic.w	r0, r0, #7
 8004640:	1ac2      	subs	r2, r0, r3
 8004642:	bf1c      	itt	ne
 8004644:	1a1b      	subne	r3, r3, r0
 8004646:	50a3      	strne	r3, [r4, r2]
 8004648:	e7af      	b.n	80045aa <_malloc_r+0x22>
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	42a3      	cmp	r3, r4
 800464e:	bf0c      	ite	eq
 8004650:	f8c8 2000 	streq.w	r2, [r8]
 8004654:	605a      	strne	r2, [r3, #4]
 8004656:	e7eb      	b.n	8004630 <_malloc_r+0xa8>
 8004658:	4623      	mov	r3, r4
 800465a:	6864      	ldr	r4, [r4, #4]
 800465c:	e7ae      	b.n	80045bc <_malloc_r+0x34>
 800465e:	463c      	mov	r4, r7
 8004660:	687f      	ldr	r7, [r7, #4]
 8004662:	e7b6      	b.n	80045d2 <_malloc_r+0x4a>
 8004664:	461a      	mov	r2, r3
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	42a3      	cmp	r3, r4
 800466a:	d1fb      	bne.n	8004664 <_malloc_r+0xdc>
 800466c:	2300      	movs	r3, #0
 800466e:	6053      	str	r3, [r2, #4]
 8004670:	e7de      	b.n	8004630 <_malloc_r+0xa8>
 8004672:	230c      	movs	r3, #12
 8004674:	4630      	mov	r0, r6
 8004676:	6033      	str	r3, [r6, #0]
 8004678:	f000 f80c 	bl	8004694 <__malloc_unlock>
 800467c:	e794      	b.n	80045a8 <_malloc_r+0x20>
 800467e:	6005      	str	r5, [r0, #0]
 8004680:	e7d6      	b.n	8004630 <_malloc_r+0xa8>
 8004682:	bf00      	nop
 8004684:	20000308 	.word	0x20000308

08004688 <__malloc_lock>:
 8004688:	4801      	ldr	r0, [pc, #4]	@ (8004690 <__malloc_lock+0x8>)
 800468a:	f7ff bf11 	b.w	80044b0 <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000300 	.word	0x20000300

08004694 <__malloc_unlock>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__malloc_unlock+0x8>)
 8004696:	f7ff bf0c 	b.w	80044b2 <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000300 	.word	0x20000300

080046a0 <__ssputs_r>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	461f      	mov	r7, r3
 80046a6:	688e      	ldr	r6, [r1, #8]
 80046a8:	4682      	mov	sl, r0
 80046aa:	42be      	cmp	r6, r7
 80046ac:	460c      	mov	r4, r1
 80046ae:	4690      	mov	r8, r2
 80046b0:	680b      	ldr	r3, [r1, #0]
 80046b2:	d82d      	bhi.n	8004710 <__ssputs_r+0x70>
 80046b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046bc:	d026      	beq.n	800470c <__ssputs_r+0x6c>
 80046be:	6965      	ldr	r5, [r4, #20]
 80046c0:	6909      	ldr	r1, [r1, #16]
 80046c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c6:	eba3 0901 	sub.w	r9, r3, r1
 80046ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ce:	1c7b      	adds	r3, r7, #1
 80046d0:	444b      	add	r3, r9
 80046d2:	106d      	asrs	r5, r5, #1
 80046d4:	429d      	cmp	r5, r3
 80046d6:	bf38      	it	cc
 80046d8:	461d      	movcc	r5, r3
 80046da:	0553      	lsls	r3, r2, #21
 80046dc:	d527      	bpl.n	800472e <__ssputs_r+0x8e>
 80046de:	4629      	mov	r1, r5
 80046e0:	f7ff ff52 	bl	8004588 <_malloc_r>
 80046e4:	4606      	mov	r6, r0
 80046e6:	b360      	cbz	r0, 8004742 <__ssputs_r+0xa2>
 80046e8:	464a      	mov	r2, r9
 80046ea:	6921      	ldr	r1, [r4, #16]
 80046ec:	f000 fafa 	bl	8004ce4 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	444e      	add	r6, r9
 8004700:	6026      	str	r6, [r4, #0]
 8004702:	463e      	mov	r6, r7
 8004704:	6165      	str	r5, [r4, #20]
 8004706:	eba5 0509 	sub.w	r5, r5, r9
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x72>
 8004710:	463e      	mov	r6, r7
 8004712:	4632      	mov	r2, r6
 8004714:	4641      	mov	r1, r8
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	f000 faac 	bl	8004c74 <memmove>
 800471c:	2000      	movs	r0, #0
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	4433      	add	r3, r6
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472e:	462a      	mov	r2, r5
 8004730:	f000 fae6 	bl	8004d00 <_realloc_r>
 8004734:	4606      	mov	r6, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d1e0      	bne.n	80046fc <__ssputs_r+0x5c>
 800473a:	4650      	mov	r0, sl
 800473c:	6921      	ldr	r1, [r4, #16]
 800473e:	f7ff feb9 	bl	80044b4 <_free_r>
 8004742:	230c      	movs	r3, #12
 8004744:	f8ca 3000 	str.w	r3, [sl]
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	e7e9      	b.n	800472a <__ssputs_r+0x8a>
	...

08004758 <_svfiprintf_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4698      	mov	r8, r3
 800475e:	898b      	ldrh	r3, [r1, #12]
 8004760:	4607      	mov	r7, r0
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	460d      	mov	r5, r1
 8004766:	4614      	mov	r4, r2
 8004768:	b09d      	sub	sp, #116	@ 0x74
 800476a:	d510      	bpl.n	800478e <_svfiprintf_r+0x36>
 800476c:	690b      	ldr	r3, [r1, #16]
 800476e:	b973      	cbnz	r3, 800478e <_svfiprintf_r+0x36>
 8004770:	2140      	movs	r1, #64	@ 0x40
 8004772:	f7ff ff09 	bl	8004588 <_malloc_r>
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	6128      	str	r0, [r5, #16]
 800477a:	b930      	cbnz	r0, 800478a <_svfiprintf_r+0x32>
 800477c:	230c      	movs	r3, #12
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	b01d      	add	sp, #116	@ 0x74
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	2340      	movs	r3, #64	@ 0x40
 800478c:	616b      	str	r3, [r5, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	9309      	str	r3, [sp, #36]	@ 0x24
 8004792:	2320      	movs	r3, #32
 8004794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004798:	2330      	movs	r3, #48	@ 0x30
 800479a:	f04f 0901 	mov.w	r9, #1
 800479e:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800493c <_svfiprintf_r+0x1e4>
 80047a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047aa:	4623      	mov	r3, r4
 80047ac:	469a      	mov	sl, r3
 80047ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b2:	b10a      	cbz	r2, 80047b8 <_svfiprintf_r+0x60>
 80047b4:	2a25      	cmp	r2, #37	@ 0x25
 80047b6:	d1f9      	bne.n	80047ac <_svfiprintf_r+0x54>
 80047b8:	ebba 0b04 	subs.w	fp, sl, r4
 80047bc:	d00b      	beq.n	80047d6 <_svfiprintf_r+0x7e>
 80047be:	465b      	mov	r3, fp
 80047c0:	4622      	mov	r2, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ff6b 	bl	80046a0 <__ssputs_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	f000 80a7 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d2:	445a      	add	r2, fp
 80047d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d6:	f89a 3000 	ldrb.w	r3, [sl]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 809f 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ea:	f10a 0a01 	add.w	sl, sl, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f8:	4654      	mov	r4, sl
 80047fa:	2205      	movs	r2, #5
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	484e      	ldr	r0, [pc, #312]	@ (800493c <_svfiprintf_r+0x1e4>)
 8004802:	f000 fa61 	bl	8004cc8 <memchr>
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	b9d8      	cbnz	r0, 8004842 <_svfiprintf_r+0xea>
 800480a:	06d0      	lsls	r0, r2, #27
 800480c:	bf44      	itt	mi
 800480e:	2320      	movmi	r3, #32
 8004810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004814:	0711      	lsls	r1, r2, #28
 8004816:	bf44      	itt	mi
 8004818:	232b      	movmi	r3, #43	@ 0x2b
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481e:	f89a 3000 	ldrb.w	r3, [sl]
 8004822:	2b2a      	cmp	r3, #42	@ 0x2a
 8004824:	d015      	beq.n	8004852 <_svfiprintf_r+0xfa>
 8004826:	4654      	mov	r4, sl
 8004828:	2000      	movs	r0, #0
 800482a:	f04f 0c0a 	mov.w	ip, #10
 800482e:	9a07      	ldr	r2, [sp, #28]
 8004830:	4621      	mov	r1, r4
 8004832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004836:	3b30      	subs	r3, #48	@ 0x30
 8004838:	2b09      	cmp	r3, #9
 800483a:	d94b      	bls.n	80048d4 <_svfiprintf_r+0x17c>
 800483c:	b1b0      	cbz	r0, 800486c <_svfiprintf_r+0x114>
 800483e:	9207      	str	r2, [sp, #28]
 8004840:	e014      	b.n	800486c <_svfiprintf_r+0x114>
 8004842:	eba0 0308 	sub.w	r3, r0, r8
 8004846:	fa09 f303 	lsl.w	r3, r9, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	46a2      	mov	sl, r4
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	e7d2      	b.n	80047f8 <_svfiprintf_r+0xa0>
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	9103      	str	r1, [sp, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfbb      	ittet	lt
 800485e:	425b      	neglt	r3, r3
 8004860:	f042 0202 	orrlt.w	r2, r2, #2
 8004864:	9307      	strge	r3, [sp, #28]
 8004866:	9307      	strlt	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	9204      	strlt	r2, [sp, #16]
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004870:	d10a      	bne.n	8004888 <_svfiprintf_r+0x130>
 8004872:	7863      	ldrb	r3, [r4, #1]
 8004874:	2b2a      	cmp	r3, #42	@ 0x2a
 8004876:	d132      	bne.n	80048de <_svfiprintf_r+0x186>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	3402      	adds	r4, #2
 800487c:	1d1a      	adds	r2, r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	9203      	str	r2, [sp, #12]
 8004882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004940 <_svfiprintf_r+0x1e8>
 800488c:	2203      	movs	r2, #3
 800488e:	4650      	mov	r0, sl
 8004890:	7821      	ldrb	r1, [r4, #0]
 8004892:	f000 fa19 	bl	8004cc8 <memchr>
 8004896:	b138      	cbz	r0, 80048a8 <_svfiprintf_r+0x150>
 8004898:	2240      	movs	r2, #64	@ 0x40
 800489a:	9b04      	ldr	r3, [sp, #16]
 800489c:	eba0 000a 	sub.w	r0, r0, sl
 80048a0:	4082      	lsls	r2, r0
 80048a2:	4313      	orrs	r3, r2
 80048a4:	3401      	adds	r4, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	2206      	movs	r2, #6
 80048ae:	4825      	ldr	r0, [pc, #148]	@ (8004944 <_svfiprintf_r+0x1ec>)
 80048b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048b4:	f000 fa08 	bl	8004cc8 <memchr>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d036      	beq.n	800492a <_svfiprintf_r+0x1d2>
 80048bc:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <_svfiprintf_r+0x1f0>)
 80048be:	bb1b      	cbnz	r3, 8004908 <_svfiprintf_r+0x1b0>
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	3307      	adds	r3, #7
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	3308      	adds	r3, #8
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ce:	4433      	add	r3, r6
 80048d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d2:	e76a      	b.n	80047aa <_svfiprintf_r+0x52>
 80048d4:	460c      	mov	r4, r1
 80048d6:	2001      	movs	r0, #1
 80048d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048dc:	e7a8      	b.n	8004830 <_svfiprintf_r+0xd8>
 80048de:	2300      	movs	r3, #0
 80048e0:	f04f 0c0a 	mov.w	ip, #10
 80048e4:	4619      	mov	r1, r3
 80048e6:	3401      	adds	r4, #1
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	4620      	mov	r0, r4
 80048ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f0:	3a30      	subs	r2, #48	@ 0x30
 80048f2:	2a09      	cmp	r2, #9
 80048f4:	d903      	bls.n	80048fe <_svfiprintf_r+0x1a6>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c6      	beq.n	8004888 <_svfiprintf_r+0x130>
 80048fa:	9105      	str	r1, [sp, #20]
 80048fc:	e7c4      	b.n	8004888 <_svfiprintf_r+0x130>
 80048fe:	4604      	mov	r4, r0
 8004900:	2301      	movs	r3, #1
 8004902:	fb0c 2101 	mla	r1, ip, r1, r2
 8004906:	e7f0      	b.n	80048ea <_svfiprintf_r+0x192>
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462a      	mov	r2, r5
 800490e:	4638      	mov	r0, r7
 8004910:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <_svfiprintf_r+0x1f4>)
 8004912:	a904      	add	r1, sp, #16
 8004914:	f3af 8000 	nop.w
 8004918:	1c42      	adds	r2, r0, #1
 800491a:	4606      	mov	r6, r0
 800491c:	d1d6      	bne.n	80048cc <_svfiprintf_r+0x174>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	065b      	lsls	r3, r3, #25
 8004922:	f53f af2d 	bmi.w	8004780 <_svfiprintf_r+0x28>
 8004926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004928:	e72c      	b.n	8004784 <_svfiprintf_r+0x2c>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4638      	mov	r0, r7
 8004932:	4b06      	ldr	r3, [pc, #24]	@ (800494c <_svfiprintf_r+0x1f4>)
 8004934:	a904      	add	r1, sp, #16
 8004936:	f000 f87d 	bl	8004a34 <_printf_i>
 800493a:	e7ed      	b.n	8004918 <_svfiprintf_r+0x1c0>
 800493c:	08004df2 	.word	0x08004df2
 8004940:	08004df8 	.word	0x08004df8
 8004944:	08004dfc 	.word	0x08004dfc
 8004948:	00000000 	.word	0x00000000
 800494c:	080046a1 	.word	0x080046a1

08004950 <_printf_common>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	4698      	mov	r8, r3
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	4607      	mov	r7, r0
 800495e:	4293      	cmp	r3, r2
 8004960:	bfb8      	it	lt
 8004962:	4613      	movlt	r3, r2
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800496a:	460c      	mov	r4, r1
 800496c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004970:	b10a      	cbz	r2, 8004976 <_printf_common+0x26>
 8004972:	3301      	adds	r3, #1
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	0699      	lsls	r1, r3, #26
 800497a:	bf42      	ittt	mi
 800497c:	6833      	ldrmi	r3, [r6, #0]
 800497e:	3302      	addmi	r3, #2
 8004980:	6033      	strmi	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	f015 0506 	ands.w	r5, r5, #6
 8004988:	d106      	bne.n	8004998 <_printf_common+0x48>
 800498a:	f104 0a19 	add.w	sl, r4, #25
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	6832      	ldr	r2, [r6, #0]
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	42ab      	cmp	r3, r5
 8004996:	dc2b      	bgt.n	80049f0 <_printf_common+0xa0>
 8004998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	3b00      	subs	r3, #0
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d430      	bmi.n	8004a0a <_printf_common+0xba>
 80049a8:	4641      	mov	r1, r8
 80049aa:	4638      	mov	r0, r7
 80049ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049b0:	47c8      	blx	r9
 80049b2:	3001      	adds	r0, #1
 80049b4:	d023      	beq.n	80049fe <_printf_common+0xae>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf14      	ite	ne
 80049c2:	2500      	movne	r5, #0
 80049c4:	6833      	ldreq	r3, [r6, #0]
 80049c6:	f04f 0600 	mov.w	r6, #0
 80049ca:	bf08      	it	eq
 80049cc:	68e5      	ldreq	r5, [r4, #12]
 80049ce:	f104 041a 	add.w	r4, r4, #26
 80049d2:	bf08      	it	eq
 80049d4:	1aed      	subeq	r5, r5, r3
 80049d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80049da:	bf08      	it	eq
 80049dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bfc4      	itt	gt
 80049e4:	1a9b      	subgt	r3, r3, r2
 80049e6:	18ed      	addgt	r5, r5, r3
 80049e8:	42b5      	cmp	r5, r6
 80049ea:	d11a      	bne.n	8004a22 <_printf_common+0xd2>
 80049ec:	2000      	movs	r0, #0
 80049ee:	e008      	b.n	8004a02 <_printf_common+0xb2>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4652      	mov	r2, sl
 80049f4:	4641      	mov	r1, r8
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c8      	blx	r9
 80049fa:	3001      	adds	r0, #1
 80049fc:	d103      	bne.n	8004a06 <_printf_common+0xb6>
 80049fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a06:	3501      	adds	r5, #1
 8004a08:	e7c1      	b.n	800498e <_printf_common+0x3e>
 8004a0a:	2030      	movs	r0, #48	@ 0x30
 8004a0c:	18e1      	adds	r1, r4, r3
 8004a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a18:	4422      	add	r2, r4
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a20:	e7c2      	b.n	80049a8 <_printf_common+0x58>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4622      	mov	r2, r4
 8004a26:	4641      	mov	r1, r8
 8004a28:	4638      	mov	r0, r7
 8004a2a:	47c8      	blx	r9
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d0e6      	beq.n	80049fe <_printf_common+0xae>
 8004a30:	3601      	adds	r6, #1
 8004a32:	e7d9      	b.n	80049e8 <_printf_common+0x98>

08004a34 <_printf_i>:
 8004a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	7e0f      	ldrb	r7, [r1, #24]
 8004a3a:	4691      	mov	r9, r2
 8004a3c:	2f78      	cmp	r7, #120	@ 0x78
 8004a3e:	4680      	mov	r8, r0
 8004a40:	460c      	mov	r4, r1
 8004a42:	469a      	mov	sl, r3
 8004a44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a4a:	d807      	bhi.n	8004a5c <_printf_i+0x28>
 8004a4c:	2f62      	cmp	r7, #98	@ 0x62
 8004a4e:	d80a      	bhi.n	8004a66 <_printf_i+0x32>
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	f000 80d3 	beq.w	8004bfc <_printf_i+0x1c8>
 8004a56:	2f58      	cmp	r7, #88	@ 0x58
 8004a58:	f000 80ba 	beq.w	8004bd0 <_printf_i+0x19c>
 8004a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a64:	e03a      	b.n	8004adc <_printf_i+0xa8>
 8004a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a6a:	2b15      	cmp	r3, #21
 8004a6c:	d8f6      	bhi.n	8004a5c <_printf_i+0x28>
 8004a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a74 <_printf_i+0x40>)
 8004a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004ae1 	.word	0x08004ae1
 8004a7c:	08004a5d 	.word	0x08004a5d
 8004a80:	08004a5d 	.word	0x08004a5d
 8004a84:	08004a5d 	.word	0x08004a5d
 8004a88:	08004a5d 	.word	0x08004a5d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a5d 	.word	0x08004a5d
 8004a94:	08004a5d 	.word	0x08004a5d
 8004a98:	08004a5d 	.word	0x08004a5d
 8004a9c:	08004a5d 	.word	0x08004a5d
 8004aa0:	08004be3 	.word	0x08004be3
 8004aa4:	08004b0b 	.word	0x08004b0b
 8004aa8:	08004b9d 	.word	0x08004b9d
 8004aac:	08004a5d 	.word	0x08004a5d
 8004ab0:	08004a5d 	.word	0x08004a5d
 8004ab4:	08004c05 	.word	0x08004c05
 8004ab8:	08004a5d 	.word	0x08004a5d
 8004abc:	08004b0b 	.word	0x08004b0b
 8004ac0:	08004a5d 	.word	0x08004a5d
 8004ac4:	08004a5d 	.word	0x08004a5d
 8004ac8:	08004ba5 	.word	0x08004ba5
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6032      	str	r2, [r6, #0]
 8004ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09e      	b.n	8004c1e <_printf_i+0x1ea>
 8004ae0:	6833      	ldr	r3, [r6, #0]
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	1d19      	adds	r1, r3, #4
 8004ae6:	6031      	str	r1, [r6, #0]
 8004ae8:	0606      	lsls	r6, r0, #24
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0xbc>
 8004aec:	681d      	ldr	r5, [r3, #0]
 8004aee:	e003      	b.n	8004af8 <_printf_i+0xc4>
 8004af0:	0645      	lsls	r5, r0, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0xb8>
 8004af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	da03      	bge.n	8004b04 <_printf_i+0xd0>
 8004afc:	232d      	movs	r3, #45	@ 0x2d
 8004afe:	426d      	negs	r5, r5
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b04:	230a      	movs	r3, #10
 8004b06:	4859      	ldr	r0, [pc, #356]	@ (8004c6c <_printf_i+0x238>)
 8004b08:	e011      	b.n	8004b2e <_printf_i+0xfa>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	0608      	lsls	r0, r1, #24
 8004b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0xe8>
 8004b16:	0649      	lsls	r1, r1, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	bf14      	ite	ne
 8004b22:	230a      	movne	r3, #10
 8004b24:	2308      	moveq	r3, #8
 8004b26:	4851      	ldr	r0, [pc, #324]	@ (8004c6c <_printf_i+0x238>)
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b2e:	6866      	ldr	r6, [r4, #4]
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	bfa8      	it	ge
 8004b34:	6821      	ldrge	r1, [r4, #0]
 8004b36:	60a6      	str	r6, [r4, #8]
 8004b38:	bfa4      	itt	ge
 8004b3a:	f021 0104 	bicge.w	r1, r1, #4
 8004b3e:	6021      	strge	r1, [r4, #0]
 8004b40:	b90d      	cbnz	r5, 8004b46 <_printf_i+0x112>
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	d04b      	beq.n	8004bde <_printf_i+0x1aa>
 8004b46:	4616      	mov	r6, r2
 8004b48:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b4c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b50:	5dc7      	ldrb	r7, [r0, r7]
 8004b52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b56:	462f      	mov	r7, r5
 8004b58:	42bb      	cmp	r3, r7
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	d9f4      	bls.n	8004b48 <_printf_i+0x114>
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d10b      	bne.n	8004b7a <_printf_i+0x146>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	07df      	lsls	r7, r3, #31
 8004b66:	d508      	bpl.n	8004b7a <_printf_i+0x146>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	6861      	ldr	r1, [r4, #4]
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	bfde      	ittt	le
 8004b70:	2330      	movle	r3, #48	@ 0x30
 8004b72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b7a:	1b92      	subs	r2, r2, r6
 8004b7c:	6122      	str	r2, [r4, #16]
 8004b7e:	464b      	mov	r3, r9
 8004b80:	4621      	mov	r1, r4
 8004b82:	4640      	mov	r0, r8
 8004b84:	f8cd a000 	str.w	sl, [sp]
 8004b88:	aa03      	add	r2, sp, #12
 8004b8a:	f7ff fee1 	bl	8004950 <_printf_common>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d14a      	bne.n	8004c28 <_printf_i+0x1f4>
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	b004      	add	sp, #16
 8004b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	2778      	movs	r7, #120	@ 0x78
 8004ba6:	4832      	ldr	r0, [pc, #200]	@ (8004c70 <_printf_i+0x23c>)
 8004ba8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	6831      	ldr	r1, [r6, #0]
 8004bb0:	061f      	lsls	r7, r3, #24
 8004bb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bb6:	d402      	bmi.n	8004bbe <_printf_i+0x18a>
 8004bb8:	065f      	lsls	r7, r3, #25
 8004bba:	bf48      	it	mi
 8004bbc:	b2ad      	uxthmi	r5, r5
 8004bbe:	6031      	str	r1, [r6, #0]
 8004bc0:	07d9      	lsls	r1, r3, #31
 8004bc2:	bf44      	itt	mi
 8004bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc8:	6023      	strmi	r3, [r4, #0]
 8004bca:	b11d      	cbz	r5, 8004bd4 <_printf_i+0x1a0>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	e7ab      	b.n	8004b28 <_printf_i+0xf4>
 8004bd0:	4826      	ldr	r0, [pc, #152]	@ (8004c6c <_printf_i+0x238>)
 8004bd2:	e7e9      	b.n	8004ba8 <_printf_i+0x174>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	f023 0320 	bic.w	r3, r3, #32
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	e7f6      	b.n	8004bcc <_printf_i+0x198>
 8004bde:	4616      	mov	r6, r2
 8004be0:	e7bd      	b.n	8004b5e <_printf_i+0x12a>
 8004be2:	6833      	ldr	r3, [r6, #0]
 8004be4:	6825      	ldr	r5, [r4, #0]
 8004be6:	1d18      	adds	r0, r3, #4
 8004be8:	6961      	ldr	r1, [r4, #20]
 8004bea:	6030      	str	r0, [r6, #0]
 8004bec:	062e      	lsls	r6, r5, #24
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	d501      	bpl.n	8004bf6 <_printf_i+0x1c2>
 8004bf2:	6019      	str	r1, [r3, #0]
 8004bf4:	e002      	b.n	8004bfc <_printf_i+0x1c8>
 8004bf6:	0668      	lsls	r0, r5, #25
 8004bf8:	d5fb      	bpl.n	8004bf2 <_printf_i+0x1be>
 8004bfa:	8019      	strh	r1, [r3, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4616      	mov	r6, r2
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	e7bc      	b.n	8004b7e <_printf_i+0x14a>
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	2100      	movs	r1, #0
 8004c08:	1d1a      	adds	r2, r3, #4
 8004c0a:	6032      	str	r2, [r6, #0]
 8004c0c:	681e      	ldr	r6, [r3, #0]
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f859 	bl	8004cc8 <memchr>
 8004c16:	b108      	cbz	r0, 8004c1c <_printf_i+0x1e8>
 8004c18:	1b80      	subs	r0, r0, r6
 8004c1a:	6060      	str	r0, [r4, #4]
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	2300      	movs	r3, #0
 8004c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c26:	e7aa      	b.n	8004b7e <_printf_i+0x14a>
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	47d0      	blx	sl
 8004c32:	3001      	adds	r0, #1
 8004c34:	d0ad      	beq.n	8004b92 <_printf_i+0x15e>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	079b      	lsls	r3, r3, #30
 8004c3a:	d413      	bmi.n	8004c64 <_printf_i+0x230>
 8004c3c:	68e0      	ldr	r0, [r4, #12]
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	4298      	cmp	r0, r3
 8004c42:	bfb8      	it	lt
 8004c44:	4618      	movlt	r0, r3
 8004c46:	e7a6      	b.n	8004b96 <_printf_i+0x162>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	4640      	mov	r0, r8
 8004c50:	47d0      	blx	sl
 8004c52:	3001      	adds	r0, #1
 8004c54:	d09d      	beq.n	8004b92 <_printf_i+0x15e>
 8004c56:	3501      	adds	r5, #1
 8004c58:	68e3      	ldr	r3, [r4, #12]
 8004c5a:	9903      	ldr	r1, [sp, #12]
 8004c5c:	1a5b      	subs	r3, r3, r1
 8004c5e:	42ab      	cmp	r3, r5
 8004c60:	dcf2      	bgt.n	8004c48 <_printf_i+0x214>
 8004c62:	e7eb      	b.n	8004c3c <_printf_i+0x208>
 8004c64:	2500      	movs	r5, #0
 8004c66:	f104 0619 	add.w	r6, r4, #25
 8004c6a:	e7f5      	b.n	8004c58 <_printf_i+0x224>
 8004c6c:	08004e03 	.word	0x08004e03
 8004c70:	08004e14 	.word	0x08004e14

08004c74 <memmove>:
 8004c74:	4288      	cmp	r0, r1
 8004c76:	b510      	push	{r4, lr}
 8004c78:	eb01 0402 	add.w	r4, r1, r2
 8004c7c:	d902      	bls.n	8004c84 <memmove+0x10>
 8004c7e:	4284      	cmp	r4, r0
 8004c80:	4623      	mov	r3, r4
 8004c82:	d807      	bhi.n	8004c94 <memmove+0x20>
 8004c84:	1e43      	subs	r3, r0, #1
 8004c86:	42a1      	cmp	r1, r4
 8004c88:	d008      	beq.n	8004c9c <memmove+0x28>
 8004c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c92:	e7f8      	b.n	8004c86 <memmove+0x12>
 8004c94:	4601      	mov	r1, r0
 8004c96:	4402      	add	r2, r0
 8004c98:	428a      	cmp	r2, r1
 8004c9a:	d100      	bne.n	8004c9e <memmove+0x2a>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ca6:	e7f7      	b.n	8004c98 <memmove+0x24>

08004ca8 <_sbrk_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	2300      	movs	r3, #0
 8004cac:	4d05      	ldr	r5, [pc, #20]	@ (8004cc4 <_sbrk_r+0x1c>)
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc fbd8 	bl	8001468 <_sbrk>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_sbrk_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_sbrk_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	200002fc 	.word	0x200002fc

08004cc8 <memchr>:
 8004cc8:	4603      	mov	r3, r0
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	b2c9      	uxtb	r1, r1
 8004cce:	4402      	add	r2, r0
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	d101      	bne.n	8004cda <memchr+0x12>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e003      	b.n	8004ce2 <memchr+0x1a>
 8004cda:	7804      	ldrb	r4, [r0, #0]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	428c      	cmp	r4, r1
 8004ce0:	d1f6      	bne.n	8004cd0 <memchr+0x8>
 8004ce2:	bd10      	pop	{r4, pc}

08004ce4 <memcpy>:
 8004ce4:	440a      	add	r2, r1
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cec:	d100      	bne.n	8004cf0 <memcpy+0xc>
 8004cee:	4770      	bx	lr
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfc:	d1f9      	bne.n	8004cf2 <memcpy+0xe>
 8004cfe:	bd10      	pop	{r4, pc}

08004d00 <_realloc_r>:
 8004d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d04:	4680      	mov	r8, r0
 8004d06:	4615      	mov	r5, r2
 8004d08:	460c      	mov	r4, r1
 8004d0a:	b921      	cbnz	r1, 8004d16 <_realloc_r+0x16>
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d12:	f7ff bc39 	b.w	8004588 <_malloc_r>
 8004d16:	b92a      	cbnz	r2, 8004d24 <_realloc_r+0x24>
 8004d18:	f7ff fbcc 	bl	80044b4 <_free_r>
 8004d1c:	2400      	movs	r4, #0
 8004d1e:	4620      	mov	r0, r4
 8004d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d24:	f000 f81a 	bl	8004d5c <_malloc_usable_size_r>
 8004d28:	4285      	cmp	r5, r0
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	d802      	bhi.n	8004d34 <_realloc_r+0x34>
 8004d2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d32:	d8f4      	bhi.n	8004d1e <_realloc_r+0x1e>
 8004d34:	4629      	mov	r1, r5
 8004d36:	4640      	mov	r0, r8
 8004d38:	f7ff fc26 	bl	8004588 <_malloc_r>
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d0ec      	beq.n	8004d1c <_realloc_r+0x1c>
 8004d42:	42b5      	cmp	r5, r6
 8004d44:	462a      	mov	r2, r5
 8004d46:	4621      	mov	r1, r4
 8004d48:	bf28      	it	cs
 8004d4a:	4632      	movcs	r2, r6
 8004d4c:	f7ff ffca 	bl	8004ce4 <memcpy>
 8004d50:	4621      	mov	r1, r4
 8004d52:	4640      	mov	r0, r8
 8004d54:	f7ff fbae 	bl	80044b4 <_free_r>
 8004d58:	463c      	mov	r4, r7
 8004d5a:	e7e0      	b.n	8004d1e <_realloc_r+0x1e>

08004d5c <_malloc_usable_size_r>:
 8004d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d60:	1f18      	subs	r0, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bfbc      	itt	lt
 8004d66:	580b      	ldrlt	r3, [r1, r0]
 8004d68:	18c0      	addlt	r0, r0, r3
 8004d6a:	4770      	bx	lr

08004d6c <_init>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr

08004d78 <_fini>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr
