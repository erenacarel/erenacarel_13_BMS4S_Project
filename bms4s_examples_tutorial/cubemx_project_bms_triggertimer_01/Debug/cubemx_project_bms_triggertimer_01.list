
cubemx_project_bms_triggertimer_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b98  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ca8  08002ca8  00003ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ccc  08002ccc  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ccc  08002ccc  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ccc  08002ccc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ccc  08002ccc  00003ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cd0  08002cd0  00003cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002cd4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08002ce4  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002ce4  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000810f  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165a  00000000  00000000  0000c148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0000d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074a  00000000  00000000  0000e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165e6  00000000  00000000  0000e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bb0  00000000  00000000  00024e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084190  00000000  00000000  0002e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d0  00000000  00000000  000b2bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000b539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002c90 	.word	0x08002c90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002c90 	.word	0x08002c90

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4906      	ldr	r1, [pc, #24]	@ (8000790 <__NVIC_EnableIRQ+0x34>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fc00 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f80e 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f000 f96e 	bl	8000a80 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007a4:	f000 f850 	bl	8000848 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007a8:	f000 f906 	bl	80009b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  UsrTim2Init();
 80007ac:	f000 fa4e 	bl	8000c4c <UsrTim2Init>
  UsrInitPwm();
 80007b0:	f000 f9c2 	bl	8000b38 <UsrInitPwm>
  UsrInitGpio();
 80007b4:	f000 f992 	bl	8000adc <UsrInitGpio>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <main+0x24>

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b090      	sub	sp, #64	@ 0x40
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2228      	movs	r2, #40	@ 0x28
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fa33 	bl	8002c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	4618      	mov	r0, r3
 8000806:	f000 febd 	bl	8001584 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000810:	f000 fa44 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f92a 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800083a:	f000 fa2f 	bl	8000c9c <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3740      	adds	r7, #64	@ 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b096      	sub	sp, #88	@ 0x58
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2220      	movs	r2, #32
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f002 f9d8 	bl	8002c36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000886:	4b4a      	ldr	r3, [pc, #296]	@ (80009b0 <MX_TIM1_Init+0x168>)
 8000888:	4a4a      	ldr	r2, [pc, #296]	@ (80009b4 <MX_TIM1_Init+0x16c>)
 800088a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800088c:	4b48      	ldr	r3, [pc, #288]	@ (80009b0 <MX_TIM1_Init+0x168>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b47      	ldr	r3, [pc, #284]	@ (80009b0 <MX_TIM1_Init+0x168>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000898:	4b45      	ldr	r3, [pc, #276]	@ (80009b0 <MX_TIM1_Init+0x168>)
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b43      	ldr	r3, [pc, #268]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a6:	4b42      	ldr	r3, [pc, #264]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b40      	ldr	r3, [pc, #256]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008b2:	483f      	ldr	r0, [pc, #252]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008b4:	f001 fa44 	bl	8001d40 <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008be:	f000 f9ed 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008cc:	4619      	mov	r1, r3
 80008ce:	4838      	ldr	r0, [pc, #224]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008d0:	f001 fca8 	bl	8002224 <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008da:	f000 f9df 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008de:	4834      	ldr	r0, [pc, #208]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008e0:	f001 fa7d 	bl	8001dde <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008ea:	f000 f9d7 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ee:	2320      	movs	r3, #32
 80008f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80008f2:	2380      	movs	r3, #128	@ 0x80
 80008f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008fa:	4619      	mov	r1, r3
 80008fc:	482c      	ldr	r0, [pc, #176]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80008fe:	f002 f8d9 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000908:	f000 f9c8 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	@ 0x60
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	481f      	ldr	r0, [pc, #124]	@ (80009b0 <MX_TIM1_Init+0x168>)
 8000932:	f001 fbb5 	bl	80020a0 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800093c:	f000 f9ae 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000944:	2204      	movs	r2, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <MX_TIM1_Init+0x168>)
 800094a:	f001 fba9 	bl	80020a0 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000954:	f000 f9a2 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095c:	2208      	movs	r2, #8
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	@ (80009b0 <MX_TIM1_Init+0x168>)
 8000962:	f001 fb9d 	bl	80020a0 <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800096c:	f000 f996 	bl	8000c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000988:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <MX_TIM1_Init+0x168>)
 8000994:	f002 f8ec 	bl	8002b70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800099e:	f000 f97d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <MX_TIM1_Init+0x168>)
 80009a4:	f000 fa02 	bl	8000dac <HAL_TIM_MspPostInit>

}
 80009a8:	bf00      	nop
 80009aa:	3758      	adds	r7, #88	@ 0x58
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000002c 	.word	0x2000002c
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ec:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009f8:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 80009fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	481b      	ldr	r0, [pc, #108]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 8000a0e:	f001 f997 	bl	8001d40 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000a18:	f000 f940 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a20:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	4619      	mov	r1, r3
 8000a28:	4814      	ldr	r0, [pc, #80]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 8000a2a:	f001 fbfb 	bl	8002224 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a34:	f000 f932 	bl	8000c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 8000a48:	f001 fcb3 	bl	80023b2 <HAL_TIM_SlaveConfigSynchro>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a52:	f000 f923 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_TIM2_Init+0xc4>)
 8000a64:	f002 f826 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a6e:	f000 f915 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	@ 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000074 	.word	0x20000074

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000a8c:	f043 0320 	orr.w	r3, r3, #32
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0320 	and.w	r3, r3, #32
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <MX_GPIO_Init+0x58>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <UsrInitGpio>:

/* USER CODE BEGIN 4 */
void UsrInitGpio(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	GPIOA->CRL &= (uint32_t)0x00000000;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <UsrInitGpio+0x54>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <UsrInitGpio+0x54>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
	GPIOB->CRL &= (uint32_t)0x00000000;
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <UsrInitGpio+0x58>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <UsrInitGpio+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	GPIOA->CRH &= (uint32_t)0x00000000;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <UsrInitGpio+0x54>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <UsrInitGpio+0x54>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
	GPIOA->CRH |= (uint32_t)0x00000BBB;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <UsrInitGpio+0x54>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <UsrInitGpio+0x54>)
 8000b04:	f443 633b 	orr.w	r3, r3, #2992	@ 0xbb0
 8000b08:	f043 030b 	orr.w	r3, r3, #11
 8000b0c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH &= (uint32_t)0x00000000;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <UsrInitGpio+0x58>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <UsrInitGpio+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
	GPIOB->CRH |= (uint32_t)0xBBB00000;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <UsrInitGpio+0x58>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <UsrInitGpio+0x58>)
 8000b1e:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 8000b22:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 8000b26:	6053      	str	r3, [r2, #4]

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40010800 	.word	0x40010800
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <UsrInitPwm>:

void UsrInitPwm(void)
{
 8000b38:	b598      	push	{r3, r4, r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    // Zamanlayıcı ayarları
	TIM1->PSC = prescaler - 1;
 8000b3c:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <UsrInitPwm+0x108>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	1e5a      	subs	r2, r3, #1
 8000b42:	4b40      	ldr	r3, [pc, #256]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = autoReload - 1;  // Auto-reload register
 8000b46:	4b40      	ldr	r3, [pc, #256]	@ (8000c48 <UsrInitPwm+0x110>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1 (upcounting, TIMx_CCRx < TIMx_CNT) oc1 and oc2
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8000b50:	4b3c      	ldr	r3, [pc, #240]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a3b      	ldr	r2, [pc, #236]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b5e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (uint32_t)0x6C6C;  // pwm mode 1 and output compare enable
 8000b60:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a37      	ldr	r2, [pc, #220]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b66:	f443 43d8 	orr.w	r3, r3, #27648	@ 0x6c00
 8000b6a:	f043 036c 	orr.w	r3, r3, #108	@ 0x6c
 8000b6e:	6193      	str	r3, [r2, #24]

	TIM1->CCMR2 &= ~(TIM_CCMR2_OC3M);
 8000b70:	4b34      	ldr	r3, [pc, #208]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	4a33      	ldr	r2, [pc, #204]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b7a:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= (uint32_t)0x006C;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	4a30      	ldr	r2, [pc, #192]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000b82:	f043 036c 	orr.w	r3, r3, #108	@ 0x6c
 8000b86:	61d3      	str	r3, [r2, #28]

    // Capture/compare register
	TIM1->CCR1 = (autoReload) * (0.7);  // Duty cycle %50
 8000b88:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <UsrInitPwm+0x110>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fd5b 	bl	8000648 <__aeabi_i2d>
 8000b92:	a325      	add	r3, pc, #148	@ (adr r3, 8000c28 <UsrInitPwm+0xf0>)
 8000b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b98:	f7ff fada 	bl	8000150 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4c28      	ldr	r4, [pc, #160]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f7ff fdb9 	bl	800071c <__aeabi_d2uiz>
 8000baa:	4603      	mov	r3, r0
 8000bac:	6363      	str	r3, [r4, #52]	@ 0x34
	TIM1->CCR2 = (autoReload) * (0.8);
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <UsrInitPwm+0x110>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd48 	bl	8000648 <__aeabi_i2d>
 8000bb8:	a31d      	add	r3, pc, #116	@ (adr r3, 8000c30 <UsrInitPwm+0xf8>)
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	f7ff fac7 	bl	8000150 <__aeabi_dmul>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4c1f      	ldr	r4, [pc, #124]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fda6 	bl	800071c <__aeabi_d2uiz>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	63a3      	str	r3, [r4, #56]	@ 0x38
	TIM1->CCR3 = (autoReload) * (0.9);
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <UsrInitPwm+0x110>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fd35 	bl	8000648 <__aeabi_i2d>
 8000bde:	a316      	add	r3, pc, #88	@ (adr r3, 8000c38 <UsrInitPwm+0x100>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fab4 	bl	8000150 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4c15      	ldr	r4, [pc, #84]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f7ff fd93 	bl	800071c <__aeabi_d2uiz>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	63e3      	str	r3, [r4, #60]	@ 0x3c

	TIM1->CCER |= (uint32_t)0x0555; // TIM1_CH1 TIM1_CH2 TIM1_CH3 output enable and TIM1_CH1N TIM1_CH2N TIM1_CH3N complementary output enable
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000bfc:	6a1b      	ldr	r3, [r3, #32]
 8000bfe:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000c00:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8000c04:	f043 0305 	orr.w	r3, r3, #5
 8000c08:	6213      	str	r3, [r2, #32]

    // Break and dead-time register (BDTR)
	TIM1->BDTR |= (uint32_t)0x8800;  // MOE enable and OSSI disable
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000c10:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44

    // Counter enable
	TIM1->CR1 |= (uint32_t)0x01;  // Counter enable
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <UsrInitPwm+0x10c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6013      	str	r3, [r2, #0]
}
 8000c22:	bf00      	nop
 8000c24:	bd98      	pop	{r3, r4, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	66666666 	.word	0x66666666
 8000c2c:	3fe66666 	.word	0x3fe66666
 8000c30:	9999999a 	.word	0x9999999a
 8000c34:	3fe99999 	.word	0x3fe99999
 8000c38:	cccccccd 	.word	0xcccccccd
 8000c3c:	3feccccc 	.word	0x3feccccc
 8000c40:	20000002 	.word	0x20000002
 8000c44:	40012c00 	.word	0x40012c00
 8000c48:	20000000 	.word	0x20000000

08000c4c <UsrTim2Init>:

void UsrTim2Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	TIM2->PSC = 719 - 1;
 8000c50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8000c58:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 100 - 1;
 8000c5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c5e:	2263      	movs	r2, #99	@ 0x63
 8000c60:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->SMCR |= (uint32_t)0x56; // bit[6:4] 101: Filtered Timer Input 1 (TI1FP1)  and  bit[2:0] 10: Trigger mode
 8000c62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6c:	f043 0356 	orr.w	r3, r3, #86	@ 0x56
 8000c70:	6093      	str	r3, [r2, #8]

	TIM2->DIER |= (uint32_t)0x01;  // update interrupt enable
 8000c72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 8000c82:	201c      	movs	r0, #28
 8000c84:	f7ff fd6a 	bl	800075c <__NVIC_EnableIRQ>
	TIM2->CR1 |= (uint32_t)0x01;  // counter enable
 8000c88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_MspInit+0x6c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_MspInit+0x6c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_MspInit+0x6c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_MspInit+0x6c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <HAL_MspInit+0x6c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_MspInit+0x6c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f000 fa93 	bl	800120e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ce8:	2005      	movs	r0, #5
 8000cea:	f000 faac 	bl	8001246 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_MspInit+0x70>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_MspInit+0x70>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <HAL_TIM_Base_MspInit+0x88>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d11c      	bne.n	8000d68 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a1d      	ldr	r2, [pc, #116]	@ (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201a      	movs	r0, #26
 8000d4c:	f000 fa5f 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000d50:	201a      	movs	r0, #26
 8000d52:	f000 fa78 	bl	8001246 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	201b      	movs	r0, #27
 8000d5c:	f000 fa57 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d60:	201b      	movs	r0, #27
 8000d62:	f000 fa70 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d66:	e018      	b.n	8000d9a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d70:	d113      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a0c      	ldr	r2, [pc, #48]	@ (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f000 fa3d 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d94:	201c      	movs	r0, #28
 8000d96:	f000 fa56 	bl	8001246 <HAL_NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40012c00 	.word	0x40012c00
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <HAL_TIM_MspPostInit+0x8c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d131      	bne.n	8000e30 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <HAL_TIM_MspPostInit+0x90>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <HAL_TIM_MspPostInit+0x90>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_TIM_MspPostInit+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <HAL_TIM_MspPostInit+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <HAL_TIM_MspPostInit+0x90>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_TIM_MspPostInit+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dfc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480b      	ldr	r0, [pc, #44]	@ (8000e40 <HAL_TIM_MspPostInit+0x94>)
 8000e12:	f000 fa33 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e16:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <HAL_TIM_MspPostInit+0x98>)
 8000e2c:	f000 fa26 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40010800 	.word	0x40010800

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <NMI_Handler+0x4>

08000e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <MemManage_Handler+0x4>

08000e60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8c6 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <TIM1_TRG_COM_IRQHandler+0x10>)
 8000eb2:	f000 ffec 	bl	8001e8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000002c 	.word	0x2000002c

08000ec0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <TIM1_CC_IRQHandler+0x10>)
 8000ec6:	f000 ffe2 	bl	8001e8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000002c 	.word	0x2000002c

08000ed4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed4:	b598      	push	{r3, r4, r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (TIM2->SR & (uint32_t)0x01)
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d01f      	beq.n	8000f26 <TIM2_IRQHandler+0x52>
	{
		TIM2->SR &= ~(uint32_t)0x01; // clear update interrupt enable
 8000ee6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6113      	str	r3, [r2, #16]

		TIM1->CCR1 = (autoReload) * (0.5);  // Duty cycle %50
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <TIM2_IRQHandler+0x5c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fba4 	bl	8000648 <__aeabi_i2d>
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <TIM2_IRQHandler+0x60>)
 8000f06:	f7ff f923 	bl	8000150 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <TIM2_IRQHandler+0x64>)
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fc02 	bl	800071c <__aeabi_d2uiz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6363      	str	r3, [r4, #52]	@ 0x34

		count++;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <TIM2_IRQHandler+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <TIM2_IRQHandler+0x68>)
 8000f24:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <TIM2_IRQHandler+0x6c>)
 8000f28:	f000 ffb1 	bl	8001e8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd98      	pop	{r3, r4, r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	3fe00000 	.word	0x3fe00000
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	200000bc 	.word	0x200000bc
 8000f40:	20000074 	.word	0x20000074

08000f44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff fff8 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f56:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f58:	4a0c      	ldr	r2, [pc, #48]	@ (8000f8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f6c:	4c09      	ldr	r4, [pc, #36]	@ (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f001 fe65 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7e:	f7ff fc09 	bl	8000794 <main>
  bx lr
 8000f82:	4770      	bx	lr
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f8c:	08002cd4 	.word	0x08002cd4
  ldr r2, =_sbss
 8000f90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f94:	200000c4 	.word	0x200000c4

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_Init+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_Init+0x28>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f923 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fe76 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f93b 	bl	8001262 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f903 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000004 	.word	0x20000004
 8001020:	2000000c 	.word	0x2000000c
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_IncTick+0x1c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_IncTick+0x20>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <HAL_IncTick+0x20>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	2000000c 	.word	0x2000000c
 8001048:	200000c0 	.word	0x200000c0

0800104c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	@ (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	200000c0 	.word	0x200000c0

08001060 <__NVIC_SetPriorityGrouping>:
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4906      	ldr	r1, [pc, #24]	@ (80010f8 <__NVIC_EnableIRQ+0x34>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff90 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff2d 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff42 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff90 	bl	8001150 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5f 	bl	80010fc <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff35 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b08b      	sub	sp, #44	@ 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e169      	b.n	8001564 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001290:	2201      	movs	r2, #1
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8158 	bne.w	800155e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a9a      	ldr	r2, [pc, #616]	@ (800151c <HAL_GPIO_Init+0x2a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d05e      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012b8:	4a98      	ldr	r2, [pc, #608]	@ (800151c <HAL_GPIO_Init+0x2a0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d875      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012be:	4a98      	ldr	r2, [pc, #608]	@ (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d058      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012c4:	4a96      	ldr	r2, [pc, #600]	@ (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d86f      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ca:	4a96      	ldr	r2, [pc, #600]	@ (8001524 <HAL_GPIO_Init+0x2a8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d052      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012d0:	4a94      	ldr	r2, [pc, #592]	@ (8001524 <HAL_GPIO_Init+0x2a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d869      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012d6:	4a94      	ldr	r2, [pc, #592]	@ (8001528 <HAL_GPIO_Init+0x2ac>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d04c      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012dc:	4a92      	ldr	r2, [pc, #584]	@ (8001528 <HAL_GPIO_Init+0x2ac>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d863      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012e2:	4a92      	ldr	r2, [pc, #584]	@ (800152c <HAL_GPIO_Init+0x2b0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d046      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012e8:	4a90      	ldr	r2, [pc, #576]	@ (800152c <HAL_GPIO_Init+0x2b0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d85d      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d82a      	bhi.n	8001348 <HAL_GPIO_Init+0xcc>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d859      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012f6:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <HAL_GPIO_Init+0x80>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001377 	.word	0x08001377
 8001300:	08001351 	.word	0x08001351
 8001304:	08001363 	.word	0x08001363
 8001308:	080013a5 	.word	0x080013a5
 800130c:	080013ab 	.word	0x080013ab
 8001310:	080013ab 	.word	0x080013ab
 8001314:	080013ab 	.word	0x080013ab
 8001318:	080013ab 	.word	0x080013ab
 800131c:	080013ab 	.word	0x080013ab
 8001320:	080013ab 	.word	0x080013ab
 8001324:	080013ab 	.word	0x080013ab
 8001328:	080013ab 	.word	0x080013ab
 800132c:	080013ab 	.word	0x080013ab
 8001330:	080013ab 	.word	0x080013ab
 8001334:	080013ab 	.word	0x080013ab
 8001338:	080013ab 	.word	0x080013ab
 800133c:	080013ab 	.word	0x080013ab
 8001340:	08001359 	.word	0x08001359
 8001344:	0800136d 	.word	0x0800136d
 8001348:	4a79      	ldr	r2, [pc, #484]	@ (8001530 <HAL_GPIO_Init+0x2b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134e:	e02c      	b.n	80013aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e029      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e024      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3308      	adds	r3, #8
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e01f      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e01a      	b.n	80013ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137e:	2304      	movs	r3, #4
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e013      	b.n	80013ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	611a      	str	r2, [r3, #16]
          break;
 8001396:	e009      	b.n	80013ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	615a      	str	r2, [r3, #20]
          break;
 80013a2:	e003      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x130>
          break;
 80013aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	@ 0xff
 80013b0:	d801      	bhi.n	80013b6 <HAL_GPIO_Init+0x13a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_Init+0x13e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	@ 0xff
 80013c0:	d802      	bhi.n	80013c8 <HAL_GPIO_Init+0x14c>
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x152>
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	3b08      	subs	r3, #8
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	210f      	movs	r1, #15
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80b1 	beq.w	800155e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a4c      	ldr	r2, [pc, #304]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001414:	4a48      	ldr	r2, [pc, #288]	@ (8001538 <HAL_GPIO_Init+0x2bc>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a40      	ldr	r2, [pc, #256]	@ (800153c <HAL_GPIO_Init+0x2c0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1ec>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3f      	ldr	r2, [pc, #252]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1e8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3e      	ldr	r2, [pc, #248]	@ (8001544 <HAL_GPIO_Init+0x2c8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3d      	ldr	r2, [pc, #244]	@ (8001548 <HAL_GPIO_Init+0x2cc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1e0>
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 800145c:	2304      	movs	r3, #4
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001468:	2300      	movs	r3, #0
 800146a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147a:	492f      	ldr	r1, [pc, #188]	@ (8001538 <HAL_GPIO_Init+0x2bc>)
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001494:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	492c      	ldr	r1, [pc, #176]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4928      	ldr	r1, [pc, #160]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b23      	ldr	r3, [pc, #140]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4922      	ldr	r1, [pc, #136]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	491e      	ldr	r1, [pc, #120]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4918      	ldr	r1, [pc, #96]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f2:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4914      	ldr	r1, [pc, #80]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d021      	beq.n	8001550 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	490e      	ldr	r1, [pc, #56]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e021      	b.n	800155e <HAL_GPIO_Init+0x2e2>
 800151a:	bf00      	nop
 800151c:	10320000 	.word	0x10320000
 8001520:	10310000 	.word	0x10310000
 8001524:	10220000 	.word	0x10220000
 8001528:	10210000 	.word	0x10210000
 800152c:	10120000 	.word	0x10120000
 8001530:	10110000 	.word	0x10110000
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40011000 	.word	0x40011000
 8001548:	40011400 	.word	0x40011400
 800154c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_GPIO_Init+0x304>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	43db      	mvns	r3, r3
 8001558:	4909      	ldr	r1, [pc, #36]	@ (8001580 <HAL_GPIO_Init+0x304>)
 800155a:	4013      	ands	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	3301      	adds	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f ae8e 	bne.w	8001290 <HAL_GPIO_Init+0x14>
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	372c      	adds	r7, #44	@ 0x2c
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e272      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8087 	beq.w	80016b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a4:	4b92      	ldr	r3, [pc, #584]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d00c      	beq.n	80015ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b0:	4b8f      	ldr	r3, [pc, #572]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d112      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5e>
 80015bc:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c8:	d10b      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ca:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x12c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d168      	bne.n	80016b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e24c      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x76>
 80015ec:	4b80      	ldr	r3, [pc, #512]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a7f      	ldr	r2, [pc, #508]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e02e      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b7b      	ldr	r3, [pc, #492]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a7a      	ldr	r2, [pc, #488]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a77      	ldr	r2, [pc, #476]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0xbc>
 8001626:	4b72      	ldr	r3, [pc, #456]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a71      	ldr	r2, [pc, #452]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a6a      	ldr	r2, [pc, #424]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a67      	ldr	r2, [pc, #412]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fcf4 	bl	800104c <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fcf0 	bl	800104c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	@ 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e200      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b5d      	ldr	r3, [pc, #372]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xe4>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fce0 	bl	800104c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fcdc 	bl	800104c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1ec      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x10c>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016be:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ca:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x18c>
 80016d6:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x176>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1c0      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4939      	ldr	r1, [pc, #228]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <HAL_RCC_OscConfig+0x270>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fc95 	bl	800104c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fc91 	bl	800104c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1a1      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4927      	ldr	r1, [pc, #156]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <HAL_RCC_OscConfig+0x270>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fc74 	bl	800104c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fc70 	bl	800104c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e180      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d03a      	beq.n	8001808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d019      	beq.n	80017ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <HAL_RCC_OscConfig+0x274>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fc54 	bl	800104c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc50 	bl	800104c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e160      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 fa9c 	bl	8001d04 <RCC_Delay>
 80017cc:	e01c      	b.n	8001808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_RCC_OscConfig+0x274>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fc3a 	bl	800104c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017da:	e00f      	b.n	80017fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fc36 	bl	800104c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d908      	bls.n	80017fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e146      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	42420000 	.word	0x42420000
 80017f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b92      	ldr	r3, [pc, #584]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e9      	bne.n	80017dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a6 	beq.w	8001962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10d      	bne.n	8001842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b88      	ldr	r3, [pc, #544]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a87      	ldr	r2, [pc, #540]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b85      	ldr	r3, [pc, #532]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b82      	ldr	r3, [pc, #520]	@ (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a7e      	ldr	r2, [pc, #504]	@ (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fbf7 	bl	800104c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fbf3 	bl	800104c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	@ 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e103      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b75      	ldr	r3, [pc, #468]	@ (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x312>
 8001888:	4b6f      	ldr	r3, [pc, #444]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e02d      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x334>
 800189e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a69      	ldr	r2, [pc, #420]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a66      	ldr	r2, [pc, #408]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	e01c      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x356>
 80018c0:	4b61      	ldr	r3, [pc, #388]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a60      	ldr	r2, [pc, #384]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 80018da:	4b5b      	ldr	r3, [pc, #364]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a5a      	ldr	r2, [pc, #360]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a57      	ldr	r2, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d015      	beq.n	8001926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fba7 	bl	800104c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fba3 	bl	800104c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0b1      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ee      	beq.n	8001902 <HAL_RCC_OscConfig+0x37e>
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff fb91 	bl	800104c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fb8d 	bl	800104c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e09b      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ee      	bne.n	800192e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001956:	4b3c      	ldr	r3, [pc, #240]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8087 	beq.w	8001a7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196c:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d061      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d146      	bne.n	8001a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fb61 	bl	800104c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fb5d 	bl	800104c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e06d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b6:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4921      	ldr	r1, [pc, #132]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a19      	ldr	r1, [r3, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	430b      	orrs	r3, r1
 80019da:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fb31 	bl	800104c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fb2d 	bl	800104c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e03d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x46a>
 8001a0c:	e035      	b.n	8001a7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb1a 	bl	800104c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fb16 	bl	800104c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e026      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x498>
 8001a3a:	e01e      	b.n	8001a7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e019      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCC_OscConfig+0x500>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0d0      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d910      	bls.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b67      	ldr	r3, [pc, #412]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4965      	ldr	r1, [pc, #404]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b63      	ldr	r3, [pc, #396]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b59      	ldr	r3, [pc, #356]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afc:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a52      	ldr	r2, [pc, #328]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b50      	ldr	r3, [pc, #320]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	494d      	ldr	r1, [pc, #308]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d040      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e07f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e073      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06b      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4936      	ldr	r1, [pc, #216]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff fa68 	bl	800104c <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff fa64 	bl	800104c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e053      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2d      	ldr	r3, [pc, #180]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d210      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4922      	ldr	r1, [pc, #136]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e032      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4916      	ldr	r1, [pc, #88]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	490e      	ldr	r1, [pc, #56]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c16:	f000 f821 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	490a      	ldr	r1, [pc, #40]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a09      	ldr	r2, [pc, #36]	@ (8001c54 <HAL_RCC_ClockConfig+0x1cc>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_RCC_ClockConfig+0x1d0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f9c6 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08002ca8 	.word	0x08002ca8
 8001c54:	20000004 	.word	0x20000004
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x30>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x36>
 8001c8a:	e027      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c8e:	613b      	str	r3, [r7, #16]
      break;
 8001c90:	e027      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0c5b      	lsrs	r3, r3, #17
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	4a11      	ldr	r2, [pc, #68]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cbe:	fb03 f202 	mul.w	r2, r3, r2
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e004      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	613b      	str	r3, [r7, #16]
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cde:	613b      	str	r3, [r7, #16]
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	693b      	ldr	r3, [r7, #16]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	007a1200 	.word	0x007a1200
 8001cf8:	08002cb8 	.word	0x08002cb8
 8001cfc:	08002cc8 	.word	0x08002cc8
 8001d00:	003d0900 	.word	0x003d0900

08001d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <RCC_Delay+0x34>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <RCC_Delay+0x38>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d20:	bf00      	nop
  }
  while (Delay --);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f9      	bne.n	8001d20 <RCC_Delay+0x1c>
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	10624dd3 	.word	0x10624dd3

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe ffd8 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 fb86 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e041      	b.n	8001e74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d106      	bne.n	8001e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f839 	bl	8001e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f000 fb37 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d122      	bne.n	8001eea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d11b      	bne.n	8001eea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0202 	mvn.w	r2, #2
 8001eba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fac2 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8001ed6:	e005      	b.n	8001ee4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fab5 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fac4 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d122      	bne.n	8001f3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d11b      	bne.n	8001f3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f06f 0204 	mvn.w	r2, #4
 8001f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fa98 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8001f2a:	e005      	b.n	8001f38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fa8b 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fa9a 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d122      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11b      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 0208 	mvn.w	r2, #8
 8001f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2204      	movs	r2, #4
 8001f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fa6e 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8001f7e:	e005      	b.n	8001f8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fa61 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa70 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d122      	bne.n	8001fe6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d11b      	bne.n	8001fe6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0210 	mvn.w	r2, #16
 8001fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2208      	movs	r2, #8
 8001fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa44 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8001fd2:	e005      	b.n	8001fe0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fa37 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa46 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10e      	bne.n	8002012 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f06f 0201 	mvn.w	r2, #1
 800200a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fa12 	bl	8002436 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201c:	2b80      	cmp	r3, #128	@ 0x80
 800201e:	d10e      	bne.n	800203e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202a:	2b80      	cmp	r3, #128	@ 0x80
 800202c:	d107      	bne.n	800203e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fdf3 	bl	8002c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002048:	2b40      	cmp	r3, #64	@ 0x40
 800204a:	d10e      	bne.n	800206a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b40      	cmp	r3, #64	@ 0x40
 8002058:	d107      	bne.n	800206a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fa0a 	bl	800247e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b20      	cmp	r3, #32
 8002076:	d10e      	bne.n	8002096 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	d107      	bne.n	8002096 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0220 	mvn.w	r2, #32
 800208e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fdbe 	bl	8002c12 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0ae      	b.n	800221c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	f200 809f 	bhi.w	800220c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020ce:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800220d 	.word	0x0800220d
 80020dc:	0800220d 	.word	0x0800220d
 80020e0:	0800220d 	.word	0x0800220d
 80020e4:	08002149 	.word	0x08002149
 80020e8:	0800220d 	.word	0x0800220d
 80020ec:	0800220d 	.word	0x0800220d
 80020f0:	0800220d 	.word	0x0800220d
 80020f4:	0800218b 	.word	0x0800218b
 80020f8:	0800220d 	.word	0x0800220d
 80020fc:	0800220d 	.word	0x0800220d
 8002100:	0800220d 	.word	0x0800220d
 8002104:	080021cb 	.word	0x080021cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fa20 	bl	8002554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0208 	orr.w	r2, r2, #8
 8002122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6999      	ldr	r1, [r3, #24]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	619a      	str	r2, [r3, #24]
      break;
 8002146:	e064      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fa66 	bl	8002620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6999      	ldr	r1, [r3, #24]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	021a      	lsls	r2, r3, #8
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	619a      	str	r2, [r3, #24]
      break;
 8002188:	e043      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 faaf 	bl	80026f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0208 	orr.w	r2, r2, #8
 80021a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0204 	bic.w	r2, r2, #4
 80021b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	61da      	str	r2, [r3, #28]
      break;
 80021c8:	e023      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 faf9 	bl	80027c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69d9      	ldr	r1, [r3, #28]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	61da      	str	r2, [r3, #28]
      break;
 800220a:	e002      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	75fb      	strb	r3, [r7, #23]
      break;
 8002210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_TIM_ConfigClockSource+0x1c>
 800223c:	2302      	movs	r3, #2
 800223e:	e0b4      	b.n	80023aa <HAL_TIM_ConfigClockSource+0x186>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800225e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002278:	d03e      	beq.n	80022f8 <HAL_TIM_ConfigClockSource+0xd4>
 800227a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800227e:	f200 8087 	bhi.w	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002286:	f000 8086 	beq.w	8002396 <HAL_TIM_ConfigClockSource+0x172>
 800228a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800228e:	d87f      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 8002290:	2b70      	cmp	r3, #112	@ 0x70
 8002292:	d01a      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0xa6>
 8002294:	2b70      	cmp	r3, #112	@ 0x70
 8002296:	d87b      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 8002298:	2b60      	cmp	r3, #96	@ 0x60
 800229a:	d050      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x11a>
 800229c:	2b60      	cmp	r3, #96	@ 0x60
 800229e:	d877      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 80022a0:	2b50      	cmp	r3, #80	@ 0x50
 80022a2:	d03c      	beq.n	800231e <HAL_TIM_ConfigClockSource+0xfa>
 80022a4:	2b50      	cmp	r3, #80	@ 0x50
 80022a6:	d873      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 80022a8:	2b40      	cmp	r3, #64	@ 0x40
 80022aa:	d058      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x13a>
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d86f      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 80022b0:	2b30      	cmp	r3, #48	@ 0x30
 80022b2:	d064      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x15a>
 80022b4:	2b30      	cmp	r3, #48	@ 0x30
 80022b6:	d86b      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d060      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x15a>
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d867      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d05c      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x15a>
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d05a      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x15a>
 80022c8:	e062      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022da:	f000 fbcb 	bl	8002a74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	609a      	str	r2, [r3, #8]
      break;
 80022f6:	e04f      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002308:	f000 fbb4 	bl	8002a74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800231a:	609a      	str	r2, [r3, #8]
      break;
 800231c:	e03c      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	461a      	mov	r2, r3
 800232c:	f000 fb2b 	bl	8002986 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2150      	movs	r1, #80	@ 0x50
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fb82 	bl	8002a40 <TIM_ITRx_SetConfig>
      break;
 800233c:	e02c      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800234a:	461a      	mov	r2, r3
 800234c:	f000 fb49 	bl	80029e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2160      	movs	r1, #96	@ 0x60
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fb72 	bl	8002a40 <TIM_ITRx_SetConfig>
      break;
 800235c:	e01c      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800236a:	461a      	mov	r2, r3
 800236c:	f000 fb0b 	bl	8002986 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2140      	movs	r1, #64	@ 0x40
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fb62 	bl	8002a40 <TIM_ITRx_SetConfig>
      break;
 800237c:	e00c      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f000 fb59 	bl	8002a40 <TIM_ITRx_SetConfig>
      break;
 800238e:	e003      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      break;
 8002394:	e000      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_SlaveConfigSynchro+0x18>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e031      	b.n	800242e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80023da:	6839      	ldr	r1, [r7, #0]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fa41 	bl	8002864 <TIM_SlaveTimer_SetConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e018      	b.n	800242e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800241a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a29      	ldr	r2, [pc, #164]	@ (8002548 <TIM_Base_SetConfig+0xb8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00b      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ae:	d007      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a26      	ldr	r2, [pc, #152]	@ (800254c <TIM_Base_SetConfig+0xbc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a25      	ldr	r2, [pc, #148]	@ (8002550 <TIM_Base_SetConfig+0xc0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002548 <TIM_Base_SetConfig+0xb8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a19      	ldr	r2, [pc, #100]	@ (800254c <TIM_Base_SetConfig+0xbc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <TIM_Base_SetConfig+0xc0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a07      	ldr	r2, [pc, #28]	@ (8002548 <TIM_Base_SetConfig+0xb8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d103      	bne.n	8002538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	615a      	str	r2, [r3, #20]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800

08002554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 0201 	bic.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0308 	bic.w	r3, r3, #8
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a13      	ldr	r2, [pc, #76]	@ (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00

08002620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 0210 	bic.w	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0320 	bic.w	r3, r3, #32
 800266a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <TIM_OC2_SetConfig+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10d      	bne.n	800269c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <TIM_OC2_SetConfig+0xd0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d113      	bne.n	80026cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <TIM_OC3_SetConfig+0xd0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10d      	bne.n	800276e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <TIM_OC3_SetConfig+0xd0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800277c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	621a      	str	r2, [r3, #32]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00

080027c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <TIM_OC4_SetConfig+0x98>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d109      	bne.n	800283c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800282e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00

08002864 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002880:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b70      	cmp	r3, #112	@ 0x70
 80028ac:	d01a      	beq.n	80028e4 <TIM_SlaveTimer_SetConfig+0x80>
 80028ae:	2b70      	cmp	r3, #112	@ 0x70
 80028b0:	d860      	bhi.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
 80028b2:	2b60      	cmp	r3, #96	@ 0x60
 80028b4:	d054      	beq.n	8002960 <TIM_SlaveTimer_SetConfig+0xfc>
 80028b6:	2b60      	cmp	r3, #96	@ 0x60
 80028b8:	d85c      	bhi.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
 80028ba:	2b50      	cmp	r3, #80	@ 0x50
 80028bc:	d046      	beq.n	800294c <TIM_SlaveTimer_SetConfig+0xe8>
 80028be:	2b50      	cmp	r3, #80	@ 0x50
 80028c0:	d858      	bhi.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
 80028c2:	2b40      	cmp	r3, #64	@ 0x40
 80028c4:	d019      	beq.n	80028fa <TIM_SlaveTimer_SetConfig+0x96>
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d854      	bhi.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
 80028ca:	2b30      	cmp	r3, #48	@ 0x30
 80028cc:	d055      	beq.n	800297a <TIM_SlaveTimer_SetConfig+0x116>
 80028ce:	2b30      	cmp	r3, #48	@ 0x30
 80028d0:	d850      	bhi.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d051      	beq.n	800297a <TIM_SlaveTimer_SetConfig+0x116>
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d84c      	bhi.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04d      	beq.n	800297a <TIM_SlaveTimer_SetConfig+0x116>
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d04b      	beq.n	800297a <TIM_SlaveTimer_SetConfig+0x116>
 80028e2:	e047      	b.n	8002974 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80028f4:	f000 f8be 	bl	8002a74 <TIM_ETR_SetConfig>
      break;
 80028f8:	e040      	b.n	800297c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d101      	bne.n	8002906 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e03b      	b.n	800297e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800292c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
      break;
 800294a:	e017      	b.n	800297c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002958:	461a      	mov	r2, r3
 800295a:	f000 f814 	bl	8002986 <TIM_TI1_ConfigInputStage>
      break;
 800295e:	e00d      	b.n	800297c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800296c:	461a      	mov	r2, r3
 800296e:	f000 f838 	bl	80029e2 <TIM_TI2_ConfigInputStage>
      break;
 8002972:	e003      	b.n	800297c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	75fb      	strb	r3, [r7, #23]
      break;
 8002978:	e000      	b.n	800297c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800297a:	bf00      	nop
  }

  return status;
 800297c:	7dfb      	ldrb	r3, [r7, #23]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0201 	bic.w	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 030a 	bic.w	r3, r3, #10
 80029c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b087      	sub	sp, #28
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f023 0210 	bic.w	r2, r3, #16
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	031b      	lsls	r3, r3, #12
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f043 0307 	orr.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e046      	b.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b18:	d009      	beq.n	8002b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a12      	ldr	r2, [pc, #72]	@ (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a10      	ldr	r2, [pc, #64]	@ (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10c      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800

08002b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e03d      	b.n	8002c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <memset>:
 8002c36:	4603      	mov	r3, r0
 8002c38:	4402      	add	r2, r0
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d100      	bne.n	8002c40 <memset+0xa>
 8002c3e:	4770      	bx	lr
 8002c40:	f803 1b01 	strb.w	r1, [r3], #1
 8002c44:	e7f9      	b.n	8002c3a <memset+0x4>
	...

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	4d0c      	ldr	r5, [pc, #48]	@ (8002c80 <__libc_init_array+0x38>)
 8002c4e:	4c0d      	ldr	r4, [pc, #52]	@ (8002c84 <__libc_init_array+0x3c>)
 8002c50:	1b64      	subs	r4, r4, r5
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	42a6      	cmp	r6, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	f000 f81a 	bl	8002c90 <_init>
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c88 <__libc_init_array+0x40>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	@ (8002c8c <__libc_init_array+0x44>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	42a6      	cmp	r6, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c70:	4798      	blx	r3
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7a:	4798      	blx	r3
 8002c7c:	3601      	adds	r6, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002ccc 	.word	0x08002ccc
 8002c84:	08002ccc 	.word	0x08002ccc
 8002c88:	08002ccc 	.word	0x08002ccc
 8002c8c:	08002cd0 	.word	0x08002cd0

08002c90 <_init>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr

08002c9c <_fini>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr
