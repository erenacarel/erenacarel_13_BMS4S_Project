
cubemx_project_compPwmPolarity_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006a90  08006a90  00007a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd8  08006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be0  08006be0  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006be8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000064  08006c4c  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08006c4c  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b5  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003842  00000000  00000000  0001c942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00020188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e68  00000000  00000000  00021410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8b8  00000000  00000000  00022278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b555  00000000  00000000  0003db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939d5  00000000  00000000  00059085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eca5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  000ecaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000f1b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a78 	.word	0x08006a78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08006a78 	.word	0x08006a78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f001 fa3d 	bl	8001c28 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f9a6 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f001 fdc3 	bl	8002354 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f000 f996 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000080 	.word	0x20000080
 80007e4:	40012400 	.word	0x40012400

080007e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <HAL_ADC_MspInit+0x7c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d129      	bne.n	800085c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000838:	231e      	movs	r3, #30
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	@ (800086c <HAL_ADC_MspInit+0x84>)
 8000848:	f002 f990 	bl	8002b6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2012      	movs	r0, #18
 8000852:	f002 f8a2 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000856:	2012      	movs	r0, #18
 8000858:	f002 f8bb 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40012400 	.word	0x40012400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_GPIO_Init+0xa4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <MX_GPIO_Init+0xa4>)
 800088a:	f043 0320 	orr.w	r3, r3, #32
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_GPIO_Init+0xa4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0320 	and.w	r3, r3, #32
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_GPIO_Init+0xa4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0308 	and.w	r3, r3, #8
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CHARGE_Pin|DECHARGE_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	21c0      	movs	r1, #192	@ 0xc0
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_GPIO_Init+0xa8>)
 80008d2:	f002 facf 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CHARGE_Pin|DECHARGE_Pin;
 80008d6:	23c0      	movs	r3, #192	@ 0xc0
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480a      	ldr	r0, [pc, #40]	@ (8000918 <MX_GPIO_Init+0xa8>)
 80008ee:	f002 f93d 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BATTERY_DETECT_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_GPIO_Init+0xac>)
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BATTERY_DETECT_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_GPIO_Init+0xb0>)
 8000906:	f002 f931 	bl	8002b6c <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	10110000 	.word	0x10110000
 8000920:	40010c00 	.word	0x40010c00

08000924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f002 fa9f 	bl	8002ea4 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f8ca 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000b0 	.word	0x200000b0
 8000978:	40005400 	.word	0x40005400
 800097c:	00061a80 	.word	0x00061a80

08000980 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <HAL_I2C_MspInit+0x90>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d132      	bne.n	8000a06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_I2C_MspInit+0x98>)
 80009ce:	f002 f8cd 	bl	8002b6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_I2C_MspInit+0x9c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <HAL_I2C_MspInit+0x9c>)
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	@ 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	40010000 	.word	0x40010000

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f001 f87a 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f811 	bl	8000a4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f7ff ff20 	bl	8000870 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a30:	f7ff fe9c 	bl	800076c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a34:	f000 f956 	bl	8000ce4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a38:	f000 faf6 	bl	8001028 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a3c:	f000 fa0a 	bl	8000e54 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000a40:	f7ff ff70 	bl	8000924 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  UsrSystemInitial();
 8000a44:	f000 ff34 	bl	80018b0 <UsrSystemInitial>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UsrSystemGeneral();
 8000a48:	f000 ff8a 	bl	8001960 <UsrSystemGeneral>
 8000a4c:	e7fc      	b.n	8000a48 <main+0x28>

08000a4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b094      	sub	sp, #80	@ 0x50
 8000a52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a58:	2228      	movs	r2, #40	@ 0x28
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f005 fb7b 	bl	8006158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 ffc7 	bl	8003a38 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ab0:	f000 f828 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 fa33 	bl	8003f3c <HAL_RCC_ClockConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000adc:	f000 f812 	bl	8000b04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fbb3 	bl	8004258 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af8:	f000 f804 	bl	8000b04 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	@ 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f001 ff25 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b50:	2005      	movs	r0, #5
 8000b52:	f001 ff3e 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_MspInit+0x70>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_MspInit+0x70>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 ffe8 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <ADC1_2_IRQHandler+0x10>)
 8000bee:	f001 fadf 	bl	80021b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000080 	.word	0x20000080

08000bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (TIM2->SR & (uint32_t)0x01)
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d019      	beq.n	8000c42 <TIM2_IRQHandler+0x46>
	{
		TIM2->SR &= ~(uint32_t)0x01; // clear update interrupt enable
 8000c0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6113      	str	r3, [r2, #16]

		g_timerCount++;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <TIM2_IRQHandler+0x50>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <TIM2_IRQHandler+0x50>)
 8000c26:	6013      	str	r3, [r2, #0]

        g_dutyCycle += 5; // Duty cycle'ı her saniye 5 artır
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	3305      	adds	r3, #5
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c32:	801a      	strh	r2, [r3, #0]

        if (g_dutyCycle > 45) {
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c3a:	d902      	bls.n	8000c42 <TIM2_IRQHandler+0x46>
        	g_dutyCycle = 10; // Duty cycle'ı %100'ü geçmesin
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c3e:	220a      	movs	r2, #10
 8000c40:	801a      	strh	r2, [r3, #0]
        }
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <TIM2_IRQHandler+0x58>)
 8000c44:	f003 fd1b 	bl	800467e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002d0 	.word	0x200002d0
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000150 	.word	0x20000150

08000c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <USART1_IRQHandler+0x10>)
 8000c5e:	f004 fcdb 	bl	8005618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000198 	.word	0x20000198

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f005 fa64 	bl	8006168 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20005000 	.word	0x20005000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000104 	.word	0x20000104
 8000cd4:	20000498 	.word	0x20000498

08000cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	@ 0x58
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2220      	movs	r2, #32
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fa1b 	bl	8006158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d22:	4b4a      	ldr	r3, [pc, #296]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d24:	4a4a      	ldr	r2, [pc, #296]	@ (8000e50 <MX_TIM1_Init+0x16c>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d28:	4b48      	ldr	r3, [pc, #288]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b47      	ldr	r3, [pc, #284]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d34:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b43      	ldr	r3, [pc, #268]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d42:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b40      	ldr	r3, [pc, #256]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d4e:	483f      	ldr	r0, [pc, #252]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d50:	f003 fbee 	bl	8004530 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d5a:	f7ff fed3 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4838      	ldr	r0, [pc, #224]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d6c:	f003 fe52 	bl	8004a14 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d76:	f7ff fec5 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d7a:	4834      	ldr	r0, [pc, #208]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d7c:	f003 fc27 	bl	80045ce <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d86:	f7ff febd 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d8e:	2380      	movs	r3, #128	@ 0x80
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d96:	4619      	mov	r1, r3
 8000d98:	482c      	ldr	r0, [pc, #176]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d9a:	f004 fa83 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000da4:	f7ff feae 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	@ 0x60
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000db8:	2304      	movs	r3, #4
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481f      	ldr	r0, [pc, #124]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000dce:	f003 fd5f 	bl	8004890 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000dd8:	f7ff fe94 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	2204      	movs	r2, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4819      	ldr	r0, [pc, #100]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000de6:	f003 fd53 	bl	8004890 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000df0:	f7ff fe88 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df8:	2208      	movs	r2, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000dfe:	f003 fd47 	bl	8004890 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e08:	f7ff fe7c 	bl	8000b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000e30:	f004 fa96 	bl	8005360 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000e3a:	f7ff fe63 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e3e:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000e40:	f000 f8a4 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3758      	adds	r7, #88	@ 0x58
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000108 	.word	0x20000108
 8000e50:	40012c00 	.word	0x40012c00

08000e54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	481b      	ldr	r0, [pc, #108]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000eaa:	f003 fb41 	bl	8004530 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000eb4:	f7ff fe26 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000ec6:	f003 fda5 	bl	8004a14 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ed0:	f7ff fe18 	bl	8000b04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000ee4:	f003 fe5d 	bl	8004ba2 <HAL_TIM_SlaveConfigSynchro>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000eee:	f7ff fe09 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000f00:	f004 f9d0 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f0a:	f7ff fdfb 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	@ 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000150 	.word	0x20000150

08000f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <HAL_TIM_Base_MspInit+0x68>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10c      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f46:	e018      	b.n	8000f7a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f50:	d113      	bne.n	8000f7a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	201c      	movs	r0, #28
 8000f70:	f001 fd13 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f74:	201c      	movs	r0, #28
 8000f76:	f001 fd2c 	bl	80029d2 <HAL_NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40012c00 	.word	0x40012c00
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_TIM_MspPostInit+0x8c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d131      	bne.n	8001010 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480b      	ldr	r0, [pc, #44]	@ (8001020 <HAL_TIM_MspPostInit+0x94>)
 8000ff2:	f001 fdbb 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ff6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <HAL_TIM_MspPostInit+0x98>)
 800100c:	f001 fdae 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40012c00 	.word	0x40012c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40010c00 	.word	0x40010c00
 8001024:	40010800 	.word	0x40010800

08001028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <MX_USART1_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001060:	f004 f9e1 	bl	8005426 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f7ff fd4b 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000198 	.word	0x20000198
 8001078:	40013800 	.word	0x40013800

0800107c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a26      	ldr	r2, [pc, #152]	@ (8001130 <HAL_UART_MspInit+0xb4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d145      	bne.n	8001128 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a24      	ldr	r2, [pc, #144]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010cc:	2340      	movs	r3, #64	@ 0x40
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4816      	ldr	r0, [pc, #88]	@ (8001138 <HAL_UART_MspInit+0xbc>)
 80010e0:	f001 fd44 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4810      	ldr	r0, [pc, #64]	@ (8001138 <HAL_UART_MspInit+0xbc>)
 80010f8:	f001 fd38 	bl	8002b6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_UART_MspInit+0xc0>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_UART_MspInit+0xc0>)
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2025      	movs	r0, #37	@ 0x25
 800111e:	f001 fc3c 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001122:	2025      	movs	r0, #37	@ 0x25
 8001124:	f001 fc55 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	@ 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40013800 	.word	0x40013800
 8001134:	40021000 	.word	0x40021000
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40010000 	.word	0x40010000

08001140 <AdcValuesMovingAverageProc>:
ADC_ChannelConfTypeDef sConfigPrivate = {0};

static uint16_t AdcValuesMovingAverageProc(uint16_t* buffer, uint8_t size);

static uint16_t AdcValuesMovingAverageProc(uint16_t* buffer, uint8_t size)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
    for(uint8_t i = 0; i < size; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	72fb      	strb	r3, [r7, #11]
 8001154:	e00b      	b.n	800116e <AdcValuesMovingAverageProc+0x2e>
    {
        sum += buffer[i];
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4413      	add	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
    for(uint8_t i = 0; i < size; i++)
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	3301      	adds	r3, #1
 800116c:	72fb      	strb	r3, [r7, #11]
 800116e:	7afa      	ldrb	r2, [r7, #11]
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3ef      	bcc.n	8001156 <AdcValuesMovingAverageProc+0x16>
    }
    return (uint16_t)(sum / size);  // uint16_t
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	b29b      	uxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	0000      	movs	r0, r0
 800118c:	0000      	movs	r0, r0
	...

08001190 <UsrReadAdc>:

void UsrReadAdc(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08d      	sub	sp, #52	@ 0x34
 8001194:	af02      	add	r7, sp, #8
	sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8001196:	4baa      	ldr	r3, [pc, #680]	@ (8001440 <UsrReadAdc+0x2b0>)
 8001198:	2201      	movs	r2, #1
 800119a:	605a      	str	r2, [r3, #4]
	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800119c:	4ba8      	ldr	r3, [pc, #672]	@ (8001440 <UsrReadAdc+0x2b0>)
 800119e:	2207      	movs	r2, #7
 80011a0:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_1;
 80011a2:	4ba7      	ldr	r3, [pc, #668]	@ (8001440 <UsrReadAdc+0x2b0>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80011a8:	49a5      	ldr	r1, [pc, #660]	@ (8001440 <UsrReadAdc+0x2b0>)
 80011aa:	48a6      	ldr	r0, [pc, #664]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011ac:	f001 f8d2 	bl	8002354 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80011b0:	48a4      	ldr	r0, [pc, #656]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011b2:	f000 fe11 	bl	8001dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80011b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011ba:	48a2      	ldr	r0, [pc, #648]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011bc:	f000 fee6 	bl	8001f8c <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[0] = HAL_ADC_GetValue(&hadc1);
 80011c0:	48a0      	ldr	r0, [pc, #640]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011c2:	f000 ffe9 	bl	8002198 <HAL_ADC_GetValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001448 <UsrReadAdc+0x2b8>)
 80011cc:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80011ce:	489d      	ldr	r0, [pc, #628]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011d0:	f000 feb0 	bl	8001f34 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001440 <UsrReadAdc+0x2b0>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_2;
 80011da:	4b99      	ldr	r3, [pc, #612]	@ (8001440 <UsrReadAdc+0x2b0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80011e0:	4997      	ldr	r1, [pc, #604]	@ (8001440 <UsrReadAdc+0x2b0>)
 80011e2:	4898      	ldr	r0, [pc, #608]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011e4:	f001 f8b6 	bl	8002354 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80011e8:	4896      	ldr	r0, [pc, #600]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011ea:	f000 fdf5 	bl	8001dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80011ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011f2:	4894      	ldr	r0, [pc, #592]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011f4:	f000 feca 	bl	8001f8c <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[1] = HAL_ADC_GetValue(&hadc1);
 80011f8:	4892      	ldr	r0, [pc, #584]	@ (8001444 <UsrReadAdc+0x2b4>)
 80011fa:	f000 ffcd 	bl	8002198 <HAL_ADC_GetValue>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b91      	ldr	r3, [pc, #580]	@ (8001448 <UsrReadAdc+0x2b8>)
 8001204:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8001206:	488f      	ldr	r0, [pc, #572]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001208:	f000 fe94 	bl	8001f34 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800120c:	4b8c      	ldr	r3, [pc, #560]	@ (8001440 <UsrReadAdc+0x2b0>)
 800120e:	2207      	movs	r2, #7
 8001210:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_3;
 8001212:	4b8b      	ldr	r3, [pc, #556]	@ (8001440 <UsrReadAdc+0x2b0>)
 8001214:	2203      	movs	r2, #3
 8001216:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001218:	4989      	ldr	r1, [pc, #548]	@ (8001440 <UsrReadAdc+0x2b0>)
 800121a:	488a      	ldr	r0, [pc, #552]	@ (8001444 <UsrReadAdc+0x2b4>)
 800121c:	f001 f89a 	bl	8002354 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001220:	4888      	ldr	r0, [pc, #544]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001222:	f000 fdd9 	bl	8001dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001226:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800122a:	4886      	ldr	r0, [pc, #536]	@ (8001444 <UsrReadAdc+0x2b4>)
 800122c:	f000 feae 	bl	8001f8c <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[2] = HAL_ADC_GetValue(&hadc1);
 8001230:	4884      	ldr	r0, [pc, #528]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001232:	f000 ffb1 	bl	8002198 <HAL_ADC_GetValue>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b83      	ldr	r3, [pc, #524]	@ (8001448 <UsrReadAdc+0x2b8>)
 800123c:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 800123e:	4881      	ldr	r0, [pc, #516]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001240:	f000 fe78 	bl	8001f34 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001244:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <UsrReadAdc+0x2b0>)
 8001246:	2207      	movs	r2, #7
 8001248:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_4;
 800124a:	4b7d      	ldr	r3, [pc, #500]	@ (8001440 <UsrReadAdc+0x2b0>)
 800124c:	2204      	movs	r2, #4
 800124e:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001250:	497b      	ldr	r1, [pc, #492]	@ (8001440 <UsrReadAdc+0x2b0>)
 8001252:	487c      	ldr	r0, [pc, #496]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001254:	f001 f87e 	bl	8002354 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001258:	487a      	ldr	r0, [pc, #488]	@ (8001444 <UsrReadAdc+0x2b4>)
 800125a:	f000 fdbd 	bl	8001dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800125e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001262:	4878      	ldr	r0, [pc, #480]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001264:	f000 fe92 	bl	8001f8c <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[3] = HAL_ADC_GetValue(&hadc1);
 8001268:	4876      	ldr	r0, [pc, #472]	@ (8001444 <UsrReadAdc+0x2b4>)
 800126a:	f000 ff95 	bl	8002198 <HAL_ADC_GetValue>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b75      	ldr	r3, [pc, #468]	@ (8001448 <UsrReadAdc+0x2b8>)
 8001274:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8001276:	4873      	ldr	r0, [pc, #460]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001278:	f000 fe5c 	bl	8001f34 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800127c:	4b70      	ldr	r3, [pc, #448]	@ (8001440 <UsrReadAdc+0x2b0>)
 800127e:	2207      	movs	r2, #7
 8001280:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_VREFINT;
 8001282:	4b6f      	ldr	r3, [pc, #444]	@ (8001440 <UsrReadAdc+0x2b0>)
 8001284:	2211      	movs	r2, #17
 8001286:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001288:	496d      	ldr	r1, [pc, #436]	@ (8001440 <UsrReadAdc+0x2b0>)
 800128a:	486e      	ldr	r0, [pc, #440]	@ (8001444 <UsrReadAdc+0x2b4>)
 800128c:	f001 f862 	bl	8002354 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001290:	486c      	ldr	r0, [pc, #432]	@ (8001444 <UsrReadAdc+0x2b4>)
 8001292:	f000 fda1 	bl	8001dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001296:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800129a:	486a      	ldr	r0, [pc, #424]	@ (8001444 <UsrReadAdc+0x2b4>)
 800129c:	f000 fe76 	bl	8001f8c <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[4] = HAL_ADC_GetValue(&hadc1);
 80012a0:	4868      	ldr	r0, [pc, #416]	@ (8001444 <UsrReadAdc+0x2b4>)
 80012a2:	f000 ff79 	bl	8002198 <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b67      	ldr	r3, [pc, #412]	@ (8001448 <UsrReadAdc+0x2b8>)
 80012ac:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 80012ae:	4865      	ldr	r0, [pc, #404]	@ (8001444 <UsrReadAdc+0x2b4>)
 80012b0:	f000 fe40 	bl	8001f34 <HAL_ADC_Stop>

	// lcd panele yazirma islemleri
	int tens[4] = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
	int ones[4] = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]

    for (uint8_t i = 0; i < 4; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012d4:	e07c      	b.n	80013d0 <UsrReadAdc+0x240>
    {
    	g_adcBuffer[i][g_adcBufferIndex] = g_rawAdcReadValues[i];
 80012d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012de:	495b      	ldr	r1, [pc, #364]	@ (800144c <UsrReadAdc+0x2bc>)
 80012e0:	8809      	ldrh	r1, [r1, #0]
 80012e2:	4608      	mov	r0, r1
 80012e4:	4958      	ldr	r1, [pc, #352]	@ (8001448 <UsrReadAdc+0x2b8>)
 80012e6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80012ea:	4a59      	ldr	r2, [pc, #356]	@ (8001450 <UsrReadAdc+0x2c0>)
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4403      	add	r3, r0
 80012f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_batteryValues[i] = AdcValuesMovingAverageProc(g_adcBuffer[i], _USR_ADC_BUF_FILTER_SIZE);
 80012f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4a55      	ldr	r2, [pc, #340]	@ (8001450 <UsrReadAdc+0x2c0>)
 80012fc:	4413      	add	r3, r2
 80012fe:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8001302:	2104      	movs	r1, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff1b 	bl	8001140 <AdcValuesMovingAverageProc>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b51      	ldr	r3, [pc, #324]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001310:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        g_batteryValuesModified[i] = g_batteryValues[i] * 0.0310;
 8001314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001318:	4a4e      	ldr	r2, [pc, #312]	@ (8001454 <UsrReadAdc+0x2c4>)
 800131a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f99a 	bl	8000658 <__aeabi_i2d>
 8001324:	a344      	add	r3, pc, #272	@ (adr r3, 8001438 <UsrReadAdc+0x2a8>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7fe ff19 	bl	8000160 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff f9f7 	bl	800072c <__aeabi_d2uiz>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b45      	ldr	r3, [pc, #276]	@ (8001458 <UsrReadAdc+0x2c8>)
 8001344:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        tens[i] = g_batteryValuesModified[i] / 10;
 8001348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134c:	4a42      	ldr	r2, [pc, #264]	@ (8001458 <UsrReadAdc+0x2c8>)
 800134e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001352:	4a42      	ldr	r2, [pc, #264]	@ (800145c <UsrReadAdc+0x2cc>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	b29a      	uxth	r2, r3
 800135c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3328      	adds	r3, #40	@ 0x28
 8001364:	443b      	add	r3, r7
 8001366:	f843 2c14 	str.w	r2, [r3, #-20]
        ones[i] = g_batteryValuesModified[i] % 10;
 800136a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800136e:	4a3a      	ldr	r2, [pc, #232]	@ (8001458 <UsrReadAdc+0x2c8>)
 8001370:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <UsrReadAdc+0x2cc>)
 8001376:	fba3 1302 	umull	r1, r3, r3, r2
 800137a:	08d9      	lsrs	r1, r3, #3
 800137c:	460b      	mov	r3, r1
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	3328      	adds	r3, #40	@ 0x28
 8001390:	443b      	add	r3, r7
 8001392:	f843 2c24 	str.w	r2, [r3, #-36]
        sprintf((char*)m_batteryBufferUpLine, "B0:%d,%d  B1:%d,%d", tens[0], ones[0], tens[1], ones[1]);
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	492e      	ldr	r1, [pc, #184]	@ (8001460 <UsrReadAdc+0x2d0>)
 80013a8:	482e      	ldr	r0, [pc, #184]	@ (8001464 <UsrReadAdc+0x2d4>)
 80013aa:	f004 feb5 	bl	8006118 <siprintf>
        sprintf((char*)m_batteryBufferDownLine, "B2:%d,%d  B3:%d,%d", tens[2], ones[2], tens[3], ones[3]);
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	492a      	ldr	r1, [pc, #168]	@ (8001468 <UsrReadAdc+0x2d8>)
 80013c0:	482a      	ldr	r0, [pc, #168]	@ (800146c <UsrReadAdc+0x2dc>)
 80013c2:	f004 fea9 	bl	8006118 <siprintf>
    for (uint8_t i = 0; i < 4; i++)
 80013c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ca:	3301      	adds	r3, #1
 80013cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	f67f af7e 	bls.w	80012d6 <UsrReadAdc+0x146>
    }
    g_adcBufferIndex = (g_adcBufferIndex + 1) % _USR_ADC_BUF_FILTER_SIZE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <UsrReadAdc+0x2bc>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	425a      	negs	r2, r3
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	bf58      	it	pl
 80013ec:	4253      	negpl	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <UsrReadAdc+0x2bc>)
 80013f2:	801a      	strh	r2, [r3, #0]

    fark0 = ABS_DIFF(g_batteryValues[0], g_batteryValues[1]);
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <UsrReadAdc+0x2c4>)
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <UsrReadAdc+0x2c4>)
 80013fa:	885b      	ldrh	r3, [r3, #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d906      	bls.n	800140e <UsrReadAdc+0x27e>
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001406:	885b      	ldrh	r3, [r3, #2]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	e005      	b.n	800141a <UsrReadAdc+0x28a>
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001410:	885a      	ldrh	r2, [r3, #2]
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	4a15      	ldr	r2, [pc, #84]	@ (8001470 <UsrReadAdc+0x2e0>)
 800141c:	8013      	strh	r3, [r2, #0]
    fark1 = ABS_DIFF(g_batteryValues[1], g_batteryValues[2]);
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001420:	885a      	ldrh	r2, [r3, #2]
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001424:	889b      	ldrh	r3, [r3, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	d924      	bls.n	8001474 <UsrReadAdc+0x2e4>
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <UsrReadAdc+0x2c4>)
 800142c:	885a      	ldrh	r2, [r3, #2]
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <UsrReadAdc+0x2c4>)
 8001430:	889b      	ldrh	r3, [r3, #4]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	e023      	b.n	8001480 <UsrReadAdc+0x2f0>
 8001438:	c8b43958 	.word	0xc8b43958
 800143c:	3f9fbe76 	.word	0x3f9fbe76
 8001440:	20000224 	.word	0x20000224
 8001444:	20000080 	.word	0x20000080
 8001448:	200001e0 	.word	0x200001e0
 800144c:	2000021c 	.word	0x2000021c
 8001450:	200001fc 	.word	0x200001fc
 8001454:	200001ec 	.word	0x200001ec
 8001458:	200001f4 	.word	0x200001f4
 800145c:	cccccccd 	.word	0xcccccccd
 8001460:	08006a90 	.word	0x08006a90
 8001464:	200002d4 	.word	0x200002d4
 8001468:	08006aa4 	.word	0x08006aa4
 800146c:	200002e4 	.word	0x200002e4
 8001470:	2000021e 	.word	0x2000021e
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <UsrReadAdc+0x344>)
 8001476:	889a      	ldrh	r2, [r3, #4]
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <UsrReadAdc+0x344>)
 800147a:	885b      	ldrh	r3, [r3, #2]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <UsrReadAdc+0x348>)
 8001482:	8013      	strh	r3, [r2, #0]
    fark2 = ABS_DIFF(g_batteryValues[2], g_batteryValues[3]);
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <UsrReadAdc+0x344>)
 8001486:	889a      	ldrh	r2, [r3, #4]
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <UsrReadAdc+0x344>)
 800148a:	88db      	ldrh	r3, [r3, #6]
 800148c:	429a      	cmp	r2, r3
 800148e:	d906      	bls.n	800149e <UsrReadAdc+0x30e>
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <UsrReadAdc+0x344>)
 8001492:	889a      	ldrh	r2, [r3, #4]
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <UsrReadAdc+0x344>)
 8001496:	88db      	ldrh	r3, [r3, #6]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	e005      	b.n	80014aa <UsrReadAdc+0x31a>
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <UsrReadAdc+0x344>)
 80014a0:	88da      	ldrh	r2, [r3, #6]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <UsrReadAdc+0x344>)
 80014a4:	889b      	ldrh	r3, [r3, #4]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <UsrReadAdc+0x34c>)
 80014ac:	8013      	strh	r3, [r2, #0]

	UsrLcdSetCursor(0, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 f8a7 	bl	8001604 <UsrLcdSetCursor>
	UsrLcdSendString(m_batteryBufferUpLine);
 80014b6:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <UsrReadAdc+0x350>)
 80014b8:	f000 f861 	bl	800157e <UsrLcdSendString>
	UsrLcdSetCursor(1, 0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 f8a0 	bl	8001604 <UsrLcdSetCursor>
	UsrLcdSendString(m_batteryBufferDownLine);
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <UsrReadAdc+0x354>)
 80014c6:	f000 f85a 	bl	800157e <UsrLcdSendString>
}
 80014ca:	bf00      	nop
 80014cc:	372c      	adds	r7, #44	@ 0x2c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001ec 	.word	0x200001ec
 80014d8:	20000220 	.word	0x20000220
 80014dc:	20000222 	.word	0x20000222
 80014e0:	200002d4 	.word	0x200002d4
 80014e4:	200002e4 	.word	0x200002e4

080014e8 <UsrInitGpio>:


#include "usr_gpio.h"

void UsrInitGpio(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
//	GPIOA->CRL &= (uint32_t)0x00;
//	GPIOB->CRL &= (uint32_t)0x00;

//	GPIOA->CRH &= (uint32_t)0x0000;
	GPIOA->CRH |= (uint32_t)0x0BBB;
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <UsrInitGpio+0x2c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <UsrInitGpio+0x2c>)
 80014f2:	f443 633b 	orr.w	r3, r3, #2992	@ 0xbb0
 80014f6:	f043 030b 	orr.w	r3, r3, #11
 80014fa:	6053      	str	r3, [r2, #4]

//	GPIOB->CRH &= (uint32_t)0x00;
	GPIOB->CRH |= (uint32_t)0xBBB00000;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <UsrInitGpio+0x30>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <UsrInitGpio+0x30>)
 8001502:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 8001506:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 800150a:	6053      	str	r3, [r2, #4]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40010800 	.word	0x40010800
 8001518:	40010c00 	.word	0x40010c00

0800151c <UsrLcdInit>:
static bool lcdSendCommandProc(char m_command);
static bool lcdSendDataProc(char m_data);


bool UsrLcdInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    if(!lcdSendCommandProc(_USR_LCD_RETURN_HOME))
 8001520:	2002      	movs	r0, #2
 8001522:	f000 f8dd 	bl	80016e0 <lcdSendCommandProc>
 8001526:	4603      	mov	r3, r0
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <UsrLcdInit+0x1a>
    	return false;
 8001532:	2300      	movs	r3, #0
 8001534:	e021      	b.n	800157a <UsrLcdInit+0x5e>
    if(!lcdSendCommandProc(_USR_LCD_FUNCTION_SET | _USR_LCD_FUNCTION_SET_DATA_LENGTH)) // Function set -> DB5=1 and DB3=N=1  2-line display mode.      2x16 kullanılabilir
 8001536:	2028      	movs	r0, #40	@ 0x28
 8001538:	f000 f8d2 	bl	80016e0 <lcdSendCommandProc>
 800153c:	4603      	mov	r3, r0
 800153e:	f083 0301 	eor.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <UsrLcdInit+0x30>
    {	return false;}
 8001548:	2300      	movs	r3, #0
 800154a:	e016      	b.n	800157a <UsrLcdInit+0x5e>
	if(!lcdSendCommandProc(_USR_LCD_DISPLAY_ON))   // Display ON/OFF Control DB3=1 and DB2=D=1 display is turned on  // if DB1=C=1 cursor on
 800154c:	200c      	movs	r0, #12
 800154e:	f000 f8c7 	bl	80016e0 <lcdSendCommandProc>
 8001552:	4603      	mov	r3, r0
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <UsrLcdInit+0x46>
	{	return false;}
 800155e:	2300      	movs	r3, #0
 8001560:	e00b      	b.n	800157a <UsrLcdInit+0x5e>
	if(!lcdSendCommandProc(0x80))  // imleci ilk satırın basinda tut.
 8001562:	2080      	movs	r0, #128	@ 0x80
 8001564:	f000 f8bc 	bl	80016e0 <lcdSendCommandProc>
 8001568:	4603      	mov	r3, r0
 800156a:	f083 0301 	eor.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <UsrLcdInit+0x5c>
		return false;
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <UsrLcdInit+0x5e>
	return true;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}

0800157e <UsrLcdSendString>:


void UsrLcdSendString(char *m_string)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
    while(*m_string)
 8001586:	e006      	b.n	8001596 <UsrLcdSendString+0x18>
    {
        lcdSendDataProc(*m_string++);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f8e1 	bl	8001758 <lcdSendDataProc>
    while(*m_string)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f4      	bne.n	8001588 <UsrLcdSendString+0xa>
    }

}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <UsrLcdClearDisplay>:


void UsrLcdClearDisplay(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    lcdSendCommandProc(_USR_LCD_CLEAR_DISPLAY);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 f897 	bl	80016e0 <lcdSendCommandProc>
    HAL_Delay(100);
 80015b2:	2064      	movs	r0, #100	@ 0x64
 80015b4:	f000 fb14 	bl	8001be0 <HAL_Delay>
    memset(g_sendStringUpLine, 0, strlen(g_sendStringUpLine));
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <UsrLcdClearDisplay+0x4c>)
 80015ba:	f7fe fdc9 	bl	8000150 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <UsrLcdClearDisplay+0x4c>)
 80015c6:	f004 fdc7 	bl	8006158 <memset>
    memset(g_sendStringDownLine, 0, strlen(g_sendStringDownLine));
 80015ca:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <UsrLcdClearDisplay+0x50>)
 80015cc:	f7fe fdc0 	bl	8000150 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <UsrLcdClearDisplay+0x50>)
 80015d8:	f004 fdbe 	bl	8006158 <memset>
    memset(m_batteryBufferUpLine, 0, 16);
 80015dc:	2210      	movs	r2, #16
 80015de:	2100      	movs	r1, #0
 80015e0:	4806      	ldr	r0, [pc, #24]	@ (80015fc <UsrLcdClearDisplay+0x54>)
 80015e2:	f004 fdb9 	bl	8006158 <memset>
    memset(m_batteryBufferDownLine, 0, 16);
 80015e6:	2210      	movs	r2, #16
 80015e8:	2100      	movs	r1, #0
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <UsrLcdClearDisplay+0x58>)
 80015ec:	f004 fdb4 	bl	8006158 <memset>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200002b0 	.word	0x200002b0
 80015f8:	200002c0 	.word	0x200002c0
 80015fc:	200002d4 	.word	0x200002d4
 8001600:	200002e4 	.word	0x200002e4

08001604 <UsrLcdSetCursor>:


void UsrLcdSetCursor(uint8_t f_pRow, uint8_t f_pCol)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
    if (f_pRow == 0)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d107      	bne.n	800162a <UsrLcdSetCursor+0x26>
        lcdSendCommandProc(_USR_LCD_SET_DDRAM_ADDR | f_pCol);
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f85c 	bl	80016e0 <lcdSendCommandProc>
 8001628:	e00c      	b.n	8001644 <UsrLcdSetCursor+0x40>
    else if (f_pRow == 1)
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <UsrLcdSetCursor+0x3c>
        lcdSendCommandProc(_USR_LCD_SET_SUB_DDRAM_ADDR | f_pCol);
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f851 	bl	80016e0 <lcdSendCommandProc>
 800163e:	e001      	b.n	8001644 <UsrLcdSetCursor+0x40>
    else
        f_pRow = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001644:	2064      	movs	r0, #100	@ 0x64
 8001646:	f000 facb 	bl	8001be0 <HAL_Delay>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <UsrI2CScan>:


void UsrI2CScan(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
    uint16_t i = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	80fb      	strh	r3, [r7, #6]
    uint16_t ret = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	80bb      	strh	r3, [r7, #4]

    HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, startMessage, sprintf((char*)startMessage, "Starting I2C Scanning...\r\n"), 100);
 8001662:	4919      	ldr	r1, [pc, #100]	@ (80016c8 <UsrI2CScan+0x74>)
 8001664:	4819      	ldr	r0, [pc, #100]	@ (80016cc <UsrI2CScan+0x78>)
 8001666:	f004 fd57 	bl	8006118 <siprintf>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	2364      	movs	r3, #100	@ 0x64
 8001670:	4916      	ldr	r1, [pc, #88]	@ (80016cc <UsrI2CScan+0x78>)
 8001672:	4817      	ldr	r0, [pc, #92]	@ (80016d0 <UsrI2CScan+0x7c>)
 8001674:	f003 ff27 	bl	80054c6 <HAL_UART_Transmit>

    for (i = 1; i < 128; i++)
 8001678:	2301      	movs	r3, #1
 800167a:	80fb      	strh	r3, [r7, #6]
 800167c:	e01c      	b.n	80016b8 <UsrI2CScan+0x64>
    {
        ret = HAL_I2C_IsDeviceReady(&_USR_LCD_PANEL_I2C_CHANNEL, (i << 1), 2, 100);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	b299      	uxth	r1, r3
 8001684:	2364      	movs	r3, #100	@ 0x64
 8001686:	2202      	movs	r2, #2
 8001688:	4812      	ldr	r0, [pc, #72]	@ (80016d4 <UsrI2CScan+0x80>)
 800168a:	f001 fe4d 	bl	8003328 <HAL_I2C_IsDeviceReady>
 800168e:	4603      	mov	r3, r0
 8001690:	80bb      	strh	r3, [r7, #4]
        if (ret == HAL_OK)
 8001692:	88bb      	ldrh	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10c      	bne.n	80016b2 <UsrI2CScan+0x5e>
        {
            HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, data, sprintf((char*)data, "device address: 0x%X\n", i), 100);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	461a      	mov	r2, r3
 800169c:	490e      	ldr	r1, [pc, #56]	@ (80016d8 <UsrI2CScan+0x84>)
 800169e:	480f      	ldr	r0, [pc, #60]	@ (80016dc <UsrI2CScan+0x88>)
 80016a0:	f004 fd3a 	bl	8006118 <siprintf>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	2364      	movs	r3, #100	@ 0x64
 80016aa:	490c      	ldr	r1, [pc, #48]	@ (80016dc <UsrI2CScan+0x88>)
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <UsrI2CScan+0x7c>)
 80016ae:	f003 ff0a 	bl	80054c6 <HAL_UART_Transmit>
    for (i = 1; i < 128; i++)
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	3301      	adds	r3, #1
 80016b6:	80fb      	strh	r3, [r7, #6]
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80016bc:	d9df      	bls.n	800167e <UsrI2CScan+0x2a>
        }
    }
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08006ab8 	.word	0x08006ab8
 80016cc:	20000230 	.word	0x20000230
 80016d0:	20000198 	.word	0x20000198
 80016d4:	200000b0 	.word	0x200000b0
 80016d8:	08006ad4 	.word	0x08006ad4
 80016dc:	20000270 	.word	0x20000270

080016e0 <lcdSendCommandProc>:


static bool lcdSendCommandProc(char m_command)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
    char data_u = ' ';
 80016ea:	2320      	movs	r3, #32
 80016ec:	73fb      	strb	r3, [r7, #15]
    char data_l = ' ';
 80016ee:	2320      	movs	r3, #32
 80016f0:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {"0"};
 80016f2:	2330      	movs	r3, #48	@ 0x30
 80016f4:	60bb      	str	r3, [r7, #8]
	 *  Gönderilen yüksek değerlikli 4 bit temizlenir.
	 *  Ardından E = 1 yapılır ve ilk 4 bit lcd'ye gönderilir.
	 *  Ve E = 0 yapılarak, son gönderilen düşük değerli 4 bit porttan silinir.
	 */

    data_u = (m_command & 0xF0);   // cmd & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f023 030f 	bic.w	r3, r3, #15
 80016fc:	73fb      	strb	r3, [r7, #15]
    data_l = ((m_command << 4) & 0xF0); // (cmd << 4) & 0x11110000 -> 0xefgh0000 & 0x11110000 = 0xefgh0000
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0C;  // en = 1 & rs = 0    0xabcd0000 | 0x00001100 -> 0xabcd1100
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	f043 030c 	orr.w	r3, r3, #12
 800170a:	b2db      	uxtb	r3, r3
 800170c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en = 0 & rs = 0    0xabcd0000 | 0x00001000 -> 0xabcd1000
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	b2db      	uxtb	r3, r3
 8001716:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en = 1 & rs = 0    0xefgh0000 | 0x00001100 -> 0xefgh1100
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	f043 030c 	orr.w	r3, r3, #12
 800171e:	b2db      	uxtb	r3, r3
 8001720:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en = 0 & rs = 0    0xefgh0000 | 0x00001000 -> 0xefgh1000
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	b2db      	uxtb	r3, r3
 800172a:	72fb      	strb	r3, [r7, #11]

    if (HAL_OK == HAL_I2C_Master_Transmit(&_USR_LCD_PANEL_I2C_CHANNEL, (_USR_LCD_I2C_ADDRESS << 1), (uint8_t*)data_t, 4, 100))
 800172c:	f107 0208 	add.w	r2, r7, #8
 8001730:	2364      	movs	r3, #100	@ 0x64
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2304      	movs	r3, #4
 8001736:	214e      	movs	r1, #78	@ 0x4e
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <lcdSendCommandProc+0x74>)
 800173a:	f001 fcf7 	bl	800312c <HAL_I2C_Master_Transmit>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <lcdSendCommandProc+0x68>
        return true;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <lcdSendCommandProc+0x6a>
    return false;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000b0 	.word	0x200000b0

08001758 <lcdSendDataProc>:


static bool lcdSendDataProc(char m_data)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af02      	add	r7, sp, #8
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
    char data_u = ' ';
 8001762:	2320      	movs	r3, #32
 8001764:	73fb      	strb	r3, [r7, #15]
    char data_l = ' ';
 8001766:	2320      	movs	r3, #32
 8001768:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {"0"};
 800176a:	2330      	movs	r3, #48	@ 0x30
 800176c:	60bb      	str	r3, [r7, #8]

    // öncelikli ve düşük seviyeli olarak ikiye bölüyor
    data_u = (m_data & 0xF0); // data & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f023 030f 	bic.w	r3, r3, #15
 8001774:	73fb      	strb	r3, [r7, #15]
    data_l = ((m_data << 4) & 0xF0); // (data << 4) & 0x11110000 -> 0xefgh0000 & 0x11110000 = 0xefgh0000
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0D;  // en = 1 & rs = 1   0xabcd0000 | 0x00001101 -> 0xabcd1101   // yazma yani gönderme yapıyoruz
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f043 030d 	orr.w	r3, r3, #13
 8001782:	b2db      	uxtb	r3, r3
 8001784:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en = 0 & rs = 1   0xabcd0000 | 0x00001001 -> 0xabcd1001   // silme yapıyoruz
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f043 0309 	orr.w	r3, r3, #9
 800178c:	b2db      	uxtb	r3, r3
 800178e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en = 1 & rs = 1   0xefgh0000 | 0x00001100 -> 0xefgh1101   // düşük seviyeli bit gönderme
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	f043 030d 	orr.w	r3, r3, #13
 8001796:	b2db      	uxtb	r3, r3
 8001798:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en = 0 & rs = 1   0xefgh0000 | 0x00001000 -> 0xefgh1001   // sonra silme
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	f043 0309 	orr.w	r3, r3, #9
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	72fb      	strb	r3, [r7, #11]

    if (HAL_OK == HAL_I2C_Master_Transmit(&_USR_LCD_PANEL_I2C_CHANNEL, (_USR_LCD_I2C_ADDRESS << 1), (uint8_t*)data_t, 4, 100))
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2304      	movs	r3, #4
 80017ae:	214e      	movs	r1, #78	@ 0x4e
 80017b0:	4806      	ldr	r0, [pc, #24]	@ (80017cc <lcdSendDataProc+0x74>)
 80017b2:	f001 fcbb 	bl	800312c <HAL_I2C_Master_Transmit>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <lcdSendDataProc+0x68>
        return true;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <lcdSendDataProc+0x6a>
    return false;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000b0 	.word	0x200000b0

080017d0 <UsrInitPwm>:
	FREQUENCY = TIM_CLOCK / ARR              1000000 / 1000 = 1 KHz
	DUTY = (CCRx / ARR) x 100                200 / 1000 x100 = 20
*/

void UsrInitPwm(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
    // Zamanlayıcı ayarları
	TIM1->PSC = prescaler - 1;
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <UsrInitPwm+0x6c>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <UsrInitPwm+0x70>)
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = autoReload - 1;  // Auto-reload register
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <UsrInitPwm+0x74>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <UsrInitPwm+0x70>)
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1 (upcounting, TIMx_CCRx < TIMx_CNT) oc1 and oc2
	TIM1->CCMR1 |= (uint32_t)0x6464;  // pwm mode 1 and output compare enable
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <UsrInitPwm+0x70>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <UsrInitPwm+0x70>)
 80017ee:	f443 43c8 	orr.w	r3, r3, #25600	@ 0x6400
 80017f2:	f043 0364 	orr.w	r3, r3, #100	@ 0x64
 80017f6:	6193      	str	r3, [r2, #24]

	// Capture/compare register  output compare fast enable
	TIM1->CCMR2 |= (uint32_t)0x006C;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <UsrInitPwm+0x70>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <UsrInitPwm+0x70>)
 80017fe:	f043 036c 	orr.w	r3, r3, #108	@ 0x6c
 8001802:	61d3      	str	r3, [r2, #28]

    // Break and dead-time register (BDTR)
	TIM1->BDTR |= (uint32_t)0x8800;  // MOE enable and OSSI disable
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <UsrInitPwm+0x70>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <UsrInitPwm+0x70>)
 800180a:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 800180e:	6453      	str	r3, [r2, #68]	@ 0x44
//	TIM1->BDTR |= (uint32_t)0x5000;  // AOE and BKE enable

	TIM1->EGR |= (uint32_t)0x01; // update generation
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <UsrInitPwm+0x70>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <UsrInitPwm+0x70>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= (uint32_t)0x80; // auto-reload preload enable
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <UsrInitPwm+0x70>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <UsrInitPwm+0x70>)
 8001822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001826:	6013      	str	r3, [r2, #0]

    // Counter enable
	TIM1->CR1 |= (uint32_t)0x01;  // Counter enable
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <UsrInitPwm+0x70>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <UsrInitPwm+0x70>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000006 	.word	0x20000006
 8001840:	40012c00 	.word	0x40012c00
 8001844:	20000004 	.word	0x20000004

08001848 <UsrAllChannelLowLevel>:
//	UsrLcdSendString(g_sendStringDownLine);
}


void UsrAllChannelLowLevel(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	uint16_t tempValue = (autoReload * 0) / 100;
 800184e:	2300      	movs	r3, #0
 8001850:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR1 = tempValue; // Duty cycle
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <UsrAllChannelLowLevel+0x54>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2 = tempValue;
 8001858:	4a10      	ldr	r2, [pc, #64]	@ (800189c <UsrAllChannelLowLevel+0x54>)
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM1->CCR3 = tempValue;
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <UsrAllChannelLowLevel+0x54>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM1->CCER &= ~(uint32_t)0x555;
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <UsrAllChannelLowLevel+0x54>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <UsrAllChannelLowLevel+0x54>)
 800186a:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800186e:	f023 0305 	bic.w	r3, r3, #5
 8001872:	6213      	str	r3, [r2, #32]

//	UsrLcdClearDisplay();
//	UsrLcdSetCursor(0, 0);
	char *a = {"%"};
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <UsrAllChannelLowLevel+0x58>)
 8001876:	603b      	str	r3, [r7, #0]
	sprintf(g_sendStringUpLine, "ALL CH: %c%d DUTY\n", *a, 0);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	2300      	movs	r3, #0
 8001880:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <UsrAllChannelLowLevel+0x5c>)
 8001882:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <UsrAllChannelLowLevel+0x60>)
 8001884:	f004 fc48 	bl	8006118 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)g_sendStringUpLine, 16, 100);
 8001888:	2364      	movs	r3, #100	@ 0x64
 800188a:	2210      	movs	r2, #16
 800188c:	4906      	ldr	r1, [pc, #24]	@ (80018a8 <UsrAllChannelLowLevel+0x60>)
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <UsrAllChannelLowLevel+0x64>)
 8001890:	f003 fe19 	bl	80054c6 <HAL_UART_Transmit>
//	UsrLcdSendString(g_sendStringUpLine);
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	08006aec 	.word	0x08006aec
 80018a4:	08006b2c 	.word	0x08006b2c
 80018a8:	200002b0 	.word	0x200002b0
 80018ac:	20000198 	.word	0x20000198

080018b0 <UsrSystemInitial>:

char m_batteryBufferUpLine[16];
char m_batteryBufferDownLine[16];

void UsrSystemInitial(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	uint8_t tryCount = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_rxTempBuf, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	4921      	ldr	r1, [pc, #132]	@ (8001944 <UsrSystemInitial+0x94>)
 80018be:	4822      	ldr	r0, [pc, #136]	@ (8001948 <UsrSystemInitial+0x98>)
 80018c0:	f003 fe84 	bl	80055cc <HAL_UART_Receive_IT>
	UsrBatteryOnOffControl();
 80018c4:	f000 f876 	bl	80019b4 <UsrBatteryOnOffControl>

	UsrInitGpio();
 80018c8:	f7ff fe0e 	bl	80014e8 <UsrInitGpio>
	UsrTim2Init();
 80018cc:	f000 f89c 	bl	8001a08 <UsrTim2Init>
	UsrInitPwm();
 80018d0:	f7ff ff7e 	bl	80017d0 <UsrInitPwm>

	HAL_ADCEx_Calibration_Start(&hadc1);
 80018d4:	481d      	ldr	r0, [pc, #116]	@ (800194c <UsrSystemInitial+0x9c>)
 80018d6:	f000 fed1 	bl	800267c <HAL_ADCEx_Calibration_Start>

	UsrI2CScan();
 80018da:	f7ff febb 	bl	8001654 <UsrI2CScan>
	if (UsrLcdInit())
 80018de:	f7ff fe1d 	bl	800151c <UsrLcdInit>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <UsrSystemInitial+0x5a>
	{
	  UsrLcdClearDisplay();
 80018e8:	f7ff fe5e 	bl	80015a8 <UsrLcdClearDisplay>
	  UsrLcdSetCursor(0, 0);
 80018ec:	2100      	movs	r1, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fe88 	bl	8001604 <UsrLcdSetCursor>
	  sprintf(g_sendStringUpLine, "ASSAN AR-GE");
 80018f4:	4916      	ldr	r1, [pc, #88]	@ (8001950 <UsrSystemInitial+0xa0>)
 80018f6:	4817      	ldr	r0, [pc, #92]	@ (8001954 <UsrSystemInitial+0xa4>)
 80018f8:	f004 fc0e 	bl	8006118 <siprintf>
	  UsrLcdSendString(g_sendStringUpLine);
 80018fc:	4815      	ldr	r0, [pc, #84]	@ (8001954 <UsrSystemInitial+0xa4>)
 80018fe:	f7ff fe3e 	bl	800157e <UsrLcdSendString>
	  HAL_Delay(5000);
 8001902:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001906:	f000 f96b 	bl	8001be0 <HAL_Delay>
	}
	UsrAllChannelLowLevel();
 800190a:	f7ff ff9d 	bl	8001848 <UsrAllChannelLowLevel>

	HAL_UART_Transmit(&huart1, (uint8_t*)g_txBuf, sprintf((char*)g_txBuf, "While Loop was started\n"), 100);
 800190e:	4912      	ldr	r1, [pc, #72]	@ (8001958 <UsrSystemInitial+0xa8>)
 8001910:	4812      	ldr	r0, [pc, #72]	@ (800195c <UsrSystemInitial+0xac>)
 8001912:	f004 fc01 	bl	8006118 <siprintf>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	2364      	movs	r3, #100	@ 0x64
 800191c:	490f      	ldr	r1, [pc, #60]	@ (800195c <UsrSystemInitial+0xac>)
 800191e:	480a      	ldr	r0, [pc, #40]	@ (8001948 <UsrSystemInitial+0x98>)
 8001920:	f003 fdd1 	bl	80054c6 <HAL_UART_Transmit>
	UsrLcdClearDisplay();
 8001924:	f7ff fe40 	bl	80015a8 <UsrLcdClearDisplay>
start_label:;
	UsrReadAdc();
 8001928:	f7ff fc32 	bl	8001190 <UsrReadAdc>
	if (tryCount++ >= 30)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	71fa      	strb	r2, [r7, #7]
 8001932:	2b1d      	cmp	r3, #29
 8001934:	d800      	bhi.n	8001938 <UsrSystemInitial+0x88>
		goto end_label;
	else
		goto start_label;
 8001936:	e7f7      	b.n	8001928 <UsrSystemInitial+0x78>
		goto end_label;
 8001938:	bf00      	nop
end_label:;
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002f4 	.word	0x200002f4
 8001948:	20000198 	.word	0x20000198
 800194c:	20000080 	.word	0x20000080
 8001950:	08006b40 	.word	0x08006b40
 8001954:	200002b0 	.word	0x200002b0
 8001958:	08006b4c 	.word	0x08006b4c
 800195c:	20000320 	.word	0x20000320

08001960 <UsrSystemGeneral>:


void UsrSystemGeneral(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
//	UsrReadAdc();

	if ((g_batteryValuesModified[0] >= 35) && (g_batteryValuesModified[1] >= 35) && (g_batteryValuesModified[2] >= 35) && (g_batteryValuesModified[3] >= 35))
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <UsrSystemGeneral+0x50>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	2b22      	cmp	r3, #34	@ 0x22
 800196a:	d90d      	bls.n	8001988 <UsrSystemGeneral+0x28>
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <UsrSystemGeneral+0x50>)
 800196e:	885b      	ldrh	r3, [r3, #2]
 8001970:	2b22      	cmp	r3, #34	@ 0x22
 8001972:	d909      	bls.n	8001988 <UsrSystemGeneral+0x28>
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <UsrSystemGeneral+0x50>)
 8001976:	889b      	ldrh	r3, [r3, #4]
 8001978:	2b22      	cmp	r3, #34	@ 0x22
 800197a:	d905      	bls.n	8001988 <UsrSystemGeneral+0x28>
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <UsrSystemGeneral+0x50>)
 800197e:	88db      	ldrh	r3, [r3, #6]
 8001980:	2b22      	cmp	r3, #34	@ 0x22
 8001982:	d901      	bls.n	8001988 <UsrSystemGeneral+0x28>
	{
		UsrReadAdc();
 8001984:	f7ff fc04 	bl	8001190 <UsrReadAdc>
	}
	if ((g_batteryValuesModified[0] < 35) && (g_batteryValuesModified[1] < 35) && (g_batteryValuesModified[2] < 35) && (g_batteryValuesModified[3] < 35))
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <UsrSystemGeneral+0x50>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	2b22      	cmp	r3, #34	@ 0x22
 800198e:	d80d      	bhi.n	80019ac <UsrSystemGeneral+0x4c>
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <UsrSystemGeneral+0x50>)
 8001992:	885b      	ldrh	r3, [r3, #2]
 8001994:	2b22      	cmp	r3, #34	@ 0x22
 8001996:	d809      	bhi.n	80019ac <UsrSystemGeneral+0x4c>
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <UsrSystemGeneral+0x50>)
 800199a:	889b      	ldrh	r3, [r3, #4]
 800199c:	2b22      	cmp	r3, #34	@ 0x22
 800199e:	d805      	bhi.n	80019ac <UsrSystemGeneral+0x4c>
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <UsrSystemGeneral+0x50>)
 80019a2:	88db      	ldrh	r3, [r3, #6]
 80019a4:	2b22      	cmp	r3, #34	@ 0x22
 80019a6:	d801      	bhi.n	80019ac <UsrSystemGeneral+0x4c>
	{
		UsrReadAdc();
 80019a8:	f7ff fbf2 	bl	8001190 <UsrReadAdc>
//	UsrCheckBat0Bat1();
//	UsrCheckBat1Bat2();
//	UsrCheckBat2Bat3();


}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001f4 	.word	0x200001f4

080019b4 <UsrBatteryOnOffControl>:



void UsrBatteryOnOffControl(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80019b8:	2064      	movs	r0, #100	@ 0x64
 80019ba:	f000 f911 	bl	8001be0 <HAL_Delay>
	HAL_GPIO_WritePin(CHARGE_GPIO_Port, CHARGE_Pin, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2140      	movs	r1, #64	@ 0x40
 80019c2:	4802      	ldr	r0, [pc, #8]	@ (80019cc <UsrBatteryOnOffControl+0x18>)
 80019c4:	f001 fa56 	bl	8002e74 <HAL_GPIO_WritePin>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40010800 	.word	0x40010800

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4906      	ldr	r1, [pc, #24]	@ (8001a04 <__NVIC_EnableIRQ+0x34>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <UsrTim2Init>:

#include "usr_tim.h"


void UsrTim2Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	uint16_t prescalarValue = 7200 - 1;
 8001a0e:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 8001a12:	80fb      	strh	r3, [r7, #6]
	uint16_t autoReloadValue = 10000 - 1;
 8001a14:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001a18:	80bb      	strh	r3, [r7, #4]

	TIM2->PSC = prescalarValue;
 8001a1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->ARR = autoReloadValue;
 8001a22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

	TIM2->SMCR |= (uint32_t)0x56; // bit[6:4] 101: Filtered Timer Input 1 (TI1FP1)  and  bit[2:0] 10: Trigger mode
 8001a2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a34:	f043 0356 	orr.w	r3, r3, #86	@ 0x56
 8001a38:	6093      	str	r3, [r2, #8]

	TIM2->DIER |= (uint32_t)0x01;  // update interrupt enable
 8001a3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	f7ff ffc0 	bl	80019d0 <__NVIC_EnableIRQ>
	TIM2->CR1 |= (uint32_t)0x01;  // counter enable
 8001a50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_UART_RxCpltCallback>:
uint16_t g_rxIndex;
bool g_rxIntFlg;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a10      	ldr	r2, [pc, #64]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x50>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d119      	bne.n	8001aae <HAL_UART_RxCpltCallback+0x46>
	{
		g_rxBuf[g_rxIndex++] = g_rxTempBuf[0];
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <HAL_UART_RxCpltCallback+0x54>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	b291      	uxth	r1, r2
 8001a82:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_UART_RxCpltCallback+0x54>)
 8001a84:	8011      	strh	r1, [r2, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x58>)
 8001a8a:	7819      	ldrb	r1, [r3, #0]
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x5c>)
 8001a8e:	5499      	strb	r1, [r3, r2]
		if(g_rxIndex >= 40)
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_UART_RxCpltCallback+0x54>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b27      	cmp	r3, #39	@ 0x27
 8001a96:	d902      	bls.n	8001a9e <HAL_UART_RxCpltCallback+0x36>
			g_rxIndex = 0;
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_UART_RxCpltCallback+0x54>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	801a      	strh	r2, [r3, #0]
		g_rxIntFlg = true;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x60>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)g_rxTempBuf, 1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4906      	ldr	r1, [pc, #24]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x58>)
 8001aa8:	4808      	ldr	r0, [pc, #32]	@ (8001acc <HAL_UART_RxCpltCallback+0x64>)
 8001aaa:	f003 fd8f 	bl	80055cc <HAL_UART_Receive_IT>
	}
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	20000348 	.word	0x20000348
 8001ac0:	200002f4 	.word	0x200002f4
 8001ac4:	200002f8 	.word	0x200002f8
 8001ac8:	2000034a 	.word	0x2000034a
 8001acc:	20000198 	.word	0x20000198

08001ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad0:	f7ff f902 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aec:	4c09      	ldr	r4, [pc, #36]	@ (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f004 fb3b 	bl	8006174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7fe ff8f 	bl	8000a20 <main>
  bx lr
 8001b02:	4770      	bx	lr
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b0c:	08006be8 	.word	0x08006be8
  ldr r2, =_sbss
 8001b10:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b14:	20000498 	.word	0x20000498

08001b18 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <CAN1_RX1_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x28>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x28>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 ff29 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7fe ffea 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 ff41 	bl	80029ee <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 ff09 	bl	800299a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a03      	ldr	r2, [pc, #12]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	2000034c 	.word	0x2000034c

08001bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <HAL_GetTick+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	2000034c 	.word	0x2000034c

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffe0 	bl	8001bcc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010

08001c28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0be      	b.n	8001dc8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fdbe 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fcc3 	bl	80025f8 <ADC_ConversionStop_Disable>
 8001c72:	4603      	mov	r3, r0
 8001c74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8099 	bne.w	8001db6 <HAL_ADC_Init+0x18e>
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 8095 	bne.w	8001db6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c94:	f023 0302 	bic.w	r3, r3, #2
 8001c98:	f043 0202 	orr.w	r2, r3, #2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7b1b      	ldrb	r3, [r3, #12]
 8001cae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_Init+0xa2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_ADC_Init+0xa8>
 8001cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cce:	e000      	b.n	8001cd2 <HAL_ADC_Init+0xaa>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7d1b      	ldrb	r3, [r3, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d119      	bne.n	8001d14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b1b      	ldrb	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	035a      	lsls	r2, r3, #13
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	e00b      	b.n	8001d14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <HAL_ADC_Init+0x1a8>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_Init+0x126>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d104      	bne.n	8001d58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	051b      	lsls	r3, r3, #20
 8001d56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_ADC_Init+0x1ac>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d92:	e018      	b.n	8001dc6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f023 0312 	bic.w	r3, r3, #18
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001db4:	e007      	b.n	8001dc6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	ffe1f7fd 	.word	0xffe1f7fd
 8001dd4:	ff1f0efe 	.word	0xff1f0efe

08001dd8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Start+0x1a>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e098      	b.n	8001f24 <HAL_ADC_Start+0x14c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fba2 	bl	8002544 <ADC_Enable>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 8087 	bne.w	8001f1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a41      	ldr	r2, [pc, #260]	@ (8001f2c <HAL_ADC_Start+0x154>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_Start+0x5e>
 8001e2a:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <HAL_ADC_Start+0x158>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d026      	beq.n	8001e9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e60:	e01d      	b.n	8001e9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2f      	ldr	r2, [pc, #188]	@ (8001f30 <HAL_ADC_Start+0x158>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <HAL_ADC_Start+0xaa>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <HAL_ADC_Start+0x154>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10d      	bne.n	8001e9e <HAL_ADC_Start+0xc6>
 8001e82:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <HAL_ADC_Start+0x158>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f023 0206 	bic.w	r2, r3, #6
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eb6:	e002      	b.n	8001ebe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0202 	mvn.w	r2, #2
 8001ece:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ede:	d113      	bne.n	8001f08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee4:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_ADC_Start+0x154>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_ADC_Start+0x158>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	e00c      	b.n	8001f22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40012800 	.word	0x40012800
 8001f30:	40012400 	.word	0x40012400

08001f34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Stop+0x1a>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e01a      	b.n	8001f84 <HAL_ADC_Stop+0x50>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fb4e 	bl	80025f8 <ADC_ConversionStop_Disable>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fa2:	f7ff fe13 	bl	8001bcc <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	f043 0220 	orr.w	r2, r3, #32
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0d3      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d131      	bne.n	8002040 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12a      	bne.n	8002040 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fea:	e021      	b.n	8002030 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d01d      	beq.n	8002030 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_ADC_PollForConversion+0x7e>
 8001ffa:	f7ff fde7 	bl	8001bcc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d212      	bcs.n	8002030 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	f043 0204 	orr.w	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0a2      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0d6      	beq.n	8001fec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800203e:	e070      	b.n	8002122 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002040:	4b4f      	ldr	r3, [pc, #316]	@ (8002180 <HAL_ADC_PollForConversion+0x1f4>)
 8002042:	681c      	ldr	r4, [r3, #0]
 8002044:	2002      	movs	r0, #2
 8002046:	f002 f9bd 	bl	80043c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800204a:	4603      	mov	r3, r0
 800204c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <HAL_ADC_PollForConversion+0x1f8>)
 8002058:	400b      	ands	r3, r1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_ADC_PollForConversion+0x104>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68d9      	ldr	r1, [r3, #12]
 8002064:	4b48      	ldr	r3, [pc, #288]	@ (8002188 <HAL_ADC_PollForConversion+0x1fc>)
 8002066:	400b      	ands	r3, r1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d111      	bne.n	8002090 <HAL_ADC_PollForConversion+0x104>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	4b46      	ldr	r3, [pc, #280]	@ (800218c <HAL_ADC_PollForConversion+0x200>)
 8002074:	400b      	ands	r3, r1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_ADC_PollForConversion+0x100>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <HAL_ADC_PollForConversion+0x204>)
 8002082:	400b      	ands	r3, r1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_PollForConversion+0x100>
 8002088:	2314      	movs	r3, #20
 800208a:	e020      	b.n	80020ce <HAL_ADC_PollForConversion+0x142>
 800208c:	2329      	movs	r3, #41	@ 0x29
 800208e:	e01e      	b.n	80020ce <HAL_ADC_PollForConversion+0x142>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_ADC_PollForConversion+0x200>)
 8002098:	400b      	ands	r3, r1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_ADC_PollForConversion+0x120>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68d9      	ldr	r1, [r3, #12]
 80020a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_ADC_PollForConversion+0x204>)
 80020a6:	400b      	ands	r3, r1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_ADC_PollForConversion+0x13c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_ADC_PollForConversion+0x208>)
 80020b4:	400b      	ands	r3, r1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <HAL_ADC_PollForConversion+0x140>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68d9      	ldr	r1, [r3, #12]
 80020c0:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <HAL_ADC_PollForConversion+0x208>)
 80020c2:	400b      	ands	r3, r1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_PollForConversion+0x140>
 80020c8:	2354      	movs	r3, #84	@ 0x54
 80020ca:	e000      	b.n	80020ce <HAL_ADC_PollForConversion+0x142>
 80020cc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020d4:	e021      	b.n	800211a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d01a      	beq.n	8002114 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x168>
 80020e4:	f7ff fd72 	bl	8001bcc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d20f      	bcs.n	8002114 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d90b      	bls.n	8002114 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e030      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	429a      	cmp	r2, r3
 8002120:	d8d9      	bhi.n	80020d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f06f 0212 	mvn.w	r2, #18
 800212a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002142:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002146:	d115      	bne.n	8002174 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000
 8002184:	24924924 	.word	0x24924924
 8002188:	00924924 	.word	0x00924924
 800218c:	12492492 	.word	0x12492492
 8002190:	00492492 	.word	0x00492492
 8002194:	00249249 	.word	0x00249249

08002198 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03e      	beq.n	8002250 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d039      	beq.n	8002250 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002202:	d11d      	bne.n	8002240 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002208:	2b00      	cmp	r3, #0
 800220a:	d119      	bne.n	8002240 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0220 	bic.w	r2, r2, #32
 800221a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f874 	bl	800232e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f06f 0212 	mvn.w	r2, #18
 800224e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04d      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d048      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002286:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800228a:	d012      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002296:	2b00      	cmp	r3, #0
 8002298:	d125      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80022a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022a8:	d11d      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d119      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa76 	bl	80027d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 020c 	mvn.w	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f812 	bl	8002340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0201 	mvn.w	r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
	...

08002354 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x20>
 8002370:	2302      	movs	r3, #2
 8002372:	e0dc      	b.n	800252e <HAL_ADC_ConfigChannel+0x1da>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d81c      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	3b05      	subs	r3, #5
 8002396:	221f      	movs	r2, #31
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	4019      	ands	r1, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b05      	subs	r3, #5
 80023b0:	fa00 f203 	lsl.w	r2, r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80023bc:	e03c      	b.n	8002438 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d81c      	bhi.n	8002400 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b23      	subs	r3, #35	@ 0x23
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	4019      	ands	r1, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b23      	subs	r3, #35	@ 0x23
 80023f2:	fa00 f203 	lsl.w	r2, r0, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80023fe:	e01b      	b.n	8002438 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b41      	subs	r3, #65	@ 0x41
 8002412:	221f      	movs	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	4019      	ands	r1, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b41      	subs	r3, #65	@ 0x41
 800242c:	fa00 f203 	lsl.w	r2, r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d91c      	bls.n	800247a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	4019      	ands	r1, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6898      	ldr	r0, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1e      	subs	r3, #30
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	e019      	b.n	80024ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	2207      	movs	r2, #7
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4019      	ands	r1, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6898      	ldr	r0, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d003      	beq.n	80024be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d132      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_ADC_ConfigChannel+0x1e4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d125      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d126      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d11a      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_ADC_ConfigChannel+0x1e8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <HAL_ADC_ConfigChannel+0x1ec>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9a      	lsrs	r2, r3, #18
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002504:	e002      	b.n	800250c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3b01      	subs	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x1b2>
 8002512:	e007      	b.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40012400 	.word	0x40012400
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83

08002544 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d040      	beq.n	80025e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002572:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <ADC_Enable+0xac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <ADC_Enable+0xb0>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002580:	e002      	b.n	8002588 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800258e:	f7ff fb1d 	bl	8001bcc <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002594:	e01f      	b.n	80025d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002596:	f7ff fb19 	bl	8001bcc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d918      	bls.n	80025d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d011      	beq.n	80025d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e007      	b.n	80025e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d1d8      	bne.n	8002596 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000
 80025f4:	431bde83 	.word	0x431bde83

080025f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12e      	bne.n	8002670 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002622:	f7ff fad3 	bl	8001bcc <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002628:	e01b      	b.n	8002662 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800262a:	f7ff facf 	bl	8001bcc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d914      	bls.n	8002662 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10d      	bne.n	8002662 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e007      	b.n	8002672 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d0dc      	beq.n	800262a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADCEx_Calibration_Start+0x1e>
 8002696:	2302      	movs	r3, #2
 8002698:	e097      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa8 	bl	80025f8 <ADC_ConversionStop_Disable>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff49 	bl	8002544 <ADC_Enable>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 8081 	bne.w	80027c0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026d2:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_ADCEx_Calibration_Start+0x158>)
 80026d4:	681c      	ldr	r4, [r3, #0]
 80026d6:	2002      	movs	r0, #2
 80026d8:	f001 fe74 	bl	80043c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80026dc:	4603      	mov	r3, r0
 80026de:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80026e2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80026e4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80026e6:	e002      	b.n	80026ee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0208 	orr.w	r2, r2, #8
 8002702:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002704:	f7ff fa62 	bl	8001bcc <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800270a:	e01b      	b.n	8002744 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800270c:	f7ff fa5e 	bl	8001bcc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b0a      	cmp	r3, #10
 8002718:	d914      	bls.n	8002744 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	f023 0312 	bic.w	r3, r3, #18
 8002730:	f043 0210 	orr.w	r2, r3, #16
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e042      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1dc      	bne.n	800270c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0204 	orr.w	r2, r2, #4
 8002760:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002762:	f7ff fa33 	bl	8001bcc <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002768:	e01b      	b.n	80027a2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800276a:	f7ff fa2f 	bl	8001bcc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b0a      	cmp	r3, #10
 8002776:	d914      	bls.n	80027a2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	f023 0312 	bic.w	r3, r3, #18
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e013      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1dc      	bne.n	800276a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <__NVIC_SetPriorityGrouping>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4906      	ldr	r1, [pc, #24]	@ (8002884 <__NVIC_EnableIRQ+0x34>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	@ (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	@ (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7ff ff90 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff2d 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff42 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff90 	bl	80028dc <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5f 	bl	8002888 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff35 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa2 	bl	8002940 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d008      	beq.n	8002a30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e020      	b.n	8002a72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 020e 	bic.w	r2, r2, #14
 8002a3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d005      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e051      	b.n	8002b44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 020e 	bic.w	r2, r2, #14
 8002aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <HAL_DMA_Abort_IT+0xd4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d029      	beq.n	8002b1e <HAL_DMA_Abort_IT+0xa2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a21      	ldr	r2, [pc, #132]	@ (8002b54 <HAL_DMA_Abort_IT+0xd8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x9e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <HAL_DMA_Abort_IT+0xdc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01a      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x98>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_DMA_Abort_IT+0xe0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d012      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x92>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	@ (8002b60 <HAL_DMA_Abort_IT+0xe4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00a      	beq.n	8002b08 <HAL_DMA_Abort_IT+0x8c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_DMA_Abort_IT+0xe8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d102      	bne.n	8002b02 <HAL_DMA_Abort_IT+0x86>
 8002afc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b00:	e00e      	b.n	8002b20 <HAL_DMA_Abort_IT+0xa4>
 8002b02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b06:	e00b      	b.n	8002b20 <HAL_DMA_Abort_IT+0xa4>
 8002b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b0c:	e008      	b.n	8002b20 <HAL_DMA_Abort_IT+0xa4>
 8002b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b12:	e005      	b.n	8002b20 <HAL_DMA_Abort_IT+0xa4>
 8002b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b18:	e002      	b.n	8002b20 <HAL_DMA_Abort_IT+0xa4>
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_Abort_IT+0xa4>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_DMA_Abort_IT+0xec>)
 8002b22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
    } 
  }
  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40020008 	.word	0x40020008
 8002b54:	4002001c 	.word	0x4002001c
 8002b58:	40020030 	.word	0x40020030
 8002b5c:	40020044 	.word	0x40020044
 8002b60:	40020058 	.word	0x40020058
 8002b64:	4002006c 	.word	0x4002006c
 8002b68:	40020000 	.word	0x40020000

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b08b      	sub	sp, #44	@ 0x2c
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	e169      	b.n	8002e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b80:	2201      	movs	r2, #1
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	f040 8158 	bne.w	8002e4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a9a      	ldr	r2, [pc, #616]	@ (8002e0c <HAL_GPIO_Init+0x2a0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d05e      	beq.n	8002c66 <HAL_GPIO_Init+0xfa>
 8002ba8:	4a98      	ldr	r2, [pc, #608]	@ (8002e0c <HAL_GPIO_Init+0x2a0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d875      	bhi.n	8002c9a <HAL_GPIO_Init+0x12e>
 8002bae:	4a98      	ldr	r2, [pc, #608]	@ (8002e10 <HAL_GPIO_Init+0x2a4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d058      	beq.n	8002c66 <HAL_GPIO_Init+0xfa>
 8002bb4:	4a96      	ldr	r2, [pc, #600]	@ (8002e10 <HAL_GPIO_Init+0x2a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d86f      	bhi.n	8002c9a <HAL_GPIO_Init+0x12e>
 8002bba:	4a96      	ldr	r2, [pc, #600]	@ (8002e14 <HAL_GPIO_Init+0x2a8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d052      	beq.n	8002c66 <HAL_GPIO_Init+0xfa>
 8002bc0:	4a94      	ldr	r2, [pc, #592]	@ (8002e14 <HAL_GPIO_Init+0x2a8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d869      	bhi.n	8002c9a <HAL_GPIO_Init+0x12e>
 8002bc6:	4a94      	ldr	r2, [pc, #592]	@ (8002e18 <HAL_GPIO_Init+0x2ac>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04c      	beq.n	8002c66 <HAL_GPIO_Init+0xfa>
 8002bcc:	4a92      	ldr	r2, [pc, #584]	@ (8002e18 <HAL_GPIO_Init+0x2ac>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d863      	bhi.n	8002c9a <HAL_GPIO_Init+0x12e>
 8002bd2:	4a92      	ldr	r2, [pc, #584]	@ (8002e1c <HAL_GPIO_Init+0x2b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d046      	beq.n	8002c66 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a90      	ldr	r2, [pc, #576]	@ (8002e1c <HAL_GPIO_Init+0x2b0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d85d      	bhi.n	8002c9a <HAL_GPIO_Init+0x12e>
 8002bde:	2b12      	cmp	r3, #18
 8002be0:	d82a      	bhi.n	8002c38 <HAL_GPIO_Init+0xcc>
 8002be2:	2b12      	cmp	r3, #18
 8002be4:	d859      	bhi.n	8002c9a <HAL_GPIO_Init+0x12e>
 8002be6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <HAL_GPIO_Init+0x80>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c67 	.word	0x08002c67
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002c53 	.word	0x08002c53
 8002bf8:	08002c95 	.word	0x08002c95
 8002bfc:	08002c9b 	.word	0x08002c9b
 8002c00:	08002c9b 	.word	0x08002c9b
 8002c04:	08002c9b 	.word	0x08002c9b
 8002c08:	08002c9b 	.word	0x08002c9b
 8002c0c:	08002c9b 	.word	0x08002c9b
 8002c10:	08002c9b 	.word	0x08002c9b
 8002c14:	08002c9b 	.word	0x08002c9b
 8002c18:	08002c9b 	.word	0x08002c9b
 8002c1c:	08002c9b 	.word	0x08002c9b
 8002c20:	08002c9b 	.word	0x08002c9b
 8002c24:	08002c9b 	.word	0x08002c9b
 8002c28:	08002c9b 	.word	0x08002c9b
 8002c2c:	08002c9b 	.word	0x08002c9b
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c5d 	.word	0x08002c5d
 8002c38:	4a79      	ldr	r2, [pc, #484]	@ (8002e20 <HAL_GPIO_Init+0x2b4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c3e:	e02c      	b.n	8002c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	623b      	str	r3, [r7, #32]
          break;
 8002c46:	e029      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e024      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	3308      	adds	r3, #8
 8002c58:	623b      	str	r3, [r7, #32]
          break;
 8002c5a:	e01f      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	330c      	adds	r3, #12
 8002c62:	623b      	str	r3, [r7, #32]
          break;
 8002c64:	e01a      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	623b      	str	r3, [r7, #32]
          break;
 8002c72:	e013      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	611a      	str	r2, [r3, #16]
          break;
 8002c86:	e009      	b.n	8002c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	615a      	str	r2, [r3, #20]
          break;
 8002c92:	e003      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c94:	2300      	movs	r3, #0
 8002c96:	623b      	str	r3, [r7, #32]
          break;
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x130>
          break;
 8002c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2bff      	cmp	r3, #255	@ 0xff
 8002ca0:	d801      	bhi.n	8002ca6 <HAL_GPIO_Init+0x13a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	e001      	b.n	8002caa <HAL_GPIO_Init+0x13e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2bff      	cmp	r3, #255	@ 0xff
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_GPIO_Init+0x14c>
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	e002      	b.n	8002cbe <HAL_GPIO_Init+0x152>
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	3b08      	subs	r3, #8
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	210f      	movs	r1, #15
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80b1 	beq.w	8002e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cec:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <HAL_GPIO_Init+0x2b8>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a4c      	ldr	r2, [pc, #304]	@ (8002e24 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e24 <HAL_GPIO_Init+0x2b8>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d04:	4a48      	ldr	r2, [pc, #288]	@ (8002e28 <HAL_GPIO_Init+0x2bc>)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	@ (8002e2c <HAL_GPIO_Init+0x2c0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_GPIO_Init+0x1ec>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3f      	ldr	r2, [pc, #252]	@ (8002e30 <HAL_GPIO_Init+0x2c4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <HAL_GPIO_Init+0x1e8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e34 <HAL_GPIO_Init+0x2c8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <HAL_GPIO_Init+0x1e4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3d      	ldr	r2, [pc, #244]	@ (8002e38 <HAL_GPIO_Init+0x2cc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_GPIO_Init+0x1e0>
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_GPIO_Init+0x1ee>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e004      	b.n	8002d5a <HAL_GPIO_Init+0x1ee>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e002      	b.n	8002d5a <HAL_GPIO_Init+0x1ee>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_GPIO_Init+0x1ee>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5c:	f002 0203 	and.w	r2, r2, #3
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	4093      	lsls	r3, r2
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d6a:	492f      	ldr	r1, [pc, #188]	@ (8002e28 <HAL_GPIO_Init+0x2bc>)
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d84:	4b2d      	ldr	r3, [pc, #180]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	492c      	ldr	r1, [pc, #176]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4928      	ldr	r1, [pc, #160]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dac:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4922      	ldr	r1, [pc, #136]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60cb      	str	r3, [r1, #12]
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	491e      	ldr	r1, [pc, #120]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd4:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4918      	ldr	r1, [pc, #96]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4914      	ldr	r1, [pc, #80]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d021      	beq.n	8002e40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	490e      	ldr	r1, [pc, #56]	@ (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e021      	b.n	8002e4e <HAL_GPIO_Init+0x2e2>
 8002e0a:	bf00      	nop
 8002e0c:	10320000 	.word	0x10320000
 8002e10:	10310000 	.word	0x10310000
 8002e14:	10220000 	.word	0x10220000
 8002e18:	10210000 	.word	0x10210000
 8002e1c:	10120000 	.word	0x10120000
 8002e20:	10110000 	.word	0x10110000
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40010800 	.word	0x40010800
 8002e30:	40010c00 	.word	0x40010c00
 8002e34:	40011000 	.word	0x40011000
 8002e38:	40011400 	.word	0x40011400
 8002e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	4909      	ldr	r1, [pc, #36]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	3301      	adds	r3, #1
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f47f ae8e 	bne.w	8002b80 <HAL_GPIO_Init+0x14>
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	372c      	adds	r7, #44	@ 0x2c
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40010400 	.word	0x40010400

08002e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e84:	787b      	ldrb	r3, [r7, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e90:	e003      	b.n	8002e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	611a      	str	r2, [r3, #16]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e12b      	b.n	800310e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fd58 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	@ 0x24
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f08:	f001 f960 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8002f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a81      	ldr	r2, [pc, #516]	@ (8003118 <HAL_I2C_Init+0x274>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d807      	bhi.n	8002f28 <HAL_I2C_Init+0x84>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a80      	ldr	r2, [pc, #512]	@ (800311c <HAL_I2C_Init+0x278>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bf94      	ite	ls
 8002f20:	2301      	movls	r3, #1
 8002f22:	2300      	movhi	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e006      	b.n	8002f36 <HAL_I2C_Init+0x92>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003120 <HAL_I2C_Init+0x27c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0e7      	b.n	800310e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a78      	ldr	r2, [pc, #480]	@ (8003124 <HAL_I2C_Init+0x280>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9b      	lsrs	r3, r3, #18
 8002f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003118 <HAL_I2C_Init+0x274>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <HAL_I2C_Init+0xd4>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3301      	adds	r3, #1
 8002f76:	e009      	b.n	8002f8c <HAL_I2C_Init+0xe8>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a69      	ldr	r2, [pc, #420]	@ (8003128 <HAL_I2C_Init+0x284>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	495c      	ldr	r1, [pc, #368]	@ (8003118 <HAL_I2C_Init+0x274>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d819      	bhi.n	8002fe0 <HAL_I2C_Init+0x13c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e59      	subs	r1, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_I2C_Init+0x138>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e59      	subs	r1, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fda:	e051      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	e04f      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <HAL_I2C_Init+0x168>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e58      	subs	r0, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e012      	b.n	8003032 <HAL_I2C_Init+0x18e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	0099      	lsls	r1, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Init+0x196>
 8003036:	2301      	movs	r3, #1
 8003038:	e022      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10e      	bne.n	8003060 <HAL_I2C_Init+0x1bc>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1e58      	subs	r0, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	440b      	add	r3, r1
 8003050:	fbb0 f3f3 	udiv	r3, r0, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305e:	e00f      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6809      	ldr	r1, [r1, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6911      	ldr	r1, [r2, #16]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	000186a0 	.word	0x000186a0
 800311c:	001e847f 	.word	0x001e847f
 8003120:	003d08ff 	.word	0x003d08ff
 8003124:	431bde83 	.word	0x431bde83
 8003128:	10624dd3 	.word	0x10624dd3

0800312c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	460b      	mov	r3, r1
 800313a:	817b      	strh	r3, [r7, #10]
 800313c:	4613      	mov	r3, r2
 800313e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7fe fd44 	bl	8001bcc <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	f040 80e0 	bne.w	8003314 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	4970      	ldr	r1, [pc, #448]	@ (8003320 <HAL_I2C_Master_Transmit+0x1f4>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa92 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	e0d3      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Master_Transmit+0x50>
 8003178:	2302      	movs	r3, #2
 800317a:	e0cc      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d007      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2221      	movs	r2, #33	@ 0x21
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2210      	movs	r2, #16
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a50      	ldr	r2, [pc, #320]	@ (8003324 <HAL_I2C_Master_Transmit+0x1f8>)
 80031e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9ca 	bl	8003584 <I2C_MasterRequestWrite>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e08d      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003210:	e066      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fb50 	bl	80038bc <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003238:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06b      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11b      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	6a39      	ldr	r1, [r7, #32]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb47 	bl	800394c <I2C_WaitOnBTFFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e01a      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d194      	bne.n	8003212 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00100002 	.word	0x00100002
 8003324:	ffff0000 	.word	0xffff0000

08003328 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	@ 0x28
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7fe fc48 	bl	8001bcc <HAL_GetTick>
 800333c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	f040 8111 	bne.w	8003572 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	4988      	ldr	r1, [pc, #544]	@ (800357c <HAL_I2C_IsDeviceReady+0x254>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f994 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e104      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2C_IsDeviceReady+0x50>
 8003374:	2302      	movs	r3, #2
 8003376:	e0fd      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d007      	beq.n	800339e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2224      	movs	r2, #36	@ 0x24
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a70      	ldr	r2, [pc, #448]	@ (8003580 <HAL_I2C_IsDeviceReady+0x258>)
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f952 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f8:	d103      	bne.n	8003402 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0b6      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003414:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003416:	f7fe fbd9 	bl	8001bcc <HAL_GetTick>
 800341a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800344a:	e025      	b.n	8003498 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7fe fbbe 	bl	8001bcc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <HAL_I2C_IsDeviceReady+0x13a>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22a0      	movs	r2, #160	@ 0xa0
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b02      	cmp	r3, #2
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80034a2:	d005      	beq.n	80034b0 <HAL_I2C_IsDeviceReady+0x188>
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_I2C_IsDeviceReady+0x188>
 80034aa:	7dbb      	ldrb	r3, [r7, #22]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0cd      	beq.n	800344c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d129      	bne.n	800351a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2319      	movs	r3, #25
 80034f2:	2201      	movs	r2, #1
 80034f4:	4921      	ldr	r1, [pc, #132]	@ (800357c <HAL_I2C_IsDeviceReady+0x254>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8c6 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e036      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e02c      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003528:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003532:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2319      	movs	r3, #25
 800353a:	2201      	movs	r2, #1
 800353c:	490f      	ldr	r1, [pc, #60]	@ (800357c <HAL_I2C_IsDeviceReady+0x254>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f8a2 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e012      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3301      	adds	r3, #1
 8003552:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	f4ff af32 	bcc.w	80033c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00100002 	.word	0x00100002
 8003580:	ffff0000 	.word	0xffff0000

08003584 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d006      	beq.n	80035ae <I2C_MasterRequestWrite+0x2a>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d003      	beq.n	80035ae <I2C_MasterRequestWrite+0x2a>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00b      	b.n	80035d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b12      	cmp	r3, #18
 80035c6:	d107      	bne.n	80035d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f84f 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fe:	d103      	bne.n	8003608 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e035      	b.n	8003678 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003614:	d108      	bne.n	8003628 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e01b      	b.n	8003660 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030f 	orn	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <I2C_MasterRequestWrite+0xfc>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f898 	bl	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e010      	b.n	8003678 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4907      	ldr	r1, [pc, #28]	@ (8003684 <I2C_MasterRequestWrite+0x100>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f888 	bl	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	00010008 	.word	0x00010008
 8003684:	00010002 	.word	0x00010002

08003688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	e048      	b.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d044      	beq.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fe fa93 	bl	8001bcc <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d139      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	0c1b      	lsrs	r3, r3, #16
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10d      	bne.n	80036de <I2C_WaitOnFlagUntilTimeout+0x56>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	e00c      	b.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d116      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e023      	b.n	8003774 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10d      	bne.n	8003752 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	e00c      	b.n	800376c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	429a      	cmp	r2, r3
 8003770:	d093      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800378a:	e071      	b.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379a:	d123      	bne.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e067      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d041      	beq.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe f9ee 	bl	8001bcc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d136      	bne.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10c      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e00b      	b.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e021      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10c      	bne.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	43da      	mvns	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e00b      	b.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f af6d 	bne.w	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c8:	e034      	b.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f886 	bl	80039dc <I2C_IsAcknowledgeFailed>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e034      	b.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d028      	beq.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe f973 	bl	8001bcc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11d      	bne.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d016      	beq.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b80      	cmp	r3, #128	@ 0x80
 8003940:	d1c3      	bne.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003958:	e034      	b.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f83e 	bl	80039dc <I2C_IsAcknowledgeFailed>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e034      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d028      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe f92b 	bl	8001bcc <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11d      	bne.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d016      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e007      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d1c3      	bne.n	800395a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d11b      	bne.n	8003a2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e272      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8087 	beq.w	8003b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a58:	4b92      	ldr	r3, [pc, #584]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d00c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a64:	4b8f      	ldr	r3, [pc, #572]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d112      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5e>
 8003a70:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7e:	4b89      	ldr	r3, [pc, #548]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d06c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x12c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d168      	bne.n	8003b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e24c      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x76>
 8003aa0:	4b80      	ldr	r3, [pc, #512]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e02e      	b.n	8003b0c <HAL_RCC_OscConfig+0xd4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x98>
 8003ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7a      	ldr	r2, [pc, #488]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b78      	ldr	r3, [pc, #480]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a77      	ldr	r2, [pc, #476]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e01d      	b.n	8003b0c <HAL_RCC_OscConfig+0xd4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0xbc>
 8003ada:	4b72      	ldr	r3, [pc, #456]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a71      	ldr	r2, [pc, #452]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0xd4>
 8003af4:	4b6b      	ldr	r3, [pc, #428]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b68      	ldr	r3, [pc, #416]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a67      	ldr	r2, [pc, #412]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe f85a 	bl	8001bcc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe f856 	bl	8001bcc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e200      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe4>
 8003b3a:	e014      	b.n	8003b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fe f846 	bl	8001bcc <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe f842 	bl	8001bcc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1ec      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	4b53      	ldr	r3, [pc, #332]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x10c>
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d063      	beq.n	8003c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d11c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x18c>
 8003b8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d116      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b96:	4b43      	ldr	r3, [pc, #268]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_RCC_OscConfig+0x176>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e1c0      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4939      	ldr	r1, [pc, #228]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	e03a      	b.n	8003c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bcc:	4b36      	ldr	r3, [pc, #216]	@ (8003ca8 <HAL_RCC_OscConfig+0x270>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fd fffb 	bl	8001bcc <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fd fff7 	bl	8001bcc <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1a1      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4927      	ldr	r1, [pc, #156]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
 8003c0c:	e015      	b.n	8003c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <HAL_RCC_OscConfig+0x270>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd ffda 	bl	8001bcc <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1c:	f7fd ffd6 	bl	8001bcc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e180      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03a      	beq.n	8003cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d019      	beq.n	8003c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c4e:	4b17      	ldr	r3, [pc, #92]	@ (8003cac <HAL_RCC_OscConfig+0x274>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c54:	f7fd ffba 	bl	8001bcc <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5c:	f7fd ffb6 	bl	8001bcc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e160      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f000 face 	bl	800421c <RCC_Delay>
 8003c80:	e01c      	b.n	8003cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_RCC_OscConfig+0x274>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c88:	f7fd ffa0 	bl	8001bcc <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8e:	e00f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c90:	f7fd ff9c 	bl	8001bcc <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d908      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e146      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	42420000 	.word	0x42420000
 8003cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b92      	ldr	r3, [pc, #584]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e9      	bne.n	8003c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a6 	beq.w	8003e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b8b      	ldr	r3, [pc, #556]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	4b88      	ldr	r3, [pc, #544]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4a87      	ldr	r2, [pc, #540]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	61d3      	str	r3, [r2, #28]
 8003ce6:	4b85      	ldr	r3, [pc, #532]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7e      	ldr	r2, [pc, #504]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fd ff5d 	bl	8001bcc <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fd ff59 	bl	8001bcc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	@ 0x64
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e103      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	4b75      	ldr	r3, [pc, #468]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x312>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6213      	str	r3, [r2, #32]
 8003d48:	e02d      	b.n	8003da6 <HAL_RCC_OscConfig+0x36e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x334>
 8003d52:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a69      	ldr	r2, [pc, #420]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6213      	str	r3, [r2, #32]
 8003d5e:	4b67      	ldr	r3, [pc, #412]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a66      	ldr	r2, [pc, #408]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCC_OscConfig+0x36e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCC_OscConfig+0x356>
 8003d74:	4b61      	ldr	r3, [pc, #388]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a60      	ldr	r2, [pc, #384]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	f043 0304 	orr.w	r3, r3, #4
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	4b5e      	ldr	r3, [pc, #376]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4a5d      	ldr	r2, [pc, #372]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	e00b      	b.n	8003da6 <HAL_RCC_OscConfig+0x36e>
 8003d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a5a      	ldr	r2, [pc, #360]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	6213      	str	r3, [r2, #32]
 8003d9a:	4b58      	ldr	r3, [pc, #352]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4a57      	ldr	r2, [pc, #348]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d015      	beq.n	8003dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fd ff0d 	bl	8001bcc <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd ff09 	bl	8001bcc <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0b1      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ee      	beq.n	8003db6 <HAL_RCC_OscConfig+0x37e>
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fd fef7 	bl	8001bcc <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fd fef3 	bl	8001bcc <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e09b      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d105      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8087 	beq.w	8003f2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e20:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d061      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d146      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b33      	ldr	r3, [pc, #204]	@ (8003f04 <HAL_RCC_OscConfig+0x4cc>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fec7 	bl	8001bcc <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd fec3 	bl	8001bcc <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e06d      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e54:	4b29      	ldr	r3, [pc, #164]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d108      	bne.n	8003e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	4921      	ldr	r1, [pc, #132]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a19      	ldr	r1, [r3, #32]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	491b      	ldr	r1, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fe97 	bl	8001bcc <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd fe93 	bl	8001bcc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e03d      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x46a>
 8003ec0:	e035      	b.n	8003f2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fe80 	bl	8001bcc <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fe7c 	bl	8001bcc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e026      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x498>
 8003eee:	e01e      	b.n	8003f2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e019      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCC_OscConfig+0x500>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0d0      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d910      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b67      	ldr	r3, [pc, #412]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4965      	ldr	r1, [pc, #404]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b63      	ldr	r3, [pc, #396]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0b8      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a58      	ldr	r2, [pc, #352]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb0:	4b53      	ldr	r3, [pc, #332]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	494d      	ldr	r1, [pc, #308]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d040      	beq.n	800405c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d115      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e07f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b41      	ldr	r3, [pc, #260]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e073      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400a:	4b3d      	ldr	r3, [pc, #244]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e06b      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4936      	ldr	r1, [pc, #216]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800402c:	f7fd fdce 	bl	8001bcc <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fd fdca 	bl	8001bcc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e053      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b2d      	ldr	r3, [pc, #180]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d210      	bcs.n	800408c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4922      	ldr	r1, [pc, #136]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e032      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4916      	ldr	r1, [pc, #88]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040b6:	4b12      	ldr	r3, [pc, #72]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	490e      	ldr	r1, [pc, #56]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ca:	f000 f821 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	490a      	ldr	r1, [pc, #40]	@ (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <HAL_RCC_ClockConfig+0x1cc>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040e6:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_RCC_ClockConfig+0x1d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd fd2c 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40022000 	.word	0x40022000
 8004100:	40021000 	.word	0x40021000
 8004104:	08006b64 	.word	0x08006b64
 8004108:	20000000 	.word	0x20000000
 800410c:	2000000c 	.word	0x2000000c

08004110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800412a:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x30>
 800413a:	2b08      	cmp	r3, #8
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x36>
 800413e:	e027      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004142:	613b      	str	r3, [r7, #16]
      break;
 8004144:	e027      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0c9b      	lsrs	r3, r3, #18
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800415e:	4b11      	ldr	r3, [pc, #68]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	0c5b      	lsrs	r3, r3, #17
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800416a:	5cd3      	ldrb	r3, [r2, r3]
 800416c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a0d      	ldr	r2, [pc, #52]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004172:	fb03 f202 	mul.w	r2, r3, r2
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e004      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	613b      	str	r3, [r7, #16]
      break;
 800418e:	e002      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004192:	613b      	str	r3, [r7, #16]
      break;
 8004194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004196:	693b      	ldr	r3, [r7, #16]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	007a1200 	.word	0x007a1200
 80041ac:	08006b7c 	.word	0x08006b7c
 80041b0:	08006b8c 	.word	0x08006b8c
 80041b4:	003d0900 	.word	0x003d0900

080041b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041bc:	4b02      	ldr	r3, [pc, #8]	@ (80041c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20000000 	.word	0x20000000

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d0:	f7ff fff2 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	08006b74 	.word	0x08006b74

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff ffde 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	0adb      	lsrs	r3, r3, #11
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	08006b74 	.word	0x08006b74

0800421c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004224:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <RCC_Delay+0x34>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <RCC_Delay+0x38>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004238:	bf00      	nop
  }
  while (Delay --);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f9      	bne.n	8004238 <RCC_Delay+0x1c>
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	20000000 	.word	0x20000000
 8004254:	10624dd3 	.word	0x10624dd3

08004258 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d07d      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004278:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004284:	4b4c      	ldr	r3, [pc, #304]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	4a4b      	ldr	r2, [pc, #300]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428e:	61d3      	str	r3, [r2, #28]
 8004290:	4b49      	ldr	r3, [pc, #292]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	4b46      	ldr	r3, [pc, #280]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d118      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ac:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a42      	ldr	r2, [pc, #264]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b8:	f7fd fc88 	bl	8001bcc <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	e008      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c0:	f7fd fc84 	bl	8001bcc <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e06d      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042de:	4b36      	ldr	r3, [pc, #216]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02e      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d027      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042fc:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004304:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004306:	4b2e      	ldr	r3, [pc, #184]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800430c:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004312:	4a29      	ldr	r2, [pc, #164]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fd fc53 	bl	8001bcc <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fd fc4f 	bl	8001bcc <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e036      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ee      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4917      	ldr	r1, [pc, #92]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	4313      	orrs	r3, r2
 800435c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437c:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	490b      	ldr	r1, [pc, #44]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439a:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4904      	ldr	r1, [pc, #16]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40007000 	.word	0x40007000
 80043c0:	42420440 	.word	0x42420440

080043c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	f200 808a 	bhi.w	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d045      	beq.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d075      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043fa:	e082      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80043fc:	4b46      	ldr	r3, [pc, #280]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004402:	4b45      	ldr	r3, [pc, #276]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d07b      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0c9b      	lsrs	r3, r3, #18
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	4a41      	ldr	r2, [pc, #260]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004418:	5cd3      	ldrb	r3, [r2, r3]
 800441a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d015      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004426:	4b3c      	ldr	r3, [pc, #240]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	0c5b      	lsrs	r3, r3, #17
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	4a3b      	ldr	r2, [pc, #236]	@ (8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004432:	5cd3      	ldrb	r3, [r2, r3]
 8004434:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004440:	4a38      	ldr	r2, [pc, #224]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fbb2 f2f3 	udiv	r2, r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e004      	b.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4a34      	ldr	r2, [pc, #208]	@ (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800445c:	4b2e      	ldr	r3, [pc, #184]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004468:	d102      	bne.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	61bb      	str	r3, [r7, #24]
      break;
 800446e:	e04a      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4a2d      	ldr	r2, [pc, #180]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	61bb      	str	r3, [r7, #24]
      break;
 800447e:	e042      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004480:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004490:	d108      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800449c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e01f      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ae:	d109      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80044b0:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e00f      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ce:	d11c      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044d0:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80044dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80044e0:	61bb      	str	r3, [r7, #24]
      break;
 80044e2:	e012      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044e4:	e011      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044e6:	f7ff fe85 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0b9b      	lsrs	r3, r3, #14
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	61bb      	str	r3, [r7, #24]
      break;
 8004500:	e004      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800450a:	bf00      	nop
    }
  }
  return (frequency);
 800450c:	69bb      	ldr	r3, [r7, #24]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	08006b90 	.word	0x08006b90
 8004520:	08006ba0 	.word	0x08006ba0
 8004524:	007a1200 	.word	0x007a1200
 8004528:	003d0900 	.word	0x003d0900
 800452c:	aaaaaaab 	.word	0xaaaaaaab

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e041      	b.n	80045c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fce0 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fb86 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e041      	b.n	8004664 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f839 	bl	800466c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f000 fb37 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b02      	cmp	r3, #2
 8004692:	d122      	bne.n	80046da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d11b      	bne.n	80046da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f06f 0202 	mvn.w	r2, #2
 80046aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fac2 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 80046c6:	e005      	b.n	80046d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fab5 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fac4 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d122      	bne.n	800472e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d11b      	bne.n	800472e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0204 	mvn.w	r2, #4
 80046fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa98 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 800471a:	e005      	b.n	8004728 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa8b 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa9a 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d122      	bne.n	8004782 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11b      	bne.n	8004782 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f06f 0208 	mvn.w	r2, #8
 8004752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2204      	movs	r2, #4
 8004758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa6e 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 800476e:	e005      	b.n	800477c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fa61 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa70 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b10      	cmp	r3, #16
 800478e:	d122      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b10      	cmp	r3, #16
 800479c:	d11b      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0210 	mvn.w	r2, #16
 80047a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2208      	movs	r2, #8
 80047ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fa44 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 80047c2:	e005      	b.n	80047d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fa37 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa46 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10e      	bne.n	8004802 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f06f 0201 	mvn.w	r2, #1
 80047fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fa12 	bl	8004c26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480c:	2b80      	cmp	r3, #128	@ 0x80
 800480e:	d10e      	bne.n	800482e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d107      	bne.n	800482e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fdf3 	bl	8005414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b40      	cmp	r3, #64	@ 0x40
 800483a:	d10e      	bne.n	800485a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004846:	2b40      	cmp	r3, #64	@ 0x40
 8004848:	d107      	bne.n	800485a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fa0a 	bl	8004c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b20      	cmp	r3, #32
 8004866:	d10e      	bne.n	8004886 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d107      	bne.n	8004886 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0220 	mvn.w	r2, #32
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fdbe 	bl	8005402 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0ae      	b.n	8004a0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	f200 809f 	bhi.w	80049fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	080049fd 	.word	0x080049fd
 80048cc:	080049fd 	.word	0x080049fd
 80048d0:	080049fd 	.word	0x080049fd
 80048d4:	08004939 	.word	0x08004939
 80048d8:	080049fd 	.word	0x080049fd
 80048dc:	080049fd 	.word	0x080049fd
 80048e0:	080049fd 	.word	0x080049fd
 80048e4:	0800497b 	.word	0x0800497b
 80048e8:	080049fd 	.word	0x080049fd
 80048ec:	080049fd 	.word	0x080049fd
 80048f0:	080049fd 	.word	0x080049fd
 80048f4:	080049bb 	.word	0x080049bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fa20 	bl	8004d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0204 	bic.w	r2, r2, #4
 8004922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6999      	ldr	r1, [r3, #24]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	619a      	str	r2, [r3, #24]
      break;
 8004936:	e064      	b.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fa66 	bl	8004e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	021a      	lsls	r2, r3, #8
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	619a      	str	r2, [r3, #24]
      break;
 8004978:	e043      	b.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 faaf 	bl	8004ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0208 	orr.w	r2, r2, #8
 8004994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0204 	bic.w	r2, r2, #4
 80049a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69d9      	ldr	r1, [r3, #28]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	61da      	str	r2, [r3, #28]
      break;
 80049b8:	e023      	b.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 faf9 	bl	8004fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	021a      	lsls	r2, r3, #8
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	61da      	str	r2, [r3, #28]
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_TIM_ConfigClockSource+0x1c>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e0b4      	b.n	8004b9a <HAL_TIM_ConfigClockSource+0x186>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a68:	d03e      	beq.n	8004ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a6e:	f200 8087 	bhi.w	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a76:	f000 8086 	beq.w	8004b86 <HAL_TIM_ConfigClockSource+0x172>
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a7e:	d87f      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b70      	cmp	r3, #112	@ 0x70
 8004a82:	d01a      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0xa6>
 8004a84:	2b70      	cmp	r3, #112	@ 0x70
 8004a86:	d87b      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b60      	cmp	r3, #96	@ 0x60
 8004a8a:	d050      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x11a>
 8004a8c:	2b60      	cmp	r3, #96	@ 0x60
 8004a8e:	d877      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b50      	cmp	r3, #80	@ 0x50
 8004a92:	d03c      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0xfa>
 8004a94:	2b50      	cmp	r3, #80	@ 0x50
 8004a96:	d873      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b40      	cmp	r3, #64	@ 0x40
 8004a9a:	d058      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x13a>
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d86f      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b30      	cmp	r3, #48	@ 0x30
 8004aa2:	d064      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b30      	cmp	r3, #48	@ 0x30
 8004aa6:	d86b      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d060      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x15a>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d867      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d05c      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d05a      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ab8:	e062      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aca:	f000 fbcb 	bl	8005264 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	609a      	str	r2, [r3, #8]
      break;
 8004ae6:	e04f      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004af8:	f000 fbb4 	bl	8005264 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b0a:	609a      	str	r2, [r3, #8]
      break;
 8004b0c:	e03c      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 fb2b 	bl	8005176 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2150      	movs	r1, #80	@ 0x50
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb82 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e02c      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 fb49 	bl	80051d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2160      	movs	r1, #96	@ 0x60
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fb72 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e01c      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f000 fb0b 	bl	8005176 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2140      	movs	r1, #64	@ 0x40
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fb62 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004b6c:	e00c      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f000 fb59 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004b7e:	e003      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
      break;
 8004b84:	e000      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e031      	b.n	8004c1e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fa41 	bl	8005054 <TIM_SlaveTimer_SetConfig>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e018      	b.n	8004c1e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c0a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a29      	ldr	r2, [pc, #164]	@ (8004d38 <TIM_Base_SetConfig+0xb8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x30>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x30>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a26      	ldr	r2, [pc, #152]	@ (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x30>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a25      	ldr	r2, [pc, #148]	@ (8004d40 <TIM_Base_SetConfig+0xc0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d38 <TIM_Base_SetConfig+0xb8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x62>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0x62>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	@ (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0x62>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <TIM_Base_SetConfig+0xc0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d108      	bne.n	8004cf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a07      	ldr	r2, [pc, #28]	@ (8004d38 <TIM_Base_SetConfig+0xb8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800

08004d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f023 0201 	bic.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 0302 	bic.w	r3, r3, #2
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <TIM_OC1_SetConfig+0xc8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10c      	bne.n	8004dba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0308 	bic.w	r3, r3, #8
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	@ (8004e0c <TIM_OC1_SetConfig+0xc8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d111      	bne.n	8004de6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	621a      	str	r2, [r3, #32]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00

08004e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f023 0210 	bic.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0320 	bic.w	r3, r3, #32
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <TIM_OC2_SetConfig+0xd0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <TIM_OC2_SetConfig+0xd0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d113      	bne.n	8004ebc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	40012c00 	.word	0x40012c00

08004ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <TIM_OC3_SetConfig+0xd0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10d      	bne.n	8004f5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a14      	ldr	r2, [pc, #80]	@ (8004fb4 <TIM_OC3_SetConfig+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d113      	bne.n	8004f8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40012c00 	.word	0x40012c00

08004fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	031b      	lsls	r3, r3, #12
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0f      	ldr	r2, [pc, #60]	@ (8005050 <TIM_OC4_SetConfig+0x98>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d109      	bne.n	800502c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800501e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	019b      	lsls	r3, r3, #6
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	40012c00 	.word	0x40012c00

08005054 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005070:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b70      	cmp	r3, #112	@ 0x70
 800509c:	d01a      	beq.n	80050d4 <TIM_SlaveTimer_SetConfig+0x80>
 800509e:	2b70      	cmp	r3, #112	@ 0x70
 80050a0:	d860      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050a2:	2b60      	cmp	r3, #96	@ 0x60
 80050a4:	d054      	beq.n	8005150 <TIM_SlaveTimer_SetConfig+0xfc>
 80050a6:	2b60      	cmp	r3, #96	@ 0x60
 80050a8:	d85c      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050aa:	2b50      	cmp	r3, #80	@ 0x50
 80050ac:	d046      	beq.n	800513c <TIM_SlaveTimer_SetConfig+0xe8>
 80050ae:	2b50      	cmp	r3, #80	@ 0x50
 80050b0:	d858      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050b2:	2b40      	cmp	r3, #64	@ 0x40
 80050b4:	d019      	beq.n	80050ea <TIM_SlaveTimer_SetConfig+0x96>
 80050b6:	2b40      	cmp	r3, #64	@ 0x40
 80050b8:	d854      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050ba:	2b30      	cmp	r3, #48	@ 0x30
 80050bc:	d055      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050be:	2b30      	cmp	r3, #48	@ 0x30
 80050c0:	d850      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d051      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d84c      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d04d      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d04b      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050d2:	e047      	b.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	f000 f8be 	bl	8005264 <TIM_ETR_SetConfig>
      break;
 80050e8:	e040      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d101      	bne.n	80050f6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e03b      	b.n	800516e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
      break;
 800513a:	e017      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005148:	461a      	mov	r2, r3
 800514a:	f000 f814 	bl	8005176 <TIM_TI1_ConfigInputStage>
      break;
 800514e:	e00d      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800515c:	461a      	mov	r2, r3
 800515e:	f000 f838 	bl	80051d2 <TIM_TI2_ConfigInputStage>
      break;
 8005162:	e003      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
      break;
 8005168:	e000      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800516a:	bf00      	nop
  }

  return status;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f023 0201 	bic.w	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 030a 	bic.w	r3, r3, #10
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b087      	sub	sp, #28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f023 0210 	bic.w	r2, r3, #16
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800520e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	f043 0307 	orr.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800527e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	021a      	lsls	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	431a      	orrs	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4313      	orrs	r3, r2
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e046      	b.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d009      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a10      	ldr	r2, [pc, #64]	@ (800535c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d10c      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	4313      	orrs	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800

08005360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005378:	2302      	movs	r3, #2
 800537a:	e03d      	b.n	80053f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e042      	b.n	80054be <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fb fe15 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2224      	movs	r2, #36	@ 0x24
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005468:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fdc6 	bl	8005ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800547e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800548e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800549e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b08a      	sub	sp, #40	@ 0x28
 80054ca:	af02      	add	r7, sp, #8
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d16d      	bne.n	80055c2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_Transmit+0x2c>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e066      	b.n	80055c4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2221      	movs	r2, #33	@ 0x21
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005504:	f7fc fb62 	bl	8001bcc <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d108      	bne.n	8005532 <HAL_UART_Transmit+0x6c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e003      	b.n	800553a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800553a:	e02a      	b.n	8005592 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fb15 	bl	8005b76 <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e036      	b.n	80055c4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800556a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	3302      	adds	r3, #2
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e007      	b.n	8005584 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	781a      	ldrb	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	3301      	adds	r3, #1
 8005582:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1cf      	bne.n	800553c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2140      	movs	r1, #64	@ 0x40
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fae5 	bl	8005b76 <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e006      	b.n	80055c4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d112      	bne.n	800560c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_UART_Receive_IT+0x26>
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e00b      	b.n	800560e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	461a      	mov	r2, r3
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fb25 	bl	8005c52 <UART_Start_Receive_IT>
 8005608:	4603      	mov	r3, r0
 800560a:	e000      	b.n	800560e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b0ba      	sub	sp, #232	@ 0xe8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_UART_IRQHandler+0x66>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc01 	bl	8005e7e <UART_Receive_IT>
      return;
 800567c:	e25b      	b.n	8005b36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800567e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80de 	beq.w	8005844 <HAL_UART_IRQHandler+0x22c>
 8005688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005698:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80d1 	beq.w	8005844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <HAL_UART_IRQHandler+0xae>
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <HAL_UART_IRQHandler+0xd2>
 80056d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f043 0202 	orr.w	r2, r3, #2
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0xf6>
 80056f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f043 0204 	orr.w	r2, r3, #4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d011      	beq.n	800573e <HAL_UART_IRQHandler+0x126>
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d105      	bne.n	8005732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	f043 0208 	orr.w	r2, r3, #8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 81f2 	beq.w	8005b2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_UART_IRQHandler+0x14e>
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fb8c 	bl	8005e7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <HAL_UART_IRQHandler+0x17a>
 800578a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d04f      	beq.n	8005832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa96 	bl	8005cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d041      	beq.n	800582a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3314      	adds	r3, #20
 80057ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1d9      	bne.n	80057a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d013      	beq.n	8005822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	4a7e      	ldr	r2, [pc, #504]	@ (80059f8 <HAL_UART_IRQHandler+0x3e0>)
 8005800:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	4618      	mov	r0, r3
 8005808:	f7fd f938 	bl	8002a7c <HAL_DMA_Abort_IT>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e00e      	b.n	8005840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f993 	bl	8005b4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e00a      	b.n	8005840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f98f 	bl	8005b4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e006      	b.n	8005840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f98b 	bl	8005b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800583e:	e175      	b.n	8005b2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	bf00      	nop
    return;
 8005842:	e173      	b.n	8005b2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	f040 814f 	bne.w	8005aec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8148 	beq.w	8005aec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8141 	beq.w	8005aec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80b6 	beq.w	80059fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800589c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8145 	beq.w	8005b30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ae:	429a      	cmp	r2, r3
 80058b0:	f080 813e 	bcs.w	8005b30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	f000 8088 	beq.w	80059d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005900:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800590c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1d9      	bne.n	80058c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005938:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800593c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005940:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800594a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e1      	bne.n	8005914 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3314      	adds	r3, #20
 8005970:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005974:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005976:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800597a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e3      	bne.n	8005950 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a8:	f023 0310 	bic.w	r3, r3, #16
 80059ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80059ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fd f817 	bl	8002a06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8b6 	bl	8005b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059f4:	e09c      	b.n	8005b30 <HAL_UART_IRQHandler+0x518>
 80059f6:	bf00      	nop
 80059f8:	08005d89 	.word	0x08005d89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 808e 	beq.w	8005b34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8089 	beq.w	8005b34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e3      	bne.n	8005a22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	623b      	str	r3, [r7, #32]
   return(result);
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e3      	bne.n	8005a5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0310 	bic.w	r3, r3, #16
 8005ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ac4:	61fa      	str	r2, [r7, #28]
 8005ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	69b9      	ldr	r1, [r7, #24]
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e3      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f83b 	bl	8005b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aea:	e023      	b.n	8005b34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_UART_IRQHandler+0x4f4>
 8005af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f953 	bl	8005db0 <UART_Transmit_IT>
    return;
 8005b0a:	e014      	b.n	8005b36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00e      	beq.n	8005b36 <HAL_UART_IRQHandler+0x51e>
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f992 	bl	8005e4e <UART_EndTransmit_IT>
    return;
 8005b2a:	e004      	b.n	8005b36 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b2c:	bf00      	nop
 8005b2e:	e002      	b.n	8005b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b34:	bf00      	nop
  }
}
 8005b36:	37e8      	adds	r7, #232	@ 0xe8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b090      	sub	sp, #64	@ 0x40
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	4613      	mov	r3, r2
 8005b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b86:	e050      	b.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d04c      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b96:	f7fc f819 	bl	8001bcc <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d241      	bcs.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005bc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8005bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e5      	bne.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bfa:	623a      	str	r2, [r7, #32]
 8005bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	69f9      	ldr	r1, [r7, #28]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00f      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d09f      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3740      	adds	r7, #64	@ 0x40
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2222      	movs	r2, #34	@ 0x22
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c96:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0220 	orr.w	r2, r2, #32
 8005cb6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b095      	sub	sp, #84	@ 0x54
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cec:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e5      	bne.n	8005ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e5      	bne.n	8005d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d119      	bne.n	8005d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0310 	bic.w	r3, r3, #16
 8005d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d5c:	61ba      	str	r2, [r7, #24]
 8005d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6979      	ldr	r1, [r7, #20]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e5      	bne.n	8005d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d7e:	bf00      	nop
 8005d80:	3754      	adds	r7, #84	@ 0x54
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff fed3 	bl	8005b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b21      	cmp	r3, #33	@ 0x21
 8005dc2:	d13e      	bne.n	8005e42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dcc:	d114      	bne.n	8005df8 <UART_Transmit_IT+0x48>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d110      	bne.n	8005df8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	1c9a      	adds	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]
 8005df6:	e008      	b.n	8005e0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6211      	str	r1, [r2, #32]
 8005e02:	781a      	ldrb	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4619      	mov	r1, r3
 8005e18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10f      	bne.n	8005e3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fe64 	bl	8005b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b08c      	sub	sp, #48	@ 0x30
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b22      	cmp	r3, #34	@ 0x22
 8005e90:	f040 80ae 	bne.w	8005ff0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9c:	d117      	bne.n	8005ece <UART_Receive_IT+0x50>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d113      	bne.n	8005ece <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	1c9a      	adds	r2, r3, #2
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ecc:	e026      	b.n	8005f1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee0:	d007      	beq.n	8005ef2 <UART_Receive_IT+0x74>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <UART_Receive_IT+0x82>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e008      	b.n	8005f12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d15d      	bne.n	8005fec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0220 	bic.w	r2, r2, #32
 8005f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d135      	bne.n	8005fe2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f023 0310 	bic.w	r3, r3, #16
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9c:	623a      	str	r2, [r7, #32]
 8005f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d10a      	bne.n	8005fd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fdc0 	bl	8005b60 <HAL_UARTEx_RxEventCallback>
 8005fe0:	e002      	b.n	8005fe8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb fd40 	bl	8001a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e002      	b.n	8005ff2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3730      	adds	r7, #48	@ 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006036:	f023 030c 	bic.w	r3, r3, #12
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	430b      	orrs	r3, r1
 8006042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2c      	ldr	r2, [pc, #176]	@ (8006110 <UART_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d103      	bne.n	800606c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fe f8c6 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	e002      	b.n	8006072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fe f8ae 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8006070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009a      	lsls	r2, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <UART_SetConfig+0x118>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	0119      	lsls	r1, r3, #4
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009a      	lsls	r2, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006114 <UART_SetConfig+0x118>)
 80060aa:	fba3 0302 	umull	r0, r3, r3, r2
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	2064      	movs	r0, #100	@ 0x64
 80060b2:	fb00 f303 	mul.w	r3, r0, r3
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	3332      	adds	r3, #50	@ 0x32
 80060bc:	4a15      	ldr	r2, [pc, #84]	@ (8006114 <UART_SetConfig+0x118>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060c8:	4419      	add	r1, r3
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009a      	lsls	r2, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006114 <UART_SetConfig+0x118>)
 80060e2:	fba3 0302 	umull	r0, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	2064      	movs	r0, #100	@ 0x64
 80060ea:	fb00 f303 	mul.w	r3, r0, r3
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	3332      	adds	r3, #50	@ 0x32
 80060f4:	4a07      	ldr	r2, [pc, #28]	@ (8006114 <UART_SetConfig+0x118>)
 80060f6:	fba2 2303 	umull	r2, r3, r2, r3
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	f003 020f 	and.w	r2, r3, #15
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	440a      	add	r2, r1
 8006106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40013800 	.word	0x40013800
 8006114:	51eb851f 	.word	0x51eb851f

08006118 <siprintf>:
 8006118:	b40e      	push	{r1, r2, r3}
 800611a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800611e:	b500      	push	{lr}
 8006120:	b09c      	sub	sp, #112	@ 0x70
 8006122:	ab1d      	add	r3, sp, #116	@ 0x74
 8006124:	9002      	str	r0, [sp, #8]
 8006126:	9006      	str	r0, [sp, #24]
 8006128:	9107      	str	r1, [sp, #28]
 800612a:	9104      	str	r1, [sp, #16]
 800612c:	4808      	ldr	r0, [pc, #32]	@ (8006150 <siprintf+0x38>)
 800612e:	4909      	ldr	r1, [pc, #36]	@ (8006154 <siprintf+0x3c>)
 8006130:	f853 2b04 	ldr.w	r2, [r3], #4
 8006134:	9105      	str	r1, [sp, #20]
 8006136:	6800      	ldr	r0, [r0, #0]
 8006138:	a902      	add	r1, sp, #8
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f000 f992 	bl	8006464 <_svfiprintf_r>
 8006140:	2200      	movs	r2, #0
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	b01c      	add	sp, #112	@ 0x70
 8006148:	f85d eb04 	ldr.w	lr, [sp], #4
 800614c:	b003      	add	sp, #12
 800614e:	4770      	bx	lr
 8006150:	20000014 	.word	0x20000014
 8006154:	ffff0208 	.word	0xffff0208

08006158 <memset>:
 8006158:	4603      	mov	r3, r0
 800615a:	4402      	add	r2, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	d100      	bne.n	8006162 <memset+0xa>
 8006160:	4770      	bx	lr
 8006162:	f803 1b01 	strb.w	r1, [r3], #1
 8006166:	e7f9      	b.n	800615c <memset+0x4>

08006168 <__errno>:
 8006168:	4b01      	ldr	r3, [pc, #4]	@ (8006170 <__errno+0x8>)
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000014 	.word	0x20000014

08006174 <__libc_init_array>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	2600      	movs	r6, #0
 8006178:	4d0c      	ldr	r5, [pc, #48]	@ (80061ac <__libc_init_array+0x38>)
 800617a:	4c0d      	ldr	r4, [pc, #52]	@ (80061b0 <__libc_init_array+0x3c>)
 800617c:	1b64      	subs	r4, r4, r5
 800617e:	10a4      	asrs	r4, r4, #2
 8006180:	42a6      	cmp	r6, r4
 8006182:	d109      	bne.n	8006198 <__libc_init_array+0x24>
 8006184:	f000 fc78 	bl	8006a78 <_init>
 8006188:	2600      	movs	r6, #0
 800618a:	4d0a      	ldr	r5, [pc, #40]	@ (80061b4 <__libc_init_array+0x40>)
 800618c:	4c0a      	ldr	r4, [pc, #40]	@ (80061b8 <__libc_init_array+0x44>)
 800618e:	1b64      	subs	r4, r4, r5
 8006190:	10a4      	asrs	r4, r4, #2
 8006192:	42a6      	cmp	r6, r4
 8006194:	d105      	bne.n	80061a2 <__libc_init_array+0x2e>
 8006196:	bd70      	pop	{r4, r5, r6, pc}
 8006198:	f855 3b04 	ldr.w	r3, [r5], #4
 800619c:	4798      	blx	r3
 800619e:	3601      	adds	r6, #1
 80061a0:	e7ee      	b.n	8006180 <__libc_init_array+0xc>
 80061a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a6:	4798      	blx	r3
 80061a8:	3601      	adds	r6, #1
 80061aa:	e7f2      	b.n	8006192 <__libc_init_array+0x1e>
 80061ac:	08006be0 	.word	0x08006be0
 80061b0:	08006be0 	.word	0x08006be0
 80061b4:	08006be0 	.word	0x08006be0
 80061b8:	08006be4 	.word	0x08006be4

080061bc <__retarget_lock_acquire_recursive>:
 80061bc:	4770      	bx	lr

080061be <__retarget_lock_release_recursive>:
 80061be:	4770      	bx	lr

080061c0 <_free_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4605      	mov	r5, r0
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d040      	beq.n	800624a <_free_r+0x8a>
 80061c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061cc:	1f0c      	subs	r4, r1, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfb8      	it	lt
 80061d2:	18e4      	addlt	r4, r4, r3
 80061d4:	f000 f8de 	bl	8006394 <__malloc_lock>
 80061d8:	4a1c      	ldr	r2, [pc, #112]	@ (800624c <_free_r+0x8c>)
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	b933      	cbnz	r3, 80061ec <_free_r+0x2c>
 80061de:	6063      	str	r3, [r4, #4]
 80061e0:	6014      	str	r4, [r2, #0]
 80061e2:	4628      	mov	r0, r5
 80061e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e8:	f000 b8da 	b.w	80063a0 <__malloc_unlock>
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d908      	bls.n	8006202 <_free_r+0x42>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	1821      	adds	r1, r4, r0
 80061f4:	428b      	cmp	r3, r1
 80061f6:	bf01      	itttt	eq
 80061f8:	6819      	ldreq	r1, [r3, #0]
 80061fa:	685b      	ldreq	r3, [r3, #4]
 80061fc:	1809      	addeq	r1, r1, r0
 80061fe:	6021      	streq	r1, [r4, #0]
 8006200:	e7ed      	b.n	80061de <_free_r+0x1e>
 8006202:	461a      	mov	r2, r3
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b10b      	cbz	r3, 800620c <_free_r+0x4c>
 8006208:	42a3      	cmp	r3, r4
 800620a:	d9fa      	bls.n	8006202 <_free_r+0x42>
 800620c:	6811      	ldr	r1, [r2, #0]
 800620e:	1850      	adds	r0, r2, r1
 8006210:	42a0      	cmp	r0, r4
 8006212:	d10b      	bne.n	800622c <_free_r+0x6c>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	4401      	add	r1, r0
 8006218:	1850      	adds	r0, r2, r1
 800621a:	4283      	cmp	r3, r0
 800621c:	6011      	str	r1, [r2, #0]
 800621e:	d1e0      	bne.n	80061e2 <_free_r+0x22>
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4408      	add	r0, r1
 8006226:	6010      	str	r0, [r2, #0]
 8006228:	6053      	str	r3, [r2, #4]
 800622a:	e7da      	b.n	80061e2 <_free_r+0x22>
 800622c:	d902      	bls.n	8006234 <_free_r+0x74>
 800622e:	230c      	movs	r3, #12
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	e7d6      	b.n	80061e2 <_free_r+0x22>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	1821      	adds	r1, r4, r0
 8006238:	428b      	cmp	r3, r1
 800623a:	bf01      	itttt	eq
 800623c:	6819      	ldreq	r1, [r3, #0]
 800623e:	685b      	ldreq	r3, [r3, #4]
 8006240:	1809      	addeq	r1, r1, r0
 8006242:	6021      	streq	r1, [r4, #0]
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	6054      	str	r4, [r2, #4]
 8006248:	e7cb      	b.n	80061e2 <_free_r+0x22>
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000494 	.word	0x20000494

08006250 <sbrk_aligned>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4e0f      	ldr	r6, [pc, #60]	@ (8006290 <sbrk_aligned+0x40>)
 8006254:	460c      	mov	r4, r1
 8006256:	6831      	ldr	r1, [r6, #0]
 8006258:	4605      	mov	r5, r0
 800625a:	b911      	cbnz	r1, 8006262 <sbrk_aligned+0x12>
 800625c:	f000 fbaa 	bl	80069b4 <_sbrk_r>
 8006260:	6030      	str	r0, [r6, #0]
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f000 fba5 	bl	80069b4 <_sbrk_r>
 800626a:	1c43      	adds	r3, r0, #1
 800626c:	d103      	bne.n	8006276 <sbrk_aligned+0x26>
 800626e:	f04f 34ff 	mov.w	r4, #4294967295
 8006272:	4620      	mov	r0, r4
 8006274:	bd70      	pop	{r4, r5, r6, pc}
 8006276:	1cc4      	adds	r4, r0, #3
 8006278:	f024 0403 	bic.w	r4, r4, #3
 800627c:	42a0      	cmp	r0, r4
 800627e:	d0f8      	beq.n	8006272 <sbrk_aligned+0x22>
 8006280:	1a21      	subs	r1, r4, r0
 8006282:	4628      	mov	r0, r5
 8006284:	f000 fb96 	bl	80069b4 <_sbrk_r>
 8006288:	3001      	adds	r0, #1
 800628a:	d1f2      	bne.n	8006272 <sbrk_aligned+0x22>
 800628c:	e7ef      	b.n	800626e <sbrk_aligned+0x1e>
 800628e:	bf00      	nop
 8006290:	20000490 	.word	0x20000490

08006294 <_malloc_r>:
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006298:	1ccd      	adds	r5, r1, #3
 800629a:	f025 0503 	bic.w	r5, r5, #3
 800629e:	3508      	adds	r5, #8
 80062a0:	2d0c      	cmp	r5, #12
 80062a2:	bf38      	it	cc
 80062a4:	250c      	movcc	r5, #12
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	4606      	mov	r6, r0
 80062aa:	db01      	blt.n	80062b0 <_malloc_r+0x1c>
 80062ac:	42a9      	cmp	r1, r5
 80062ae:	d904      	bls.n	80062ba <_malloc_r+0x26>
 80062b0:	230c      	movs	r3, #12
 80062b2:	6033      	str	r3, [r6, #0]
 80062b4:	2000      	movs	r0, #0
 80062b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006390 <_malloc_r+0xfc>
 80062be:	f000 f869 	bl	8006394 <__malloc_lock>
 80062c2:	f8d8 3000 	ldr.w	r3, [r8]
 80062c6:	461c      	mov	r4, r3
 80062c8:	bb44      	cbnz	r4, 800631c <_malloc_r+0x88>
 80062ca:	4629      	mov	r1, r5
 80062cc:	4630      	mov	r0, r6
 80062ce:	f7ff ffbf 	bl	8006250 <sbrk_aligned>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	4604      	mov	r4, r0
 80062d6:	d158      	bne.n	800638a <_malloc_r+0xf6>
 80062d8:	f8d8 4000 	ldr.w	r4, [r8]
 80062dc:	4627      	mov	r7, r4
 80062de:	2f00      	cmp	r7, #0
 80062e0:	d143      	bne.n	800636a <_malloc_r+0xd6>
 80062e2:	2c00      	cmp	r4, #0
 80062e4:	d04b      	beq.n	800637e <_malloc_r+0xea>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	4639      	mov	r1, r7
 80062ea:	4630      	mov	r0, r6
 80062ec:	eb04 0903 	add.w	r9, r4, r3
 80062f0:	f000 fb60 	bl	80069b4 <_sbrk_r>
 80062f4:	4581      	cmp	r9, r0
 80062f6:	d142      	bne.n	800637e <_malloc_r+0xea>
 80062f8:	6821      	ldr	r1, [r4, #0]
 80062fa:	4630      	mov	r0, r6
 80062fc:	1a6d      	subs	r5, r5, r1
 80062fe:	4629      	mov	r1, r5
 8006300:	f7ff ffa6 	bl	8006250 <sbrk_aligned>
 8006304:	3001      	adds	r0, #1
 8006306:	d03a      	beq.n	800637e <_malloc_r+0xea>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	442b      	add	r3, r5
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	f8d8 3000 	ldr.w	r3, [r8]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	bb62      	cbnz	r2, 8006370 <_malloc_r+0xdc>
 8006316:	f8c8 7000 	str.w	r7, [r8]
 800631a:	e00f      	b.n	800633c <_malloc_r+0xa8>
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	1b52      	subs	r2, r2, r5
 8006320:	d420      	bmi.n	8006364 <_malloc_r+0xd0>
 8006322:	2a0b      	cmp	r2, #11
 8006324:	d917      	bls.n	8006356 <_malloc_r+0xc2>
 8006326:	1961      	adds	r1, r4, r5
 8006328:	42a3      	cmp	r3, r4
 800632a:	6025      	str	r5, [r4, #0]
 800632c:	bf18      	it	ne
 800632e:	6059      	strne	r1, [r3, #4]
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	bf08      	it	eq
 8006334:	f8c8 1000 	streq.w	r1, [r8]
 8006338:	5162      	str	r2, [r4, r5]
 800633a:	604b      	str	r3, [r1, #4]
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f82f 	bl	80063a0 <__malloc_unlock>
 8006342:	f104 000b 	add.w	r0, r4, #11
 8006346:	1d23      	adds	r3, r4, #4
 8006348:	f020 0007 	bic.w	r0, r0, #7
 800634c:	1ac2      	subs	r2, r0, r3
 800634e:	bf1c      	itt	ne
 8006350:	1a1b      	subne	r3, r3, r0
 8006352:	50a3      	strne	r3, [r4, r2]
 8006354:	e7af      	b.n	80062b6 <_malloc_r+0x22>
 8006356:	6862      	ldr	r2, [r4, #4]
 8006358:	42a3      	cmp	r3, r4
 800635a:	bf0c      	ite	eq
 800635c:	f8c8 2000 	streq.w	r2, [r8]
 8006360:	605a      	strne	r2, [r3, #4]
 8006362:	e7eb      	b.n	800633c <_malloc_r+0xa8>
 8006364:	4623      	mov	r3, r4
 8006366:	6864      	ldr	r4, [r4, #4]
 8006368:	e7ae      	b.n	80062c8 <_malloc_r+0x34>
 800636a:	463c      	mov	r4, r7
 800636c:	687f      	ldr	r7, [r7, #4]
 800636e:	e7b6      	b.n	80062de <_malloc_r+0x4a>
 8006370:	461a      	mov	r2, r3
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	42a3      	cmp	r3, r4
 8006376:	d1fb      	bne.n	8006370 <_malloc_r+0xdc>
 8006378:	2300      	movs	r3, #0
 800637a:	6053      	str	r3, [r2, #4]
 800637c:	e7de      	b.n	800633c <_malloc_r+0xa8>
 800637e:	230c      	movs	r3, #12
 8006380:	4630      	mov	r0, r6
 8006382:	6033      	str	r3, [r6, #0]
 8006384:	f000 f80c 	bl	80063a0 <__malloc_unlock>
 8006388:	e794      	b.n	80062b4 <_malloc_r+0x20>
 800638a:	6005      	str	r5, [r0, #0]
 800638c:	e7d6      	b.n	800633c <_malloc_r+0xa8>
 800638e:	bf00      	nop
 8006390:	20000494 	.word	0x20000494

08006394 <__malloc_lock>:
 8006394:	4801      	ldr	r0, [pc, #4]	@ (800639c <__malloc_lock+0x8>)
 8006396:	f7ff bf11 	b.w	80061bc <__retarget_lock_acquire_recursive>
 800639a:	bf00      	nop
 800639c:	2000048c 	.word	0x2000048c

080063a0 <__malloc_unlock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	@ (80063a8 <__malloc_unlock+0x8>)
 80063a2:	f7ff bf0c 	b.w	80061be <__retarget_lock_release_recursive>
 80063a6:	bf00      	nop
 80063a8:	2000048c 	.word	0x2000048c

080063ac <__ssputs_r>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	461f      	mov	r7, r3
 80063b2:	688e      	ldr	r6, [r1, #8]
 80063b4:	4682      	mov	sl, r0
 80063b6:	42be      	cmp	r6, r7
 80063b8:	460c      	mov	r4, r1
 80063ba:	4690      	mov	r8, r2
 80063bc:	680b      	ldr	r3, [r1, #0]
 80063be:	d82d      	bhi.n	800641c <__ssputs_r+0x70>
 80063c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063c8:	d026      	beq.n	8006418 <__ssputs_r+0x6c>
 80063ca:	6965      	ldr	r5, [r4, #20]
 80063cc:	6909      	ldr	r1, [r1, #16]
 80063ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d2:	eba3 0901 	sub.w	r9, r3, r1
 80063d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063da:	1c7b      	adds	r3, r7, #1
 80063dc:	444b      	add	r3, r9
 80063de:	106d      	asrs	r5, r5, #1
 80063e0:	429d      	cmp	r5, r3
 80063e2:	bf38      	it	cc
 80063e4:	461d      	movcc	r5, r3
 80063e6:	0553      	lsls	r3, r2, #21
 80063e8:	d527      	bpl.n	800643a <__ssputs_r+0x8e>
 80063ea:	4629      	mov	r1, r5
 80063ec:	f7ff ff52 	bl	8006294 <_malloc_r>
 80063f0:	4606      	mov	r6, r0
 80063f2:	b360      	cbz	r0, 800644e <__ssputs_r+0xa2>
 80063f4:	464a      	mov	r2, r9
 80063f6:	6921      	ldr	r1, [r4, #16]
 80063f8:	f000 fafa 	bl	80069f0 <memcpy>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	6126      	str	r6, [r4, #16]
 800640a:	444e      	add	r6, r9
 800640c:	6026      	str	r6, [r4, #0]
 800640e:	463e      	mov	r6, r7
 8006410:	6165      	str	r5, [r4, #20]
 8006412:	eba5 0509 	sub.w	r5, r5, r9
 8006416:	60a5      	str	r5, [r4, #8]
 8006418:	42be      	cmp	r6, r7
 800641a:	d900      	bls.n	800641e <__ssputs_r+0x72>
 800641c:	463e      	mov	r6, r7
 800641e:	4632      	mov	r2, r6
 8006420:	4641      	mov	r1, r8
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	f000 faac 	bl	8006980 <memmove>
 8006428:	2000      	movs	r0, #0
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	1b9b      	subs	r3, r3, r6
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	4433      	add	r3, r6
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643a:	462a      	mov	r2, r5
 800643c:	f000 fae6 	bl	8006a0c <_realloc_r>
 8006440:	4606      	mov	r6, r0
 8006442:	2800      	cmp	r0, #0
 8006444:	d1e0      	bne.n	8006408 <__ssputs_r+0x5c>
 8006446:	4650      	mov	r0, sl
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	f7ff feb9 	bl	80061c0 <_free_r>
 800644e:	230c      	movs	r3, #12
 8006450:	f8ca 3000 	str.w	r3, [sl]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	f04f 30ff 	mov.w	r0, #4294967295
 800645a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	e7e9      	b.n	8006436 <__ssputs_r+0x8a>
	...

08006464 <_svfiprintf_r>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	4698      	mov	r8, r3
 800646a:	898b      	ldrh	r3, [r1, #12]
 800646c:	4607      	mov	r7, r0
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	460d      	mov	r5, r1
 8006472:	4614      	mov	r4, r2
 8006474:	b09d      	sub	sp, #116	@ 0x74
 8006476:	d510      	bpl.n	800649a <_svfiprintf_r+0x36>
 8006478:	690b      	ldr	r3, [r1, #16]
 800647a:	b973      	cbnz	r3, 800649a <_svfiprintf_r+0x36>
 800647c:	2140      	movs	r1, #64	@ 0x40
 800647e:	f7ff ff09 	bl	8006294 <_malloc_r>
 8006482:	6028      	str	r0, [r5, #0]
 8006484:	6128      	str	r0, [r5, #16]
 8006486:	b930      	cbnz	r0, 8006496 <_svfiprintf_r+0x32>
 8006488:	230c      	movs	r3, #12
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	b01d      	add	sp, #116	@ 0x74
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	2340      	movs	r3, #64	@ 0x40
 8006498:	616b      	str	r3, [r5, #20]
 800649a:	2300      	movs	r3, #0
 800649c:	9309      	str	r3, [sp, #36]	@ 0x24
 800649e:	2320      	movs	r3, #32
 80064a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064a4:	2330      	movs	r3, #48	@ 0x30
 80064a6:	f04f 0901 	mov.w	r9, #1
 80064aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006648 <_svfiprintf_r+0x1e4>
 80064b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064b6:	4623      	mov	r3, r4
 80064b8:	469a      	mov	sl, r3
 80064ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064be:	b10a      	cbz	r2, 80064c4 <_svfiprintf_r+0x60>
 80064c0:	2a25      	cmp	r2, #37	@ 0x25
 80064c2:	d1f9      	bne.n	80064b8 <_svfiprintf_r+0x54>
 80064c4:	ebba 0b04 	subs.w	fp, sl, r4
 80064c8:	d00b      	beq.n	80064e2 <_svfiprintf_r+0x7e>
 80064ca:	465b      	mov	r3, fp
 80064cc:	4622      	mov	r2, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	4638      	mov	r0, r7
 80064d2:	f7ff ff6b 	bl	80063ac <__ssputs_r>
 80064d6:	3001      	adds	r0, #1
 80064d8:	f000 80a7 	beq.w	800662a <_svfiprintf_r+0x1c6>
 80064dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064de:	445a      	add	r2, fp
 80064e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064e2:	f89a 3000 	ldrb.w	r3, [sl]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 809f 	beq.w	800662a <_svfiprintf_r+0x1c6>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295
 80064f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f6:	f10a 0a01 	add.w	sl, sl, #1
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	9307      	str	r3, [sp, #28]
 80064fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006502:	931a      	str	r3, [sp, #104]	@ 0x68
 8006504:	4654      	mov	r4, sl
 8006506:	2205      	movs	r2, #5
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	484e      	ldr	r0, [pc, #312]	@ (8006648 <_svfiprintf_r+0x1e4>)
 800650e:	f000 fa61 	bl	80069d4 <memchr>
 8006512:	9a04      	ldr	r2, [sp, #16]
 8006514:	b9d8      	cbnz	r0, 800654e <_svfiprintf_r+0xea>
 8006516:	06d0      	lsls	r0, r2, #27
 8006518:	bf44      	itt	mi
 800651a:	2320      	movmi	r3, #32
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006520:	0711      	lsls	r1, r2, #28
 8006522:	bf44      	itt	mi
 8006524:	232b      	movmi	r3, #43	@ 0x2b
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800652a:	f89a 3000 	ldrb.w	r3, [sl]
 800652e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006530:	d015      	beq.n	800655e <_svfiprintf_r+0xfa>
 8006532:	4654      	mov	r4, sl
 8006534:	2000      	movs	r0, #0
 8006536:	f04f 0c0a 	mov.w	ip, #10
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	4621      	mov	r1, r4
 800653e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006542:	3b30      	subs	r3, #48	@ 0x30
 8006544:	2b09      	cmp	r3, #9
 8006546:	d94b      	bls.n	80065e0 <_svfiprintf_r+0x17c>
 8006548:	b1b0      	cbz	r0, 8006578 <_svfiprintf_r+0x114>
 800654a:	9207      	str	r2, [sp, #28]
 800654c:	e014      	b.n	8006578 <_svfiprintf_r+0x114>
 800654e:	eba0 0308 	sub.w	r3, r0, r8
 8006552:	fa09 f303 	lsl.w	r3, r9, r3
 8006556:	4313      	orrs	r3, r2
 8006558:	46a2      	mov	sl, r4
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	e7d2      	b.n	8006504 <_svfiprintf_r+0xa0>
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	1d19      	adds	r1, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9103      	str	r1, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfbb      	ittet	lt
 800656a:	425b      	neglt	r3, r3
 800656c:	f042 0202 	orrlt.w	r2, r2, #2
 8006570:	9307      	strge	r3, [sp, #28]
 8006572:	9307      	strlt	r3, [sp, #28]
 8006574:	bfb8      	it	lt
 8006576:	9204      	strlt	r2, [sp, #16]
 8006578:	7823      	ldrb	r3, [r4, #0]
 800657a:	2b2e      	cmp	r3, #46	@ 0x2e
 800657c:	d10a      	bne.n	8006594 <_svfiprintf_r+0x130>
 800657e:	7863      	ldrb	r3, [r4, #1]
 8006580:	2b2a      	cmp	r3, #42	@ 0x2a
 8006582:	d132      	bne.n	80065ea <_svfiprintf_r+0x186>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	3402      	adds	r4, #2
 8006588:	1d1a      	adds	r2, r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	9203      	str	r2, [sp, #12]
 800658e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800664c <_svfiprintf_r+0x1e8>
 8006598:	2203      	movs	r2, #3
 800659a:	4650      	mov	r0, sl
 800659c:	7821      	ldrb	r1, [r4, #0]
 800659e:	f000 fa19 	bl	80069d4 <memchr>
 80065a2:	b138      	cbz	r0, 80065b4 <_svfiprintf_r+0x150>
 80065a4:	2240      	movs	r2, #64	@ 0x40
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	eba0 000a 	sub.w	r0, r0, sl
 80065ac:	4082      	lsls	r2, r0
 80065ae:	4313      	orrs	r3, r2
 80065b0:	3401      	adds	r4, #1
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	2206      	movs	r2, #6
 80065ba:	4825      	ldr	r0, [pc, #148]	@ (8006650 <_svfiprintf_r+0x1ec>)
 80065bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065c0:	f000 fa08 	bl	80069d4 <memchr>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d036      	beq.n	8006636 <_svfiprintf_r+0x1d2>
 80065c8:	4b22      	ldr	r3, [pc, #136]	@ (8006654 <_svfiprintf_r+0x1f0>)
 80065ca:	bb1b      	cbnz	r3, 8006614 <_svfiprintf_r+0x1b0>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	3307      	adds	r3, #7
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	3308      	adds	r3, #8
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065da:	4433      	add	r3, r6
 80065dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065de:	e76a      	b.n	80064b6 <_svfiprintf_r+0x52>
 80065e0:	460c      	mov	r4, r1
 80065e2:	2001      	movs	r0, #1
 80065e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e8:	e7a8      	b.n	800653c <_svfiprintf_r+0xd8>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f04f 0c0a 	mov.w	ip, #10
 80065f0:	4619      	mov	r1, r3
 80065f2:	3401      	adds	r4, #1
 80065f4:	9305      	str	r3, [sp, #20]
 80065f6:	4620      	mov	r0, r4
 80065f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fc:	3a30      	subs	r2, #48	@ 0x30
 80065fe:	2a09      	cmp	r2, #9
 8006600:	d903      	bls.n	800660a <_svfiprintf_r+0x1a6>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0c6      	beq.n	8006594 <_svfiprintf_r+0x130>
 8006606:	9105      	str	r1, [sp, #20]
 8006608:	e7c4      	b.n	8006594 <_svfiprintf_r+0x130>
 800660a:	4604      	mov	r4, r0
 800660c:	2301      	movs	r3, #1
 800660e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006612:	e7f0      	b.n	80065f6 <_svfiprintf_r+0x192>
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	462a      	mov	r2, r5
 800661a:	4638      	mov	r0, r7
 800661c:	4b0e      	ldr	r3, [pc, #56]	@ (8006658 <_svfiprintf_r+0x1f4>)
 800661e:	a904      	add	r1, sp, #16
 8006620:	f3af 8000 	nop.w
 8006624:	1c42      	adds	r2, r0, #1
 8006626:	4606      	mov	r6, r0
 8006628:	d1d6      	bne.n	80065d8 <_svfiprintf_r+0x174>
 800662a:	89ab      	ldrh	r3, [r5, #12]
 800662c:	065b      	lsls	r3, r3, #25
 800662e:	f53f af2d 	bmi.w	800648c <_svfiprintf_r+0x28>
 8006632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006634:	e72c      	b.n	8006490 <_svfiprintf_r+0x2c>
 8006636:	ab03      	add	r3, sp, #12
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	462a      	mov	r2, r5
 800663c:	4638      	mov	r0, r7
 800663e:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <_svfiprintf_r+0x1f4>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	f000 f87d 	bl	8006740 <_printf_i>
 8006646:	e7ed      	b.n	8006624 <_svfiprintf_r+0x1c0>
 8006648:	08006ba2 	.word	0x08006ba2
 800664c:	08006ba8 	.word	0x08006ba8
 8006650:	08006bac 	.word	0x08006bac
 8006654:	00000000 	.word	0x00000000
 8006658:	080063ad 	.word	0x080063ad

0800665c <_printf_common>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	4616      	mov	r6, r2
 8006662:	4698      	mov	r8, r3
 8006664:	688a      	ldr	r2, [r1, #8]
 8006666:	690b      	ldr	r3, [r1, #16]
 8006668:	4607      	mov	r7, r0
 800666a:	4293      	cmp	r3, r2
 800666c:	bfb8      	it	lt
 800666e:	4613      	movlt	r3, r2
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006676:	460c      	mov	r4, r1
 8006678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800667c:	b10a      	cbz	r2, 8006682 <_printf_common+0x26>
 800667e:	3301      	adds	r3, #1
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	0699      	lsls	r1, r3, #26
 8006686:	bf42      	ittt	mi
 8006688:	6833      	ldrmi	r3, [r6, #0]
 800668a:	3302      	addmi	r3, #2
 800668c:	6033      	strmi	r3, [r6, #0]
 800668e:	6825      	ldr	r5, [r4, #0]
 8006690:	f015 0506 	ands.w	r5, r5, #6
 8006694:	d106      	bne.n	80066a4 <_printf_common+0x48>
 8006696:	f104 0a19 	add.w	sl, r4, #25
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	6832      	ldr	r2, [r6, #0]
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	dc2b      	bgt.n	80066fc <_printf_common+0xa0>
 80066a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	3b00      	subs	r3, #0
 80066ac:	bf18      	it	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	0692      	lsls	r2, r2, #26
 80066b2:	d430      	bmi.n	8006716 <_printf_common+0xba>
 80066b4:	4641      	mov	r1, r8
 80066b6:	4638      	mov	r0, r7
 80066b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066bc:	47c8      	blx	r9
 80066be:	3001      	adds	r0, #1
 80066c0:	d023      	beq.n	800670a <_printf_common+0xae>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	6922      	ldr	r2, [r4, #16]
 80066c6:	f003 0306 	and.w	r3, r3, #6
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	bf14      	ite	ne
 80066ce:	2500      	movne	r5, #0
 80066d0:	6833      	ldreq	r3, [r6, #0]
 80066d2:	f04f 0600 	mov.w	r6, #0
 80066d6:	bf08      	it	eq
 80066d8:	68e5      	ldreq	r5, [r4, #12]
 80066da:	f104 041a 	add.w	r4, r4, #26
 80066de:	bf08      	it	eq
 80066e0:	1aed      	subeq	r5, r5, r3
 80066e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80066e6:	bf08      	it	eq
 80066e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ec:	4293      	cmp	r3, r2
 80066ee:	bfc4      	itt	gt
 80066f0:	1a9b      	subgt	r3, r3, r2
 80066f2:	18ed      	addgt	r5, r5, r3
 80066f4:	42b5      	cmp	r5, r6
 80066f6:	d11a      	bne.n	800672e <_printf_common+0xd2>
 80066f8:	2000      	movs	r0, #0
 80066fa:	e008      	b.n	800670e <_printf_common+0xb2>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4652      	mov	r2, sl
 8006700:	4641      	mov	r1, r8
 8006702:	4638      	mov	r0, r7
 8006704:	47c8      	blx	r9
 8006706:	3001      	adds	r0, #1
 8006708:	d103      	bne.n	8006712 <_printf_common+0xb6>
 800670a:	f04f 30ff 	mov.w	r0, #4294967295
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	3501      	adds	r5, #1
 8006714:	e7c1      	b.n	800669a <_printf_common+0x3e>
 8006716:	2030      	movs	r0, #48	@ 0x30
 8006718:	18e1      	adds	r1, r4, r3
 800671a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006724:	4422      	add	r2, r4
 8006726:	3302      	adds	r3, #2
 8006728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800672c:	e7c2      	b.n	80066b4 <_printf_common+0x58>
 800672e:	2301      	movs	r3, #1
 8006730:	4622      	mov	r2, r4
 8006732:	4641      	mov	r1, r8
 8006734:	4638      	mov	r0, r7
 8006736:	47c8      	blx	r9
 8006738:	3001      	adds	r0, #1
 800673a:	d0e6      	beq.n	800670a <_printf_common+0xae>
 800673c:	3601      	adds	r6, #1
 800673e:	e7d9      	b.n	80066f4 <_printf_common+0x98>

08006740 <_printf_i>:
 8006740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	7e0f      	ldrb	r7, [r1, #24]
 8006746:	4691      	mov	r9, r2
 8006748:	2f78      	cmp	r7, #120	@ 0x78
 800674a:	4680      	mov	r8, r0
 800674c:	460c      	mov	r4, r1
 800674e:	469a      	mov	sl, r3
 8006750:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006756:	d807      	bhi.n	8006768 <_printf_i+0x28>
 8006758:	2f62      	cmp	r7, #98	@ 0x62
 800675a:	d80a      	bhi.n	8006772 <_printf_i+0x32>
 800675c:	2f00      	cmp	r7, #0
 800675e:	f000 80d3 	beq.w	8006908 <_printf_i+0x1c8>
 8006762:	2f58      	cmp	r7, #88	@ 0x58
 8006764:	f000 80ba 	beq.w	80068dc <_printf_i+0x19c>
 8006768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800676c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006770:	e03a      	b.n	80067e8 <_printf_i+0xa8>
 8006772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006776:	2b15      	cmp	r3, #21
 8006778:	d8f6      	bhi.n	8006768 <_printf_i+0x28>
 800677a:	a101      	add	r1, pc, #4	@ (adr r1, 8006780 <_printf_i+0x40>)
 800677c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006780:	080067d9 	.word	0x080067d9
 8006784:	080067ed 	.word	0x080067ed
 8006788:	08006769 	.word	0x08006769
 800678c:	08006769 	.word	0x08006769
 8006790:	08006769 	.word	0x08006769
 8006794:	08006769 	.word	0x08006769
 8006798:	080067ed 	.word	0x080067ed
 800679c:	08006769 	.word	0x08006769
 80067a0:	08006769 	.word	0x08006769
 80067a4:	08006769 	.word	0x08006769
 80067a8:	08006769 	.word	0x08006769
 80067ac:	080068ef 	.word	0x080068ef
 80067b0:	08006817 	.word	0x08006817
 80067b4:	080068a9 	.word	0x080068a9
 80067b8:	08006769 	.word	0x08006769
 80067bc:	08006769 	.word	0x08006769
 80067c0:	08006911 	.word	0x08006911
 80067c4:	08006769 	.word	0x08006769
 80067c8:	08006817 	.word	0x08006817
 80067cc:	08006769 	.word	0x08006769
 80067d0:	08006769 	.word	0x08006769
 80067d4:	080068b1 	.word	0x080068b1
 80067d8:	6833      	ldr	r3, [r6, #0]
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6032      	str	r2, [r6, #0]
 80067e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067e8:	2301      	movs	r3, #1
 80067ea:	e09e      	b.n	800692a <_printf_i+0x1ea>
 80067ec:	6833      	ldr	r3, [r6, #0]
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	1d19      	adds	r1, r3, #4
 80067f2:	6031      	str	r1, [r6, #0]
 80067f4:	0606      	lsls	r6, r0, #24
 80067f6:	d501      	bpl.n	80067fc <_printf_i+0xbc>
 80067f8:	681d      	ldr	r5, [r3, #0]
 80067fa:	e003      	b.n	8006804 <_printf_i+0xc4>
 80067fc:	0645      	lsls	r5, r0, #25
 80067fe:	d5fb      	bpl.n	80067f8 <_printf_i+0xb8>
 8006800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006804:	2d00      	cmp	r5, #0
 8006806:	da03      	bge.n	8006810 <_printf_i+0xd0>
 8006808:	232d      	movs	r3, #45	@ 0x2d
 800680a:	426d      	negs	r5, r5
 800680c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006810:	230a      	movs	r3, #10
 8006812:	4859      	ldr	r0, [pc, #356]	@ (8006978 <_printf_i+0x238>)
 8006814:	e011      	b.n	800683a <_printf_i+0xfa>
 8006816:	6821      	ldr	r1, [r4, #0]
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	0608      	lsls	r0, r1, #24
 800681c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006820:	d402      	bmi.n	8006828 <_printf_i+0xe8>
 8006822:	0649      	lsls	r1, r1, #25
 8006824:	bf48      	it	mi
 8006826:	b2ad      	uxthmi	r5, r5
 8006828:	2f6f      	cmp	r7, #111	@ 0x6f
 800682a:	6033      	str	r3, [r6, #0]
 800682c:	bf14      	ite	ne
 800682e:	230a      	movne	r3, #10
 8006830:	2308      	moveq	r3, #8
 8006832:	4851      	ldr	r0, [pc, #324]	@ (8006978 <_printf_i+0x238>)
 8006834:	2100      	movs	r1, #0
 8006836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800683a:	6866      	ldr	r6, [r4, #4]
 800683c:	2e00      	cmp	r6, #0
 800683e:	bfa8      	it	ge
 8006840:	6821      	ldrge	r1, [r4, #0]
 8006842:	60a6      	str	r6, [r4, #8]
 8006844:	bfa4      	itt	ge
 8006846:	f021 0104 	bicge.w	r1, r1, #4
 800684a:	6021      	strge	r1, [r4, #0]
 800684c:	b90d      	cbnz	r5, 8006852 <_printf_i+0x112>
 800684e:	2e00      	cmp	r6, #0
 8006850:	d04b      	beq.n	80068ea <_printf_i+0x1aa>
 8006852:	4616      	mov	r6, r2
 8006854:	fbb5 f1f3 	udiv	r1, r5, r3
 8006858:	fb03 5711 	mls	r7, r3, r1, r5
 800685c:	5dc7      	ldrb	r7, [r0, r7]
 800685e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006862:	462f      	mov	r7, r5
 8006864:	42bb      	cmp	r3, r7
 8006866:	460d      	mov	r5, r1
 8006868:	d9f4      	bls.n	8006854 <_printf_i+0x114>
 800686a:	2b08      	cmp	r3, #8
 800686c:	d10b      	bne.n	8006886 <_printf_i+0x146>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	07df      	lsls	r7, r3, #31
 8006872:	d508      	bpl.n	8006886 <_printf_i+0x146>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6861      	ldr	r1, [r4, #4]
 8006878:	4299      	cmp	r1, r3
 800687a:	bfde      	ittt	le
 800687c:	2330      	movle	r3, #48	@ 0x30
 800687e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006882:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006886:	1b92      	subs	r2, r2, r6
 8006888:	6122      	str	r2, [r4, #16]
 800688a:	464b      	mov	r3, r9
 800688c:	4621      	mov	r1, r4
 800688e:	4640      	mov	r0, r8
 8006890:	f8cd a000 	str.w	sl, [sp]
 8006894:	aa03      	add	r2, sp, #12
 8006896:	f7ff fee1 	bl	800665c <_printf_common>
 800689a:	3001      	adds	r0, #1
 800689c:	d14a      	bne.n	8006934 <_printf_i+0x1f4>
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	b004      	add	sp, #16
 80068a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	f043 0320 	orr.w	r3, r3, #32
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	2778      	movs	r7, #120	@ 0x78
 80068b2:	4832      	ldr	r0, [pc, #200]	@ (800697c <_printf_i+0x23c>)
 80068b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	6831      	ldr	r1, [r6, #0]
 80068bc:	061f      	lsls	r7, r3, #24
 80068be:	f851 5b04 	ldr.w	r5, [r1], #4
 80068c2:	d402      	bmi.n	80068ca <_printf_i+0x18a>
 80068c4:	065f      	lsls	r7, r3, #25
 80068c6:	bf48      	it	mi
 80068c8:	b2ad      	uxthmi	r5, r5
 80068ca:	6031      	str	r1, [r6, #0]
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	bf44      	itt	mi
 80068d0:	f043 0320 	orrmi.w	r3, r3, #32
 80068d4:	6023      	strmi	r3, [r4, #0]
 80068d6:	b11d      	cbz	r5, 80068e0 <_printf_i+0x1a0>
 80068d8:	2310      	movs	r3, #16
 80068da:	e7ab      	b.n	8006834 <_printf_i+0xf4>
 80068dc:	4826      	ldr	r0, [pc, #152]	@ (8006978 <_printf_i+0x238>)
 80068de:	e7e9      	b.n	80068b4 <_printf_i+0x174>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	f023 0320 	bic.w	r3, r3, #32
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	e7f6      	b.n	80068d8 <_printf_i+0x198>
 80068ea:	4616      	mov	r6, r2
 80068ec:	e7bd      	b.n	800686a <_printf_i+0x12a>
 80068ee:	6833      	ldr	r3, [r6, #0]
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	1d18      	adds	r0, r3, #4
 80068f4:	6961      	ldr	r1, [r4, #20]
 80068f6:	6030      	str	r0, [r6, #0]
 80068f8:	062e      	lsls	r6, r5, #24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	d501      	bpl.n	8006902 <_printf_i+0x1c2>
 80068fe:	6019      	str	r1, [r3, #0]
 8006900:	e002      	b.n	8006908 <_printf_i+0x1c8>
 8006902:	0668      	lsls	r0, r5, #25
 8006904:	d5fb      	bpl.n	80068fe <_printf_i+0x1be>
 8006906:	8019      	strh	r1, [r3, #0]
 8006908:	2300      	movs	r3, #0
 800690a:	4616      	mov	r6, r2
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	e7bc      	b.n	800688a <_printf_i+0x14a>
 8006910:	6833      	ldr	r3, [r6, #0]
 8006912:	2100      	movs	r1, #0
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	6032      	str	r2, [r6, #0]
 8006918:	681e      	ldr	r6, [r3, #0]
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	4630      	mov	r0, r6
 800691e:	f000 f859 	bl	80069d4 <memchr>
 8006922:	b108      	cbz	r0, 8006928 <_printf_i+0x1e8>
 8006924:	1b80      	subs	r0, r0, r6
 8006926:	6060      	str	r0, [r4, #4]
 8006928:	6863      	ldr	r3, [r4, #4]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	2300      	movs	r3, #0
 800692e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006932:	e7aa      	b.n	800688a <_printf_i+0x14a>
 8006934:	4632      	mov	r2, r6
 8006936:	4649      	mov	r1, r9
 8006938:	4640      	mov	r0, r8
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	47d0      	blx	sl
 800693e:	3001      	adds	r0, #1
 8006940:	d0ad      	beq.n	800689e <_printf_i+0x15e>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	079b      	lsls	r3, r3, #30
 8006946:	d413      	bmi.n	8006970 <_printf_i+0x230>
 8006948:	68e0      	ldr	r0, [r4, #12]
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	4298      	cmp	r0, r3
 800694e:	bfb8      	it	lt
 8006950:	4618      	movlt	r0, r3
 8006952:	e7a6      	b.n	80068a2 <_printf_i+0x162>
 8006954:	2301      	movs	r3, #1
 8006956:	4632      	mov	r2, r6
 8006958:	4649      	mov	r1, r9
 800695a:	4640      	mov	r0, r8
 800695c:	47d0      	blx	sl
 800695e:	3001      	adds	r0, #1
 8006960:	d09d      	beq.n	800689e <_printf_i+0x15e>
 8006962:	3501      	adds	r5, #1
 8006964:	68e3      	ldr	r3, [r4, #12]
 8006966:	9903      	ldr	r1, [sp, #12]
 8006968:	1a5b      	subs	r3, r3, r1
 800696a:	42ab      	cmp	r3, r5
 800696c:	dcf2      	bgt.n	8006954 <_printf_i+0x214>
 800696e:	e7eb      	b.n	8006948 <_printf_i+0x208>
 8006970:	2500      	movs	r5, #0
 8006972:	f104 0619 	add.w	r6, r4, #25
 8006976:	e7f5      	b.n	8006964 <_printf_i+0x224>
 8006978:	08006bb3 	.word	0x08006bb3
 800697c:	08006bc4 	.word	0x08006bc4

08006980 <memmove>:
 8006980:	4288      	cmp	r0, r1
 8006982:	b510      	push	{r4, lr}
 8006984:	eb01 0402 	add.w	r4, r1, r2
 8006988:	d902      	bls.n	8006990 <memmove+0x10>
 800698a:	4284      	cmp	r4, r0
 800698c:	4623      	mov	r3, r4
 800698e:	d807      	bhi.n	80069a0 <memmove+0x20>
 8006990:	1e43      	subs	r3, r0, #1
 8006992:	42a1      	cmp	r1, r4
 8006994:	d008      	beq.n	80069a8 <memmove+0x28>
 8006996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800699a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800699e:	e7f8      	b.n	8006992 <memmove+0x12>
 80069a0:	4601      	mov	r1, r0
 80069a2:	4402      	add	r2, r0
 80069a4:	428a      	cmp	r2, r1
 80069a6:	d100      	bne.n	80069aa <memmove+0x2a>
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069b2:	e7f7      	b.n	80069a4 <memmove+0x24>

080069b4 <_sbrk_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	2300      	movs	r3, #0
 80069b8:	4d05      	ldr	r5, [pc, #20]	@ (80069d0 <_sbrk_r+0x1c>)
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fa f954 	bl	8000c6c <_sbrk>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_sbrk_r+0x1a>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_sbrk_r+0x1a>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20000488 	.word	0x20000488

080069d4 <memchr>:
 80069d4:	4603      	mov	r3, r0
 80069d6:	b510      	push	{r4, lr}
 80069d8:	b2c9      	uxtb	r1, r1
 80069da:	4402      	add	r2, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	4618      	mov	r0, r3
 80069e0:	d101      	bne.n	80069e6 <memchr+0x12>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e003      	b.n	80069ee <memchr+0x1a>
 80069e6:	7804      	ldrb	r4, [r0, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	428c      	cmp	r4, r1
 80069ec:	d1f6      	bne.n	80069dc <memchr+0x8>
 80069ee:	bd10      	pop	{r4, pc}

080069f0 <memcpy>:
 80069f0:	440a      	add	r2, r1
 80069f2:	4291      	cmp	r1, r2
 80069f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069f8:	d100      	bne.n	80069fc <memcpy+0xc>
 80069fa:	4770      	bx	lr
 80069fc:	b510      	push	{r4, lr}
 80069fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a08:	d1f9      	bne.n	80069fe <memcpy+0xe>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <_realloc_r>:
 8006a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4680      	mov	r8, r0
 8006a12:	4615      	mov	r5, r2
 8006a14:	460c      	mov	r4, r1
 8006a16:	b921      	cbnz	r1, 8006a22 <_realloc_r+0x16>
 8006a18:	4611      	mov	r1, r2
 8006a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1e:	f7ff bc39 	b.w	8006294 <_malloc_r>
 8006a22:	b92a      	cbnz	r2, 8006a30 <_realloc_r+0x24>
 8006a24:	f7ff fbcc 	bl	80061c0 <_free_r>
 8006a28:	2400      	movs	r4, #0
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a30:	f000 f81a 	bl	8006a68 <_malloc_usable_size_r>
 8006a34:	4285      	cmp	r5, r0
 8006a36:	4606      	mov	r6, r0
 8006a38:	d802      	bhi.n	8006a40 <_realloc_r+0x34>
 8006a3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a3e:	d8f4      	bhi.n	8006a2a <_realloc_r+0x1e>
 8006a40:	4629      	mov	r1, r5
 8006a42:	4640      	mov	r0, r8
 8006a44:	f7ff fc26 	bl	8006294 <_malloc_r>
 8006a48:	4607      	mov	r7, r0
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d0ec      	beq.n	8006a28 <_realloc_r+0x1c>
 8006a4e:	42b5      	cmp	r5, r6
 8006a50:	462a      	mov	r2, r5
 8006a52:	4621      	mov	r1, r4
 8006a54:	bf28      	it	cs
 8006a56:	4632      	movcs	r2, r6
 8006a58:	f7ff ffca 	bl	80069f0 <memcpy>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f7ff fbae 	bl	80061c0 <_free_r>
 8006a64:	463c      	mov	r4, r7
 8006a66:	e7e0      	b.n	8006a2a <_realloc_r+0x1e>

08006a68 <_malloc_usable_size_r>:
 8006a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a6c:	1f18      	subs	r0, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfbc      	itt	lt
 8006a72:	580b      	ldrlt	r3, [r1, r0]
 8006a74:	18c0      	addlt	r0, r0, r3
 8006a76:	4770      	bx	lr

08006a78 <_init>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr

08006a84 <_fini>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr
