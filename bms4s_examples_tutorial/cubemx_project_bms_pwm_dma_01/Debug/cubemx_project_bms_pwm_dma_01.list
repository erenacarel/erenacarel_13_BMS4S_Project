
cubemx_project_bms_pwm_dma_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004274  08004274  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  08004274  08004274  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004274  08004274  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004274  08004274  00005274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800427c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000018  08004294  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004294  00006224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c915  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de2  00000000  00000000  00012956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00014738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b4  00000000  00000000  00015398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dce  00000000  00000000  00015d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbbe  00000000  00000000  0002cb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868f4  00000000  00000000  0003a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003368  00000000  00000000  000c1010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c4378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08004230 	.word	0x08004230

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08004230 	.word	0x08004230

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd2e 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f838 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9f2 	bl	8000540 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9c2 	bl	80004e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f878 	bl	8000254 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f994 	bl	8000490 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000168:	f000 f944 	bl	80003f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData1, sizeof(pwmData1));
 800016c:	2302      	movs	r3, #2
 800016e:	4a12      	ldr	r2, [pc, #72]	@ (80001b8 <main+0x6c>)
 8000170:	2100      	movs	r1, #0
 8000172:	4812      	ldr	r0, [pc, #72]	@ (80001bc <main+0x70>)
 8000174:	f001 ff8e 	bl	8002094 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)pwmData2, sizeof(pwmData2));
 8000178:	2302      	movs	r3, #2
 800017a:	4a11      	ldr	r2, [pc, #68]	@ (80001c0 <main+0x74>)
 800017c:	2104      	movs	r1, #4
 800017e:	480f      	ldr	r0, [pc, #60]	@ (80001bc <main+0x70>)
 8000180:	f001 ff88 	bl	8002094 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)pwmData3, sizeof(pwmData3));
 8000184:	2302      	movs	r3, #2
 8000186:	4a0f      	ldr	r2, [pc, #60]	@ (80001c4 <main+0x78>)
 8000188:	2108      	movs	r1, #8
 800018a:	480c      	ldr	r0, [pc, #48]	@ (80001bc <main+0x70>)
 800018c:	f001 ff82 	bl	8002094 <HAL_TIM_PWM_Start_DMA>

  HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData1, sizeof(pwmData1));
 8000190:	2302      	movs	r3, #2
 8000192:	4a09      	ldr	r2, [pc, #36]	@ (80001b8 <main+0x6c>)
 8000194:	2100      	movs	r1, #0
 8000196:	4809      	ldr	r0, [pc, #36]	@ (80001bc <main+0x70>)
 8000198:	f003 f818 	bl	80031cc <HAL_TIMEx_PWMN_Start_DMA>
  HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)pwmData2, sizeof(pwmData2));
 800019c:	2302      	movs	r3, #2
 800019e:	4a08      	ldr	r2, [pc, #32]	@ (80001c0 <main+0x74>)
 80001a0:	2104      	movs	r1, #4
 80001a2:	4806      	ldr	r0, [pc, #24]	@ (80001bc <main+0x70>)
 80001a4:	f003 f812 	bl	80031cc <HAL_TIMEx_PWMN_Start_DMA>
  HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)pwmData3, sizeof(pwmData3));
 80001a8:	2302      	movs	r3, #2
 80001aa:	4a06      	ldr	r2, [pc, #24]	@ (80001c4 <main+0x78>)
 80001ac:	2108      	movs	r1, #8
 80001ae:	4803      	ldr	r0, [pc, #12]	@ (80001bc <main+0x70>)
 80001b0:	f003 f80c 	bl	80031cc <HAL_TIMEx_PWMN_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b4:	bf00      	nop
 80001b6:	e7fd      	b.n	80001b4 <main+0x68>
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000034 	.word	0x20000034
 80001c0:	20000004 	.word	0x20000004
 80001c4:	20000008 	.word	0x20000008

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	@ 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	@ 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 fffe 	bl	80041d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800020a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f001 fa05 	bl	8001620 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800021c:	f000 f9db 	bl	80005d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fc72 	bl	8001b24 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000246:	f000 f9c6 	bl	80005d6 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	@ 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b096      	sub	sp, #88	@ 0x58
 8000258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800025a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000268:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2220      	movs	r2, #32
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f003 ffa3 	bl	80041d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000292:	4b56      	ldr	r3, [pc, #344]	@ (80003ec <MX_TIM1_Init+0x198>)
 8000294:	4a56      	ldr	r2, [pc, #344]	@ (80003f0 <MX_TIM1_Init+0x19c>)
 8000296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000298:	4b54      	ldr	r3, [pc, #336]	@ (80003ec <MX_TIM1_Init+0x198>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029e:	4b53      	ldr	r3, [pc, #332]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80002a4:	4b51      	ldr	r3, [pc, #324]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002a6:	2263      	movs	r2, #99	@ 0x63
 80002a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80002aa:	4b50      	ldr	r3, [pc, #320]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002b2:	4b4e      	ldr	r3, [pc, #312]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002b8:	4b4c      	ldr	r3, [pc, #304]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002be:	484b      	ldr	r0, [pc, #300]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002c0:	f001 fdee 	bl	8001ea0 <HAL_TIM_Base_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80002ca:	f000 f984 	bl	80005d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002d8:	4619      	mov	r1, r3
 80002da:	4844      	ldr	r0, [pc, #272]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002dc:	f002 fb0c 	bl	80028f8 <HAL_TIM_ConfigClockSource>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80002e6:	f000 f976 	bl	80005d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002ea:	4840      	ldr	r0, [pc, #256]	@ (80003ec <MX_TIM1_Init+0x198>)
 80002ec:	f001 fe7a 	bl	8001fe4 <HAL_TIM_PWM_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80002f6:	f000 f96e 	bl	80005d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fa:	2300      	movs	r3, #0
 80002fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fe:	2300      	movs	r3, #0
 8000300:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000302:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000306:	4619      	mov	r1, r3
 8000308:	4838      	ldr	r0, [pc, #224]	@ (80003ec <MX_TIM1_Init+0x198>)
 800030a:	f003 f8c3 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000314:	f000 f95f 	bl	80005d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000318:	2360      	movs	r3, #96	@ 0x60
 800031a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000320:	2300      	movs	r3, #0
 8000322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000324:	2300      	movs	r3, #0
 8000326:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000328:	2304      	movs	r3, #4
 800032a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800032c:	2300      	movs	r3, #0
 800032e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000338:	2200      	movs	r2, #0
 800033a:	4619      	mov	r1, r3
 800033c:	482b      	ldr	r0, [pc, #172]	@ (80003ec <MX_TIM1_Init+0x198>)
 800033e:	f002 fa19 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000348:	f000 f945 	bl	80005d6 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800034c:	4b27      	ldr	r3, [pc, #156]	@ (80003ec <MX_TIM1_Init+0x198>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	699a      	ldr	r2, [r3, #24]
 8000352:	4b26      	ldr	r3, [pc, #152]	@ (80003ec <MX_TIM1_Init+0x198>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f022 0208 	bic.w	r2, r2, #8
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000360:	2204      	movs	r2, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4821      	ldr	r0, [pc, #132]	@ (80003ec <MX_TIM1_Init+0x198>)
 8000366:	f002 fa05 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000370:	f000 f931 	bl	80005d6 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000374:	4b1d      	ldr	r3, [pc, #116]	@ (80003ec <MX_TIM1_Init+0x198>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <MX_TIM1_Init+0x198>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000388:	2208      	movs	r2, #8
 800038a:	4619      	mov	r1, r3
 800038c:	4817      	ldr	r0, [pc, #92]	@ (80003ec <MX_TIM1_Init+0x198>)
 800038e:	f002 f9f1 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000398:	f000 f91d 	bl	80005d6 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800039c:	4b13      	ldr	r3, [pc, #76]	@ (80003ec <MX_TIM1_Init+0x198>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	69da      	ldr	r2, [r3, #28]
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_TIM1_Init+0x198>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f022 0208 	bic.w	r2, r2, #8
 80003aa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4807      	ldr	r0, [pc, #28]	@ (80003ec <MX_TIM1_Init+0x198>)
 80003d0:	f003 f8be 	bl	8003550 <HAL_TIMEx_ConfigBreakDeadTime>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80003da:	f000 f8fc 	bl	80005d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003de:	4803      	ldr	r0, [pc, #12]	@ (80003ec <MX_TIM1_Init+0x198>)
 80003e0:	f000 fa0c 	bl	80007fc <HAL_TIM_MspPostInit>

}
 80003e4:	bf00      	nop
 80003e6:	3758      	adds	r7, #88	@ 0x58
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000034 	.word	0x20000034
 80003f0:	40012c00 	.word	0x40012c00

080003f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000410:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000412:	4a1e      	ldr	r2, [pc, #120]	@ (800048c <MX_TIM3_Init+0x98>)
 8000414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000416:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000418:	2247      	movs	r2, #71	@ 0x47
 800041a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_TIM3_Init+0x94>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000422:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000424:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_TIM3_Init+0x94>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000436:	4814      	ldr	r0, [pc, #80]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000438:	f001 fd32 	bl	8001ea0 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f8c8 	bl	80005d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800044a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000454:	f002 fa50 	bl	80028f8 <HAL_TIM_ConfigClockSource>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800045e:	f000 f8ba 	bl	80005d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	@ (8000488 <MX_TIM3_Init+0x94>)
 8000470:	f003 f810 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800047a:	f000 f8ac 	bl	80005d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000007c 	.word	0x2000007c
 800048c:	40000400 	.word	0x40000400

08000490 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 8000496:	4a12      	ldr	r2, [pc, #72]	@ (80004e0 <MX_USART1_UART_Init+0x50>)
 8000498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800049a:	4b10      	ldr	r3, [pc, #64]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 800049c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <MX_USART1_UART_Init+0x4c>)
 80004c8:	f003 f954 	bl	8003774 <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004d2:	f000 f880 	bl	80005d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000190 	.word	0x20000190
 80004e0:	40013800 	.word	0x40013800

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ea:	4b14      	ldr	r3, [pc, #80]	@ (800053c <MX_DMA_Init+0x58>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a13      	ldr	r2, [pc, #76]	@ (800053c <MX_DMA_Init+0x58>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <MX_DMA_Init+0x58>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2103      	movs	r1, #3
 8000506:	200c      	movs	r0, #12
 8000508:	f000 fc39 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800050c:	200c      	movs	r0, #12
 800050e:	f000 fc52 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2103      	movs	r1, #3
 8000516:	200d      	movs	r0, #13
 8000518:	f000 fc31 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800051c:	200d      	movs	r0, #13
 800051e:	f000 fc4a 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2103      	movs	r1, #3
 8000526:	2010      	movs	r0, #16
 8000528:	f000 fc29 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800052c:	2010      	movs	r0, #16
 800052e:	f000 fc42 	bl	8000db6 <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_GPIO_Init+0x58>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <MX_GPIO_Init+0x58>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_GPIO_Init+0x58>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <MX_GPIO_Init+0x58>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <MX_GPIO_Init+0x58>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <MX_GPIO_Init+0x58>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <MX_GPIO_Init+0x58>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <MX_GPIO_Init+0x58>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <MX_GPIO_Init+0x58>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80005a8:	f001 ff16 	bl	80023d8 <HAL_TIM_PWM_Stop_DMA>
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000034 	.word	0x20000034

080005b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005c8:	d101      	bne.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ca:	f000 fb07 	bl	8000bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005da:	b672      	cpsid	i
}
 80005dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005de:	bf00      	nop
 80005e0:	e7fd      	b.n	80005de <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <HAL_MspInit+0x6c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <HAL_MspInit+0x6c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <HAL_MspInit+0x6c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <HAL_MspInit+0x6c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <HAL_MspInit+0x6c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <HAL_MspInit+0x6c>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2005      	movs	r0, #5
 8000620:	f000 fbad 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000624:	2005      	movs	r0, #5
 8000626:	f000 fbc6 	bl	8000db6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <HAL_MspInit+0x70>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_MspInit+0x70>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a5c      	ldr	r2, [pc, #368]	@ (80007d8 <HAL_TIM_Base_MspInit+0x180>)
 8000666:	4293      	cmp	r3, r2
 8000668:	f040 8098 	bne.w	800079c <HAL_TIM_Base_MspInit+0x144>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800066c:	4b5b      	ldr	r3, [pc, #364]	@ (80007dc <HAL_TIM_Base_MspInit+0x184>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a5a      	ldr	r2, [pc, #360]	@ (80007dc <HAL_TIM_Base_MspInit+0x184>)
 8000672:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b58      	ldr	r3, [pc, #352]	@ (80007dc <HAL_TIM_Base_MspInit+0x184>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000684:	4b56      	ldr	r3, [pc, #344]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 8000686:	4a57      	ldr	r2, [pc, #348]	@ (80007e4 <HAL_TIM_Base_MspInit+0x18c>)
 8000688:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800068a:	4b55      	ldr	r3, [pc, #340]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 800068c:	2210      	movs	r2, #16
 800068e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000690:	4b53      	ldr	r3, [pc, #332]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000696:	4b52      	ldr	r3, [pc, #328]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800069c:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 800069e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006a4:	4b4e      	ldr	r3, [pc, #312]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 80006a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006aa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80006ac:	4b4c      	ldr	r3, [pc, #304]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006b2:	4b4b      	ldr	r3, [pc, #300]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 80006b4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80006b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80006ba:	4849      	ldr	r0, [pc, #292]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 80006bc:	f000 fb8a 	bl	8000dd4 <HAL_DMA_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80006c6:	f7ff ff86 	bl	80005d6 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a44      	ldr	r2, [pc, #272]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80006d0:	4a43      	ldr	r2, [pc, #268]	@ (80007e0 <HAL_TIM_Base_MspInit+0x188>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80006d6:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 80006d8:	4a44      	ldr	r2, [pc, #272]	@ (80007ec <HAL_TIM_Base_MspInit+0x194>)
 80006da:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006dc:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 80006de:	2210      	movs	r2, #16
 80006e0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e2:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80006e8:	4b3f      	ldr	r3, [pc, #252]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 80006ea:	2280      	movs	r2, #128	@ 0x80
 80006ec:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 80006f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006f6:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 80006f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006fc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80006fe:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000704:	4b38      	ldr	r3, [pc, #224]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 8000706:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800070a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800070c:	4836      	ldr	r0, [pc, #216]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 800070e:	f000 fb61 	bl	8000dd4 <HAL_DMA_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 8000718:	f7ff ff5d 	bl	80005d6 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a32      	ldr	r2, [pc, #200]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
 8000722:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_TIM_Base_MspInit+0x190>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8000728:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 800072a:	4a32      	ldr	r2, [pc, #200]	@ (80007f4 <HAL_TIM_Base_MspInit+0x19c>)
 800072c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800072e:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000730:	2210      	movs	r2, #16
 8000732:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000746:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000748:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 800074a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000758:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800075c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800075e:	4824      	ldr	r0, [pc, #144]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000760:	f000 fb38 	bl	8000dd4 <HAL_DMA_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_TIM_Base_MspInit+0x116>
    {
      Error_Handler();
 800076a:	f7ff ff34 	bl	80005d6 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000774:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <HAL_TIM_Base_MspInit+0x198>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2019      	movs	r0, #25
 8000780:	f000 fafd 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000784:	2019      	movs	r0, #25
 8000786:	f000 fb16 	bl	8000db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	201b      	movs	r0, #27
 8000790:	f000 faf5 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000794:	201b      	movs	r0, #27
 8000796:	f000 fb0e 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800079a:	e018      	b.n	80007ce <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <HAL_TIM_Base_MspInit+0x1a0>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d113      	bne.n	80007ce <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <HAL_TIM_Base_MspInit+0x184>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <HAL_TIM_Base_MspInit+0x184>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_TIM_Base_MspInit+0x184>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	201d      	movs	r0, #29
 80007c4:	f000 fadb 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007c8:	201d      	movs	r0, #29
 80007ca:	f000 faf4 	bl	8000db6 <HAL_NVIC_EnableIRQ>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40021000 	.word	0x40021000
 80007e0:	200000c4 	.word	0x200000c4
 80007e4:	4002001c 	.word	0x4002001c
 80007e8:	20000108 	.word	0x20000108
 80007ec:	40020030 	.word	0x40020030
 80007f0:	2000014c 	.word	0x2000014c
 80007f4:	4002006c 	.word	0x4002006c
 80007f8:	40000400 	.word	0x40000400

080007fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <HAL_TIM_MspPostInit+0x8c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d131      	bne.n	8000880 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_TIM_MspPostInit+0x90>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a1a      	ldr	r2, [pc, #104]	@ (800088c <HAL_TIM_MspPostInit+0x90>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_TIM_MspPostInit+0x90>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_TIM_MspPostInit+0x90>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a14      	ldr	r2, [pc, #80]	@ (800088c <HAL_TIM_MspPostInit+0x90>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_TIM_MspPostInit+0x90>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <HAL_TIM_MspPostInit+0x94>)
 8000862:	f000 fd59 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000866:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <HAL_TIM_MspPostInit+0x98>)
 800087c:	f000 fd4c 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40012c00 	.word	0x40012c00
 800088c:	40021000 	.word	0x40021000
 8000890:	40010c00 	.word	0x40010c00
 8000894:	40010800 	.word	0x40010800

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a26      	ldr	r2, [pc, #152]	@ (800094c <HAL_UART_MspInit+0xb4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d145      	bne.n	8000944 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a24      	ldr	r2, [pc, #144]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4816      	ldr	r0, [pc, #88]	@ (8000954 <HAL_UART_MspInit+0xbc>)
 80008fc:	f000 fd0c 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4810      	ldr	r0, [pc, #64]	@ (8000954 <HAL_UART_MspInit+0xbc>)
 8000914:	f000 fd00 	bl	8001318 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_UART_MspInit+0xc0>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
 800091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000920:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_UART_MspInit+0xc0>)
 8000930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000932:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2025      	movs	r0, #37	@ 0x25
 800093a:	f000 fa20 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093e:	2025      	movs	r0, #37	@ 0x25
 8000940:	f000 fa39 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000
 8000954:	40010c00 	.word	0x40010c00
 8000958:	40010000 	.word	0x40010000

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	4b34      	ldr	r3, [pc, #208]	@ (8000a44 <HAL_InitTick+0xe8>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a33      	ldr	r2, [pc, #204]	@ (8000a44 <HAL_InitTick+0xe8>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <HAL_InitTick+0xe8>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098a:	f107 0210 	add.w	r2, r7, #16
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fa35 	bl	8001e04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d103      	bne.n	80009ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a4:	f001 fa06 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80009a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80009aa:	e004      	b.n	80009b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ac:	f001 fa02 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b8:	4a23      	ldr	r2, [pc, #140]	@ (8000a48 <HAL_InitTick+0xec>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	3b01      	subs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009d4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009ec:	4817      	ldr	r0, [pc, #92]	@ (8000a4c <HAL_InitTick+0xf0>)
 80009ee:	f001 fa57 	bl	8001ea0 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11b      	bne.n	8000a38 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a00:	4812      	ldr	r0, [pc, #72]	@ (8000a4c <HAL_InitTick+0xf0>)
 8000a02:	f001 fa9d 	bl	8001f40 <HAL_TIM_Base_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a14:	201c      	movs	r0, #28
 8000a16:	f000 f9ce 	bl	8000db6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d808      	bhi.n	8000a32 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 f9aa 	bl	8000d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2a:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <HAL_InitTick+0xf4>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	e002      	b.n	8000a38 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3738      	adds	r7, #56	@ 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	200001d8 	.word	0x200001d8
 8000a50:	20000010 	.word	0x20000010

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <DMA1_Channel2_IRQHandler+0x10>)
 8000abe:	f000 faf7 	bl	80010b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000c4 	.word	0x200000c4

08000acc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <DMA1_Channel3_IRQHandler+0x10>)
 8000ad2:	f000 faed 	bl	80010b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000108 	.word	0x20000108

08000ae0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ae6:	f000 fae3 	bl	80010b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000014c 	.word	0x2000014c

08000af4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <TIM1_UP_IRQHandler+0x10>)
 8000afa:	f001 fd33 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000034 	.word	0x20000034

08000b08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <TIM1_CC_IRQHandler+0x10>)
 8000b0e:	f001 fd29 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000034 	.word	0x20000034

08000b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <TIM2_IRQHandler+0x10>)
 8000b22:	f001 fd1f 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200001d8 	.word	0x200001d8

08000b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <TIM3_IRQHandler+0x10>)
 8000b36:	f001 fd15 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000007c 	.word	0x2000007c

08000b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <USART1_IRQHandler+0x10>)
 8000b4a:	f002 fe63 	bl	8003814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000190 	.word	0x20000190

08000b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff fff8 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b6a:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b80:	4c09      	ldr	r4, [pc, #36]	@ (8000ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 fb2b 	bl	80041e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff fadb 	bl	800014c <main>
  bx lr
 8000b96:	4770      	bx	lr
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ba0:	0800427c 	.word	0x0800427c
  ldr r2, =_sbss
 8000ba4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ba8:	20000224 	.word	0x20000224

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_Init+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_Init+0x28>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f8d1 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fec8 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fd0a 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	@ (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000014 	.word	0x20000014
 8000bfc:	20000220 	.word	0x20000220

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	@ (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000220 	.word	0x20000220

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4906      	ldr	r1, [pc, #24]	@ (8000cac <__NVIC_EnableIRQ+0x34>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff4f 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff64 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ffb2 	bl	8000d04 <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff81 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff57 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e043      	b.n	8000e72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <HAL_DMA_Init+0xa8>)
 8000df2:	4413      	add	r3, r2
 8000df4:	4a22      	ldr	r2, [pc, #136]	@ (8000e80 <HAL_DMA_Init+0xac>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	009a      	lsls	r2, r3, #2
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <HAL_DMA_Init+0xb0>)
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000e1e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	bffdfff8 	.word	0xbffdfff8
 8000e80:	cccccccd 	.word	0xcccccccd
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <HAL_DMA_Start_IT+0x20>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e04b      	b.n	8000f40 <HAL_DMA_Start_IT+0xb8>
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d13a      	bne.n	8000f32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f9eb 	bl	80012bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d008      	beq.n	8000f00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 020e 	orr.w	r2, r2, #14
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e00f      	b.n	8000f20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0204 	bic.w	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 020a 	orr.w	r2, r2, #10
 8000f1e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e005      	b.n	8000f3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2204      	movs	r2, #4
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e020      	b.n	8000fb4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 020e 	bic.w	r2, r2, #14
 8000f80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d005      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e051      	b.n	8001088 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020e 	bic.w	r2, r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <HAL_DMA_Abort_IT+0xd4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d029      	beq.n	8001062 <HAL_DMA_Abort_IT+0xa2>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <HAL_DMA_Abort_IT+0xd8>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d022      	beq.n	800105e <HAL_DMA_Abort_IT+0x9e>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1f      	ldr	r2, [pc, #124]	@ (800109c <HAL_DMA_Abort_IT+0xdc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01a      	beq.n	8001058 <HAL_DMA_Abort_IT+0x98>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_DMA_Abort_IT+0xe0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d012      	beq.n	8001052 <HAL_DMA_Abort_IT+0x92>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <HAL_DMA_Abort_IT+0xe4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00a      	beq.n	800104c <HAL_DMA_Abort_IT+0x8c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <HAL_DMA_Abort_IT+0xe8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d102      	bne.n	8001046 <HAL_DMA_Abort_IT+0x86>
 8001040:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001044:	e00e      	b.n	8001064 <HAL_DMA_Abort_IT+0xa4>
 8001046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800104a:	e00b      	b.n	8001064 <HAL_DMA_Abort_IT+0xa4>
 800104c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001050:	e008      	b.n	8001064 <HAL_DMA_Abort_IT+0xa4>
 8001052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001056:	e005      	b.n	8001064 <HAL_DMA_Abort_IT+0xa4>
 8001058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105c:	e002      	b.n	8001064 <HAL_DMA_Abort_IT+0xa4>
 800105e:	2310      	movs	r3, #16
 8001060:	e000      	b.n	8001064 <HAL_DMA_Abort_IT+0xa4>
 8001062:	2301      	movs	r3, #1
 8001064:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <HAL_DMA_Abort_IT+0xec>)
 8001066:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	4798      	blx	r3
    } 
  }
  return status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020008 	.word	0x40020008
 8001098:	4002001c 	.word	0x4002001c
 800109c:	40020030 	.word	0x40020030
 80010a0:	40020044 	.word	0x40020044
 80010a4:	40020058 	.word	0x40020058
 80010a8:	4002006c 	.word	0x4002006c
 80010ac:	40020000 	.word	0x40020000

080010b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	2204      	movs	r2, #4
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d04f      	beq.n	8001178 <HAL_DMA_IRQHandler+0xc8>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d04a      	beq.n	8001178 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d107      	bne.n	8001100 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0204 	bic.w	r2, r2, #4
 80010fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a66      	ldr	r2, [pc, #408]	@ (80012a0 <HAL_DMA_IRQHandler+0x1f0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d029      	beq.n	800115e <HAL_DMA_IRQHandler+0xae>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a65      	ldr	r2, [pc, #404]	@ (80012a4 <HAL_DMA_IRQHandler+0x1f4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d022      	beq.n	800115a <HAL_DMA_IRQHandler+0xaa>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a63      	ldr	r2, [pc, #396]	@ (80012a8 <HAL_DMA_IRQHandler+0x1f8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01a      	beq.n	8001154 <HAL_DMA_IRQHandler+0xa4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a62      	ldr	r2, [pc, #392]	@ (80012ac <HAL_DMA_IRQHandler+0x1fc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d012      	beq.n	800114e <HAL_DMA_IRQHandler+0x9e>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a60      	ldr	r2, [pc, #384]	@ (80012b0 <HAL_DMA_IRQHandler+0x200>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00a      	beq.n	8001148 <HAL_DMA_IRQHandler+0x98>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a5f      	ldr	r2, [pc, #380]	@ (80012b4 <HAL_DMA_IRQHandler+0x204>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d102      	bne.n	8001142 <HAL_DMA_IRQHandler+0x92>
 800113c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001140:	e00e      	b.n	8001160 <HAL_DMA_IRQHandler+0xb0>
 8001142:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001146:	e00b      	b.n	8001160 <HAL_DMA_IRQHandler+0xb0>
 8001148:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800114c:	e008      	b.n	8001160 <HAL_DMA_IRQHandler+0xb0>
 800114e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001152:	e005      	b.n	8001160 <HAL_DMA_IRQHandler+0xb0>
 8001154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001158:	e002      	b.n	8001160 <HAL_DMA_IRQHandler+0xb0>
 800115a:	2340      	movs	r3, #64	@ 0x40
 800115c:	e000      	b.n	8001160 <HAL_DMA_IRQHandler+0xb0>
 800115e:	2304      	movs	r3, #4
 8001160:	4a55      	ldr	r2, [pc, #340]	@ (80012b8 <HAL_DMA_IRQHandler+0x208>)
 8001162:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 8094 	beq.w	8001296 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001176:	e08e      	b.n	8001296 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	2202      	movs	r2, #2
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d056      	beq.n	8001236 <HAL_DMA_IRQHandler+0x186>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d051      	beq.n	8001236 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020a 	bic.w	r2, r2, #10
 80011ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a38      	ldr	r2, [pc, #224]	@ (80012a0 <HAL_DMA_IRQHandler+0x1f0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d029      	beq.n	8001216 <HAL_DMA_IRQHandler+0x166>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a37      	ldr	r2, [pc, #220]	@ (80012a4 <HAL_DMA_IRQHandler+0x1f4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d022      	beq.n	8001212 <HAL_DMA_IRQHandler+0x162>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a35      	ldr	r2, [pc, #212]	@ (80012a8 <HAL_DMA_IRQHandler+0x1f8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01a      	beq.n	800120c <HAL_DMA_IRQHandler+0x15c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a34      	ldr	r2, [pc, #208]	@ (80012ac <HAL_DMA_IRQHandler+0x1fc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d012      	beq.n	8001206 <HAL_DMA_IRQHandler+0x156>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a32      	ldr	r2, [pc, #200]	@ (80012b0 <HAL_DMA_IRQHandler+0x200>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00a      	beq.n	8001200 <HAL_DMA_IRQHandler+0x150>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a31      	ldr	r2, [pc, #196]	@ (80012b4 <HAL_DMA_IRQHandler+0x204>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d102      	bne.n	80011fa <HAL_DMA_IRQHandler+0x14a>
 80011f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011f8:	e00e      	b.n	8001218 <HAL_DMA_IRQHandler+0x168>
 80011fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011fe:	e00b      	b.n	8001218 <HAL_DMA_IRQHandler+0x168>
 8001200:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001204:	e008      	b.n	8001218 <HAL_DMA_IRQHandler+0x168>
 8001206:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120a:	e005      	b.n	8001218 <HAL_DMA_IRQHandler+0x168>
 800120c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001210:	e002      	b.n	8001218 <HAL_DMA_IRQHandler+0x168>
 8001212:	2320      	movs	r3, #32
 8001214:	e000      	b.n	8001218 <HAL_DMA_IRQHandler+0x168>
 8001216:	2302      	movs	r3, #2
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <HAL_DMA_IRQHandler+0x208>)
 800121a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d034      	beq.n	8001296 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001234:	e02f      	b.n	8001296 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	2208      	movs	r2, #8
 800123c:	409a      	lsls	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d028      	beq.n	8001298 <HAL_DMA_IRQHandler+0x1e8>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d023      	beq.n	8001298 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020e 	bic.w	r2, r2, #14
 800125e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
    }
  }
  return;
 8001296:	bf00      	nop
 8001298:	bf00      	nop
}
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020008 	.word	0x40020008
 80012a4:	4002001c 	.word	0x4002001c
 80012a8:	40020030 	.word	0x40020030
 80012ac:	40020044 	.word	0x40020044
 80012b0:	40020058 	.word	0x40020058
 80012b4:	4002006c 	.word	0x4002006c
 80012b8:	40020000 	.word	0x40020000

080012bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d108      	bne.n	80012fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012fa:	e007      	b.n	800130c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	60da      	str	r2, [r3, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	@ 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e169      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8158 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a9a      	ldr	r2, [pc, #616]	@ (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4a98      	ldr	r2, [pc, #608]	@ (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4a98      	ldr	r2, [pc, #608]	@ (80015bc <HAL_GPIO_Init+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a96      	ldr	r2, [pc, #600]	@ (80015bc <HAL_GPIO_Init+0x2a4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a96      	ldr	r2, [pc, #600]	@ (80015c0 <HAL_GPIO_Init+0x2a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a94      	ldr	r2, [pc, #592]	@ (80015c0 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a94      	ldr	r2, [pc, #592]	@ (80015c4 <HAL_GPIO_Init+0x2ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a92      	ldr	r2, [pc, #584]	@ (80015c4 <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a92      	ldr	r2, [pc, #584]	@ (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a90      	ldr	r2, [pc, #576]	@ (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a79      	ldr	r2, [pc, #484]	@ (80015cc <HAL_GPIO_Init+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	@ 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	@ 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b1 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b4d      	ldr	r3, [pc, #308]	@ (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4c      	ldr	r2, [pc, #304]	@ (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a48      	ldr	r2, [pc, #288]	@ (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	@ (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3f      	ldr	r2, [pc, #252]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	@ (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	@ (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001504:	2300      	movs	r3, #0
 8001506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001516:	492f      	ldr	r1, [pc, #188]	@ (80015d4 <HAL_GPIO_Init+0x2bc>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	492c      	ldr	r1, [pc, #176]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4928      	ldr	r1, [pc, #160]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4922      	ldr	r1, [pc, #136]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	491e      	ldr	r1, [pc, #120]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4918      	ldr	r1, [pc, #96]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4914      	ldr	r1, [pc, #80]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	490e      	ldr	r1, [pc, #56]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e021      	b.n	80015fa <HAL_GPIO_Init+0x2e2>
 80015b6:	bf00      	nop
 80015b8:	10320000 	.word	0x10320000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10210000 	.word	0x10210000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_GPIO_Init+0x304>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	@ (800161c <HAL_GPIO_Init+0x304>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae8e 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	@ 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e272      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8087 	beq.w	800174e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001640:	4b92      	ldr	r3, [pc, #584]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	d00c      	beq.n	8001666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800164c:	4b8f      	ldr	r3, [pc, #572]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d112      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
 8001658:	4b8c      	ldr	r3, [pc, #560]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001664:	d10b      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	4b89      	ldr	r3, [pc, #548]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d06c      	beq.n	800174c <HAL_RCC_OscConfig+0x12c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d168      	bne.n	800174c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e24c      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x76>
 8001688:	4b80      	ldr	r3, [pc, #512]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a7f      	ldr	r2, [pc, #508]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e02e      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4b7b      	ldr	r3, [pc, #492]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7a      	ldr	r2, [pc, #488]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b78      	ldr	r3, [pc, #480]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a77      	ldr	r2, [pc, #476]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0xbc>
 80016c2:	4b72      	ldr	r3, [pc, #456]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a71      	ldr	r2, [pc, #452]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b6f      	ldr	r3, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 80016dc:	4b6b      	ldr	r3, [pc, #428]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a6a      	ldr	r2, [pc, #424]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b68      	ldr	r3, [pc, #416]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a67      	ldr	r2, [pc, #412]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa80 	bl	8000c00 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fa7c 	bl	8000c00 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e200      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b5d      	ldr	r3, [pc, #372]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xe4>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fa6c 	bl	8000c00 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fa68 	bl	8000c00 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	@ 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1ec      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b53      	ldr	r3, [pc, #332]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x10c>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175a:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001766:	4b49      	ldr	r3, [pc, #292]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x18c>
 8001772:	4b46      	ldr	r3, [pc, #280]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b43      	ldr	r3, [pc, #268]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x176>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1c0      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b3d      	ldr	r3, [pc, #244]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4939      	ldr	r1, [pc, #228]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <HAL_RCC_OscConfig+0x270>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fa21 	bl	8000c00 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fa1d 	bl	8000c00 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a1      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4927      	ldr	r1, [pc, #156]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <HAL_RCC_OscConfig+0x270>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fa00 	bl	8000c00 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff f9fc 	bl	8000c00 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e180      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d03a      	beq.n	80018a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d019      	beq.n	800186a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f9e0 	bl	8000c00 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff f9dc 	bl	8000c00 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e160      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <HAL_RCC_OscConfig+0x26c>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 fafe 	bl	8001e64 <RCC_Delay>
 8001868:	e01c      	b.n	80018a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff f9c6 	bl	8000c00 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001876:	e00f      	b.n	8001898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff f9c2 	bl	8000c00 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d908      	bls.n	8001898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e146      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	42420000 	.word	0x42420000
 8001894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	4b92      	ldr	r3, [pc, #584]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e9      	bne.n	8001878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a6 	beq.w	80019fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10d      	bne.n	80018de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b88      	ldr	r3, [pc, #544]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a87      	ldr	r2, [pc, #540]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b85      	ldr	r3, [pc, #532]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b82      	ldr	r3, [pc, #520]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f983 	bl	8000c00 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7ff f97f 	bl	8000c00 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	@ 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e103      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b75      	ldr	r3, [pc, #468]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x312>
 8001924:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e02d      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x334>
 800193a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a69      	ldr	r2, [pc, #420]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b67      	ldr	r3, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a66      	ldr	r2, [pc, #408]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	e01c      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x356>
 800195c:	4b61      	ldr	r3, [pc, #388]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a60      	ldr	r2, [pc, #384]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e00b      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001976:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b58      	ldr	r3, [pc, #352]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a57      	ldr	r2, [pc, #348]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d015      	beq.n	80019c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff f933 	bl	8000c00 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f92f 	bl	8000c00 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0b1      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ee      	beq.n	800199e <HAL_RCC_OscConfig+0x37e>
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff f91d 	bl	8000c00 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f919 	bl	8000c00 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e09b      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	4b40      	ldr	r3, [pc, #256]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ee      	bne.n	80019ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d105      	bne.n	80019fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8087 	beq.w	8001b16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a08:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d061      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d146      	bne.n	8001aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f8ed 	bl	8000c00 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff f8e9 	bl	8000c00 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e06d      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4921      	ldr	r1, [pc, #132]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a19      	ldr	r1, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	430b      	orrs	r3, r1
 8001a76:	491b      	ldr	r1, [pc, #108]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f8bd 	bl	8000c00 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f8b9 	bl	8000c00 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e03d      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46a>
 8001aa8:	e035      	b.n	8001b16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f8a6 	bl	8000c00 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f8a2 	bl	8000c00 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e026      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x498>
 8001ad6:	e01e      	b.n	8001b16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e019      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_RCC_OscConfig+0x500>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0d0      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d910      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b67      	ldr	r3, [pc, #412]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	4965      	ldr	r1, [pc, #404]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0b8      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b80:	4b59      	ldr	r3, [pc, #356]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a58      	ldr	r2, [pc, #352]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b98:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	494d      	ldr	r1, [pc, #308]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d040      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b47      	ldr	r3, [pc, #284]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d115      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07f      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e073      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06b      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4936      	ldr	r1, [pc, #216]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c14:	f7fe fff4 	bl	8000c00 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7fe fff0 	bl	8000c00 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e053      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d210      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0207 	bic.w	r2, r3, #7
 8001c5a:	4922      	ldr	r1, [pc, #136]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e032      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4916      	ldr	r1, [pc, #88]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	490e      	ldr	r1, [pc, #56]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb2:	f000 f821 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	490a      	ldr	r1, [pc, #40]	@ (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	4a09      	ldr	r2, [pc, #36]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fe42 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08004248 	.word	0x08004248
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000010 	.word	0x20000010

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x30>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x36>
 8001d26:	e027      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2a:	613b      	str	r3, [r7, #16]
      break;
 8001d2c:	e027      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d010      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0c5b      	lsrs	r3, r3, #17
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5a:	fb03 f202 	mul.w	r2, r3, r2
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e004      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	613b      	str	r3, [r7, #16]
      break;
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7a:	613b      	str	r3, [r7, #16]
      break;
 8001d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7e:	693b      	ldr	r3, [r7, #16]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	007a1200 	.word	0x007a1200
 8001d94:	08004260 	.word	0x08004260
 8001d98:	08004270 	.word	0x08004270
 8001d9c:	003d0900 	.word	0x003d0900

08001da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b02      	ldr	r3, [pc, #8]	@ (8001db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db8:	f7ff fff2 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	@ (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08004258 	.word	0x08004258

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de0:	f7ff ffde 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0adb      	lsrs	r3, r3, #11
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	@ (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08004258 	.word	0x08004258

08001e04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	220f      	movs	r2, #15
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_RCC_GetClockConfig+0x58>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_RCC_GetClockConfig+0x58>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_RCC_GetClockConfig+0x58>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_RCC_GetClockConfig+0x58>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_RCC_GetClockConfig+0x5c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0207 	and.w	r2, r3, #7
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40022000 	.word	0x40022000

08001e64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <RCC_Delay+0x34>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <RCC_Delay+0x38>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0a5b      	lsrs	r3, r3, #9
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e80:	bf00      	nop
  }
  while (Delay --);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	60fa      	str	r2, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f9      	bne.n	8001e80 <RCC_Delay+0x1c>
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	2000000c 	.word	0x2000000c
 8001e9c:	10624dd3 	.word	0x10624dd3

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e041      	b.n	8001f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fbc6 	bl	8000658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 fed0 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d001      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e03a      	b.n	8001fce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a18      	ldr	r2, [pc, #96]	@ (8001fd8 <HAL_TIM_Base_Start_IT+0x98>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x58>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f82:	d009      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x58>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <HAL_TIM_Base_Start_IT+0x9c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x58>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a13      	ldr	r2, [pc, #76]	@ (8001fe0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d010      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	e007      	b.n	8001fcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40000800 	.word	0x40000800

08001fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e041      	b.n	800207a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f839 	bl	8002082 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3304      	adds	r3, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f000 fe2e 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e022      	b.n	8002106 <HAL_TIM_PWM_Start_DMA+0x72>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d109      	bne.n	80020da <HAL_TIM_PWM_Start_DMA+0x46>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e015      	b.n	8002106 <HAL_TIM_PWM_Start_DMA+0x72>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d109      	bne.n	80020f4 <HAL_TIM_PWM_Start_DMA+0x60>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e008      	b.n	8002106 <HAL_TIM_PWM_Start_DMA+0x72>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
 800210c:	e153      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_TIM_PWM_Start_DMA+0x94>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e022      	b.n	800216e <HAL_TIM_PWM_Start_DMA+0xda>
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b04      	cmp	r3, #4
 800212c:	d109      	bne.n	8002142 <HAL_TIM_PWM_Start_DMA+0xae>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b01      	cmp	r3, #1
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	e015      	b.n	800216e <HAL_TIM_PWM_Start_DMA+0xda>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d109      	bne.n	800215c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e008      	b.n	800216e <HAL_TIM_PWM_Start_DMA+0xda>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d024      	beq.n	80021bc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_TIM_PWM_Start_DMA+0xea>
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e119      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002190:	e016      	b.n	80021c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a0:	e00e      	b.n	80021c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021b0:	e006      	b.n	80021c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021ba:	e001      	b.n	80021c0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0fa      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	f200 80ae 	bhi.w	8002324 <HAL_TIM_PWM_Start_DMA+0x290>
 80021c8:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	08002205 	.word	0x08002205
 80021d4:	08002325 	.word	0x08002325
 80021d8:	08002325 	.word	0x08002325
 80021dc:	08002325 	.word	0x08002325
 80021e0:	0800224d 	.word	0x0800224d
 80021e4:	08002325 	.word	0x08002325
 80021e8:	08002325 	.word	0x08002325
 80021ec:	08002325 	.word	0x08002325
 80021f0:	08002295 	.word	0x08002295
 80021f4:	08002325 	.word	0x08002325
 80021f8:	08002325 	.word	0x08002325
 80021fc:	08002325 	.word	0x08002325
 8002200:	080022dd 	.word	0x080022dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	4a6d      	ldr	r2, [pc, #436]	@ (80023c0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	4a6c      	ldr	r2, [pc, #432]	@ (80023c4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	4a6b      	ldr	r2, [pc, #428]	@ (80023c8 <HAL_TIM_PWM_Start_DMA+0x334>)
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3334      	adds	r3, #52	@ 0x34
 8002228:	461a      	mov	r2, r3
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	f7fe fe2c 	bl	8000e88 <HAL_DMA_Start_IT>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0bd      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002248:	60da      	str	r2, [r3, #12]
      break;
 800224a:	e06e      	b.n	800232a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	4a5b      	ldr	r2, [pc, #364]	@ (80023c0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	4a5a      	ldr	r2, [pc, #360]	@ (80023c4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	4a59      	ldr	r2, [pc, #356]	@ (80023c8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3338      	adds	r3, #56	@ 0x38
 8002270:	461a      	mov	r2, r3
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	f7fe fe08 	bl	8000e88 <HAL_DMA_Start_IT>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e099      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002290:	60da      	str	r2, [r3, #12]
      break;
 8002292:	e04a      	b.n	800232a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	4a49      	ldr	r2, [pc, #292]	@ (80023c0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_TIM_PWM_Start_DMA+0x330>)
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	4a47      	ldr	r2, [pc, #284]	@ (80023c8 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	333c      	adds	r3, #60	@ 0x3c
 80022b8:	461a      	mov	r2, r3
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	f7fe fde4 	bl	8000e88 <HAL_DMA_Start_IT>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e075      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022d8:	60da      	str	r2, [r3, #12]
      break;
 80022da:	e026      	b.n	800232a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	4a37      	ldr	r2, [pc, #220]	@ (80023c0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4a36      	ldr	r2, [pc, #216]	@ (80023c4 <HAL_TIM_PWM_Start_DMA+0x330>)
 80022ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3340      	adds	r3, #64	@ 0x40
 8002300:	461a      	mov	r2, r3
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	f7fe fdc0 	bl	8000e88 <HAL_DMA_Start_IT>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e051      	b.n	80023b6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002320:	60da      	str	r2, [r3, #12]
      break;
 8002322:	e002      	b.n	800232a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
      break;
 8002328:	bf00      	nop
  }

  if (status == HAL_OK)
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d141      	bne.n	80023b4 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 ff23 	bl	8003184 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a22      	ldr	r2, [pc, #136]	@ (80023cc <HAL_TIM_PWM_Start_DMA+0x338>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d107      	bne.n	8002358 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002356:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <HAL_TIM_PWM_Start_DMA+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00e      	beq.n	8002380 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d009      	beq.n	8002380 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d111      	bne.n	80023a4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b06      	cmp	r3, #6
 8002390:	d010      	beq.n	80023b4 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	e007      	b.n	80023b4 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08002b73 	.word	0x08002b73
 80023c4:	08002c1b 	.word	0x08002c1b
 80023c8:	08002ae1 	.word	0x08002ae1
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d855      	bhi.n	8002498 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002429 	.word	0x08002429
 80023f8:	08002499 	.word	0x08002499
 80023fc:	08002499 	.word	0x08002499
 8002400:	08002499 	.word	0x08002499
 8002404:	08002445 	.word	0x08002445
 8002408:	08002499 	.word	0x08002499
 800240c:	08002499 	.word	0x08002499
 8002410:	08002499 	.word	0x08002499
 8002414:	08002461 	.word	0x08002461
 8002418:	08002499 	.word	0x08002499
 800241c:	08002499 	.word	0x08002499
 8002420:	08002499 	.word	0x08002499
 8002424:	0800247d 	.word	0x0800247d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002436:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fdbf 	bl	8000fc0 <HAL_DMA_Abort_IT>
      break;
 8002442:	e02c      	b.n	800249e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002452:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fdb1 	bl	8000fc0 <HAL_DMA_Abort_IT>
      break;
 800245e:	e01e      	b.n	800249e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fda3 	bl	8000fc0 <HAL_DMA_Abort_IT>
      break;
 800247a:	e010      	b.n	800249e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800248a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fd95 	bl	8000fc0 <HAL_DMA_Abort_IT>
      break;
 8002496:	e002      	b.n	800249e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	bf00      	nop
  }

  if (status == HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d157      	bne.n	8002554 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fe69 	bl	8003184 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002560 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d117      	bne.n	80024ec <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_TIM_PWM_Stop_DMA+0x114>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6a1a      	ldr	r2, [r3, #32]
 80024d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_TIM_PWM_Stop_DMA+0x114>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10f      	bne.n	800251c <HAL_TIM_PWM_Stop_DMA+0x144>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a1a      	ldr	r2, [r3, #32]
 8002502:	f240 4344 	movw	r3, #1092	@ 0x444
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d107      	bne.n	800251c <HAL_TIM_PWM_Stop_DMA+0x144>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <HAL_TIM_PWM_Stop_DMA+0x154>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800252a:	e013      	b.n	8002554 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d104      	bne.n	800253c <HAL_TIM_PWM_Stop_DMA+0x164>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800253a:	e00b      	b.n	8002554 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d104      	bne.n	800254c <HAL_TIM_PWM_Stop_DMA+0x174>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800254a:	e003      	b.n	8002554 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00

08002564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b02      	cmp	r3, #2
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0202 	mvn.w	r2, #2
 8002590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fa76 	bl	8002a98 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa69 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fd fff1 	bl	800059c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0204 	mvn.w	r2, #4
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa4c 	bl	8002a98 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa3f 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fd ffc7 	bl	800059c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b08      	cmp	r3, #8
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0208 	mvn.w	r2, #8
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa22 	bl	8002a98 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa15 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fd ff9d 	bl	800059c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b10      	cmp	r3, #16
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b10      	cmp	r3, #16
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0210 	mvn.w	r2, #16
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2208      	movs	r2, #8
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f9f8 	bl	8002a98 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f9eb 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fd ff73 	bl	800059c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0201 	mvn.w	r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fd ff68 	bl	80005b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f2:	2b80      	cmp	r3, #128	@ 0x80
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	2b80      	cmp	r3, #128	@ 0x80
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ff78 	bl	8003604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271e:	2b40      	cmp	r3, #64	@ 0x40
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9be 	bl	8002abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0220 	mvn.w	r2, #32
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 ff43 	bl	80035f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800278e:	2302      	movs	r3, #2
 8002790:	e0ae      	b.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	f200 809f 	bhi.w	80028e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	080028e1 	.word	0x080028e1
 80027b0:	080028e1 	.word	0x080028e1
 80027b4:	080028e1 	.word	0x080028e1
 80027b8:	0800281d 	.word	0x0800281d
 80027bc:	080028e1 	.word	0x080028e1
 80027c0:	080028e1 	.word	0x080028e1
 80027c4:	080028e1 	.word	0x080028e1
 80027c8:	0800285f 	.word	0x0800285f
 80027cc:	080028e1 	.word	0x080028e1
 80027d0:	080028e1 	.word	0x080028e1
 80027d4:	080028e1 	.word	0x080028e1
 80027d8:	0800289f 	.word	0x0800289f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fab0 	bl	8002d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0204 	bic.w	r2, r2, #4
 8002806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6999      	ldr	r1, [r3, #24]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	619a      	str	r2, [r3, #24]
      break;
 800281a:	e064      	b.n	80028e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 faf6 	bl	8002e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	619a      	str	r2, [r3, #24]
      break;
 800285c:	e043      	b.n	80028e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fb3f 	bl	8002ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0208 	orr.w	r2, r2, #8
 8002878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0204 	bic.w	r2, r2, #4
 8002888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	61da      	str	r2, [r3, #28]
      break;
 800289c:	e023      	b.n	80028e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fb89 	bl	8002fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	61da      	str	r2, [r3, #28]
      break;
 80028de:	e002      	b.n	80028e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	75fb      	strb	r3, [r7, #23]
      break;
 80028e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_TIM_ConfigClockSource+0x1c>
 8002910:	2302      	movs	r3, #2
 8002912:	e0b4      	b.n	8002a7e <HAL_TIM_ConfigClockSource+0x186>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800293a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800294c:	d03e      	beq.n	80029cc <HAL_TIM_ConfigClockSource+0xd4>
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002952:	f200 8087 	bhi.w	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295a:	f000 8086 	beq.w	8002a6a <HAL_TIM_ConfigClockSource+0x172>
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002962:	d87f      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b70      	cmp	r3, #112	@ 0x70
 8002966:	d01a      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xa6>
 8002968:	2b70      	cmp	r3, #112	@ 0x70
 800296a:	d87b      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b60      	cmp	r3, #96	@ 0x60
 800296e:	d050      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x11a>
 8002970:	2b60      	cmp	r3, #96	@ 0x60
 8002972:	d877      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b50      	cmp	r3, #80	@ 0x50
 8002976:	d03c      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002978:	2b50      	cmp	r3, #80	@ 0x50
 800297a:	d873      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b40      	cmp	r3, #64	@ 0x40
 800297e:	d058      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x13a>
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	d86f      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b30      	cmp	r3, #48	@ 0x30
 8002986:	d064      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x15a>
 8002988:	2b30      	cmp	r3, #48	@ 0x30
 800298a:	d86b      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b20      	cmp	r3, #32
 800298e:	d060      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x15a>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d867      	bhi.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b00      	cmp	r3, #0
 8002996:	d05c      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	2b10      	cmp	r3, #16
 800299a:	d05a      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	e062      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	f000 fbca 	bl	8003146 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	609a      	str	r2, [r3, #8]
      break;
 80029ca:	e04f      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	f000 fbb3 	bl	8003146 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ee:	609a      	str	r2, [r3, #8]
      break;
 80029f0:	e03c      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	461a      	mov	r2, r3
 8002a00:	f000 fb2a 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2150      	movs	r1, #80	@ 0x50
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fb81 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002a10:	e02c      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f000 fb48 	bl	80030b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2160      	movs	r1, #96	@ 0x60
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fb71 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002a30:	e01c      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f000 fb0a 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2140      	movs	r1, #64	@ 0x40
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb61 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002a50:	e00c      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f000 fb58 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002a62:	e003      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e000      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b06:	e02a      	b.n	8002b5e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d107      	bne.n	8002b22 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b20:	e01d      	b.n	8002b5e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b3a:	e010      	b.n	8002b5e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d107      	bne.n	8002b56 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b54:	e003      	b.n	8002b5e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff ffb5 	bl	8002ace <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	771a      	strb	r2, [r3, #28]
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d10b      	bne.n	8002ba2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d136      	bne.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba0:	e031      	b.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10b      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d125      	bne.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc2:	e020      	b.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10b      	bne.n	8002be6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d114      	bne.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be4:	e00f      	b.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10a      	bne.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7fd fcc8 	bl	800059c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	771a      	strb	r2, [r3, #28]
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d103      	bne.n	8002c3a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	771a      	strb	r2, [r3, #28]
 8002c38:	e019      	b.n	8002c6e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d103      	bne.n	8002c4c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2202      	movs	r2, #2
 8002c48:	771a      	strb	r2, [r3, #28]
 8002c4a:	e010      	b.n	8002c6e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d103      	bne.n	8002c5e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	771a      	strb	r2, [r3, #28]
 8002c5c:	e007      	b.n	8002c6e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d102      	bne.n	8002c6e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff ff1b 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	771a      	strb	r2, [r3, #28]
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <TIM_Base_SetConfig+0xb8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca2:	d007      	beq.n	8002cb4 <TIM_Base_SetConfig+0x30>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a26      	ldr	r2, [pc, #152]	@ (8002d40 <TIM_Base_SetConfig+0xbc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_Base_SetConfig+0x30>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a25      	ldr	r2, [pc, #148]	@ (8002d44 <TIM_Base_SetConfig+0xc0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <TIM_Base_SetConfig+0xb8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd4:	d007      	beq.n	8002ce6 <TIM_Base_SetConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <TIM_Base_SetConfig+0xbc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_Base_SetConfig+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <TIM_Base_SetConfig+0xc0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a07      	ldr	r2, [pc, #28]	@ (8002d3c <TIM_Base_SetConfig+0xb8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d103      	bne.n	8002d2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	615a      	str	r2, [r3, #20]
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800

08002d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f023 0201 	bic.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 0302 	bic.w	r3, r3, #2
 8002d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e10 <TIM_OC1_SetConfig+0xc8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10c      	bne.n	8002dbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0308 	bic.w	r3, r3, #8
 8002daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a13      	ldr	r2, [pc, #76]	@ (8002e10 <TIM_OC1_SetConfig+0xc8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d111      	bne.n	8002dea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40012c00 	.word	0x40012c00

08002e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f023 0210 	bic.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f023 0320 	bic.w	r3, r3, #32
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <TIM_OC2_SetConfig+0xd0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10d      	bne.n	8002e90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <TIM_OC2_SetConfig+0xd0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d113      	bne.n	8002ec0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40012c00 	.word	0x40012c00

08002ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <TIM_OC3_SetConfig+0xd0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10d      	bne.n	8002f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <TIM_OC3_SetConfig+0xd0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d113      	bne.n	8002f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	621a      	str	r2, [r3, #32]
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00

08002fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <TIM_OC4_SetConfig+0x98>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d109      	bne.n	8003030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40012c00 	.word	0x40012c00

08003058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0201 	bic.w	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 030a 	bic.w	r3, r3, #10
 8003094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0210 	bic.w	r2, r3, #16
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	031b      	lsls	r3, r3, #12
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	f043 0307 	orr.w	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003146:	b480      	push	{r7}
 8003148:	b087      	sub	sp, #28
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	431a      	orrs	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4313      	orrs	r3, r2
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2201      	movs	r2, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                           uint16_t Length)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e022      	b.n	800323e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d109      	bne.n	8003212 <HAL_TIMEx_PWMN_Start_DMA+0x46>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e015      	b.n	800323e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d109      	bne.n	800322c <HAL_TIMEx_PWMN_Start_DMA+0x60>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e008      	b.n	800323e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	e115      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_TIMEx_PWMN_Start_DMA+0x94>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e022      	b.n	80032a6 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d109      	bne.n	800327a <HAL_TIMEx_PWMN_Start_DMA+0xae>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e015      	b.n	80032a6 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d109      	bne.n	8003294 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e008      	b.n	80032a6 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d024      	beq.n	80032f4 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0db      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032c8:	e016      	b.n	80032f8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d104      	bne.n	80032da <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032d8:	e00e      	b.n	80032f8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d104      	bne.n	80032ea <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e8:	e006      	b.n	80032f8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032f2:	e001      	b.n	80032f8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0bc      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
  }

  switch (Channel)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d051      	beq.n	80033a2 <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d872      	bhi.n	80033ea <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d024      	beq.n	800335a <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 8003310:	e06b      	b.n	80033ea <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	4a59      	ldr	r2, [pc, #356]	@ (800347c <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	4a58      	ldr	r2, [pc, #352]	@ (8003480 <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 8003320:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	4a57      	ldr	r2, [pc, #348]	@ (8003484 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3334      	adds	r3, #52	@ 0x34
 8003336:	461a      	mov	r2, r3
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	f7fd fda5 	bl	8000e88 <HAL_DMA_Start_IT>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e094      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	60da      	str	r2, [r3, #12]
      break;
 8003358:	e04a      	b.n	80033f0 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335e:	4a47      	ldr	r2, [pc, #284]	@ (800347c <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8003360:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003366:	4a46      	ldr	r2, [pc, #280]	@ (8003480 <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 8003368:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	4a45      	ldr	r2, [pc, #276]	@ (8003484 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3338      	adds	r3, #56	@ 0x38
 800337e:	461a      	mov	r2, r3
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	f7fd fd81 	bl	8000e88 <HAL_DMA_Start_IT>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e070      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800339e:	60da      	str	r2, [r3, #12]
      break;
 80033a0:	e026      	b.n	80033f0 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	4a35      	ldr	r2, [pc, #212]	@ (800347c <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 80033a8:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	4a34      	ldr	r2, [pc, #208]	@ (8003480 <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 80033b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	4a33      	ldr	r2, [pc, #204]	@ (8003484 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>)
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	333c      	adds	r3, #60	@ 0x3c
 80033c6:	461a      	mov	r2, r3
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	f7fd fd5d 	bl	8000e88 <HAL_DMA_Start_IT>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e04c      	b.n	8003472 <HAL_TIMEx_PWMN_Start_DMA+0x2a6>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e6:	60da      	str	r2, [r3, #12]
      break;
 80033e8:	e002      	b.n	80033f0 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
      break;
 80033ee:	bf00      	nop
  }

  if (status == HAL_OK)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d13c      	bne.n	8003470 <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2204      	movs	r2, #4
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f994 	bl	800372c <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIMEx_PWMN_Start_DMA+0x270>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d009      	beq.n	800343c <HAL_TIMEx_PWMN_Start_DMA+0x270>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a17      	ldr	r2, [pc, #92]	@ (800348c <HAL_TIMEx_PWMN_Start_DMA+0x2c0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIMEx_PWMN_Start_DMA+0x270>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <HAL_TIMEx_PWMN_Start_DMA+0x2c4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_TIMEx_PWMN_Start_DMA+0x294>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d010      	beq.n	8003470 <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      {
        __HAL_TIM_ENABLE(htim);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e007      	b.n	8003470 <HAL_TIMEx_PWMN_Start_DMA+0x2a4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	08003617 	.word	0x08003617
 8003480:	08002c1b 	.word	0x08002c1b
 8003484:	080036bf 	.word	0x080036bf
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800

08003494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e046      	b.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d009      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a10      	ldr	r2, [pc, #64]	@ (800354c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800

08003550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003568:	2302      	movs	r3, #2
 800356a:	e03d      	b.n	80035e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d10b      	bne.n	8003646 <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d136      	bne.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003644:	e031      	b.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d10b      	bne.n	8003668 <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2202      	movs	r2, #2
 8003654:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d125      	bne.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003666:	e020      	b.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d10b      	bne.n	800368a <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2204      	movs	r2, #4
 8003676:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d114      	bne.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003688:	e00f      	b.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d10a      	bne.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2208      	movs	r2, #8
 8003698:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7fc ff76 	bl	800059c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	771a      	strb	r2, [r3, #28]
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d107      	bne.n	80036e6 <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e4:	e018      	b.n	8003718 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2202      	movs	r2, #2
 80036f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036fe:	e00b      	b.n	8003718 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d106      	bne.n	8003718 <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2204      	movs	r2, #4
 800370e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff f9d8 	bl	8002ace <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2204      	movs	r2, #4
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e042      	b.n	800380c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd f87c 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fc7f 	bl	80040bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b0ba      	sub	sp, #232	@ 0xe8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_UART_IRQHandler+0x66>
 8003866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fb63 	bl	8003f3e <UART_Receive_IT>
      return;
 8003878:	e25b      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800387a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80de 	beq.w	8003a40 <HAL_UART_IRQHandler+0x22c>
 8003884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80d1 	beq.w	8003a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0xae>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0xd2>
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f043 0202 	orr.w	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0xf6>
 80038f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d011      	beq.n	800393a <HAL_UART_IRQHandler+0x126>
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f043 0208 	orr.w	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 81f2 	beq.w	8003d28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_UART_IRQHandler+0x14e>
 8003950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 faee 	bl	8003f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_UART_IRQHandler+0x17a>
 8003986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04f      	beq.n	8003a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9f8 	bl	8003d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d041      	beq.n	8003a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d9      	bne.n	80039a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d013      	beq.n	8003a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003bf4 <HAL_UART_IRQHandler+0x3e0>)
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fadc 	bl	8000fc0 <HAL_DMA_Abort_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e00e      	b.n	8003a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f99c 	bl	8003d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00a      	b.n	8003a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f998 	bl	8003d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e006      	b.n	8003a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f994 	bl	8003d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a3a:	e175      	b.n	8003d28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	bf00      	nop
    return;
 8003a3e:	e173      	b.n	8003d28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 814f 	bne.w	8003ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8148 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8141 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80b6 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8145 	beq.w	8003d2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	f080 813e 	bcs.w	8003d2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	f000 8088 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003af0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003afc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1d9      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e1      	bne.n	8003b10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e3      	bne.n	8003b4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003bb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bb8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e3      	bne.n	8003b92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd f9ba 	bl	8000f48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8bf 	bl	8003d6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf0:	e09c      	b.n	8003d2c <HAL_UART_IRQHandler+0x518>
 8003bf2:	bf00      	nop
 8003bf4:	08003e49 	.word	0x08003e49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 808e 	beq.w	8003d30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8089 	beq.w	8003d30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	623b      	str	r3, [r7, #32]
   return(result);
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cc0:	61fa      	str	r2, [r7, #28]
 8003cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f844 	bl	8003d6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce6:	e023      	b.n	8003d30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <HAL_UART_IRQHandler+0x4f4>
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8b5 	bl	8003e70 <UART_Transmit_IT>
    return;
 8003d06:	e014      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <HAL_UART_IRQHandler+0x51e>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f8f4 	bl	8003f0e <UART_EndTransmit_IT>
    return;
 8003d26:	e004      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d28:	bf00      	nop
 8003d2a:	e002      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d2c:	bf00      	nop
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d30:	bf00      	nop
  }
}
 8003d32:	37e8      	adds	r7, #232	@ 0xe8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b095      	sub	sp, #84	@ 0x54
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dac:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d119      	bne.n	8003e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f023 0310 	bic.w	r3, r3, #16
 8003e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e1c:	61ba      	str	r2, [r7, #24]
 8003e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6979      	ldr	r1, [r7, #20]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e3e:	bf00      	nop
 8003e40:	3754      	adds	r7, #84	@ 0x54
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff ff7a 	bl	8003d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b21      	cmp	r3, #33	@ 0x21
 8003e82:	d13e      	bne.n	8003f02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8c:	d114      	bne.n	8003eb8 <UART_Transmit_IT+0x48>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d110      	bne.n	8003eb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eaa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]
 8003eb6:	e008      	b.n	8003eca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6211      	str	r1, [r2, #32]
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003efc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ff02 	bl	8003d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b08c      	sub	sp, #48	@ 0x30
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b22      	cmp	r3, #34	@ 0x22
 8003f50:	f040 80ae 	bne.w	80040b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5c:	d117      	bne.n	8003f8e <UART_Receive_IT+0x50>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d113      	bne.n	8003f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f8c:	e026      	b.n	8003fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa0:	d007      	beq.n	8003fb2 <UART_Receive_IT+0x74>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <UART_Receive_IT+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e008      	b.n	8003fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d15d      	bne.n	80040ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0220 	bic.w	r2, r2, #32
 8003ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800400e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	2b01      	cmp	r3, #1
 8004034:	d135      	bne.n	80040a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	613b      	str	r3, [r7, #16]
   return(result);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f023 0310 	bic.w	r3, r3, #16
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	623a      	str	r2, [r7, #32]
 800405e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	6a3a      	ldr	r2, [r7, #32]
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	61bb      	str	r3, [r7, #24]
   return(result);
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b10      	cmp	r3, #16
 800407c:	d10a      	bne.n	8004094 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe67 	bl	8003d6e <HAL_UARTEx_RxEventCallback>
 80040a0:	e002      	b.n	80040a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fe51 	bl	8003d4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e002      	b.n	80040b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3730      	adds	r7, #48	@ 0x30
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040f6:	f023 030c 	bic.w	r3, r3, #12
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	430b      	orrs	r3, r1
 8004102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <UART_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fd fe5a 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	e002      	b.n	8004132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7fd fe42 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8004130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	4a22      	ldr	r2, [pc, #136]	@ (80041d4 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	0119      	lsls	r1, r3, #4
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009a      	lsls	r2, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	fbb2 f2f3 	udiv	r2, r2, r3
 8004168:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <UART_SetConfig+0x118>)
 800416a:	fba3 0302 	umull	r0, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2064      	movs	r0, #100	@ 0x64
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	@ 0x32
 800417c:	4a15      	ldr	r2, [pc, #84]	@ (80041d4 <UART_SetConfig+0x118>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004188:	4419      	add	r1, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	@ 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	@ 0x32
 80041b4:	4a07      	ldr	r2, [pc, #28]	@ (80041d4 <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	440a      	add	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40013800 	.word	0x40013800
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <memset>:
 80041d8:	4603      	mov	r3, r0
 80041da:	4402      	add	r2, r0
 80041dc:	4293      	cmp	r3, r2
 80041de:	d100      	bne.n	80041e2 <memset+0xa>
 80041e0:	4770      	bx	lr
 80041e2:	f803 1b01 	strb.w	r1, [r3], #1
 80041e6:	e7f9      	b.n	80041dc <memset+0x4>

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	2600      	movs	r6, #0
 80041ec:	4d0c      	ldr	r5, [pc, #48]	@ (8004220 <__libc_init_array+0x38>)
 80041ee:	4c0d      	ldr	r4, [pc, #52]	@ (8004224 <__libc_init_array+0x3c>)
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	f000 f81a 	bl	8004230 <_init>
 80041fc:	2600      	movs	r6, #0
 80041fe:	4d0a      	ldr	r5, [pc, #40]	@ (8004228 <__libc_init_array+0x40>)
 8004200:	4c0a      	ldr	r4, [pc, #40]	@ (800422c <__libc_init_array+0x44>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f855 3b04 	ldr.w	r3, [r5], #4
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004274 	.word	0x08004274
 8004224:	08004274 	.word	0x08004274
 8004228:	08004274 	.word	0x08004274
 800422c:	08004278 	.word	0x08004278

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
