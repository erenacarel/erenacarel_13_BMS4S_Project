
bms4s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6b8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800c7c8  0800c7c8  0000d7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdc8  0800cdc8  0000e200  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdc8  0800cdc8  0000ddc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdd0  0800cdd0  0000e200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdd0  0800cdd0  0000ddd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdd4  0800cdd4  0000ddd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800cdd8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  20000200  0800cfd8  0000e200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000168c  0800cfd8  0000e68c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e66  00000000  00000000  0000e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f30  00000000  00000000  0002808f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ff  00000000  00000000  0002d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf3a  00000000  00000000  0002eaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c530  00000000  00000000  0004aa29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dce7  00000000  00000000  00066f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104c40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007924  00000000  00000000  00104c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7b0 	.word	0x0800c7b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800c7b0 	.word	0x0800c7b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_f2uiz>:
 8000cd0:	0042      	lsls	r2, r0, #1
 8000cd2:	d20e      	bcs.n	8000cf2 <__aeabi_f2uiz+0x22>
 8000cd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cd8:	d30b      	bcc.n	8000cf2 <__aeabi_f2uiz+0x22>
 8000cda:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ce2:	d409      	bmi.n	8000cf8 <__aeabi_f2uiz+0x28>
 8000ce4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ce8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cec:	fa23 f002 	lsr.w	r0, r3, r2
 8000cf0:	4770      	bx	lr
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	4770      	bx	lr
 8000cf8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000cfc:	d101      	bne.n	8000d02 <__aeabi_f2uiz+0x32>
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	d102      	bne.n	8000d08 <__aeabi_f2uiz+0x38>
 8000d02:	f04f 30ff 	mov.w	r0, #4294967295
 8000d06:	4770      	bx	lr
 8000d08:	f04f 0000 	mov.w	r0, #0
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <vApplicationGetIdleTaskMemory+0x28>)
 8000d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	2000021c 	.word	0x2000021c
 8000d3c:	200002bc 	.word	0x200002bc

08000d40 <LCD16X2_Init>:
        0b00110,
        0b00000
};

void LCD16X2_Init(uint8_t rows)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d4a:	4a38      	ldr	r2, [pc, #224]	@ (8000e2c <LCD16X2_Init+0xec>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d50:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <LCD16X2_Init+0xf0>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d56:	4b37      	ldr	r3, [pc, #220]	@ (8000e34 <LCD16X2_Init+0xf4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d5c:	4b33      	ldr	r3, [pc, #204]	@ (8000e2c <LCD16X2_Init+0xec>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d907      	bls.n	8000d74 <LCD16X2_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000d64:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <LCD16X2_Init+0xf4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <LCD16X2_Init+0xf4>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e006      	b.n	8000d82 <LCD16X2_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d74:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <LCD16X2_Init+0xf4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <LCD16X2_Init+0xf4>)
 8000d80:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d82:	f000 f985 	bl	8001090 <DelayInit>
  HAL_Delay(50);
 8000d86:	2032      	movs	r0, #50	@ 0x32
 8000d88:	f002 fa08 	bl	800319c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d8c:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <LCD16X2_Init+0xf0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f943 	bl	800101c <ExpanderWrite>
  HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9a:	f002 f9ff 	bl	800319c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000d9e:	2030      	movs	r0, #48	@ 0x30
 8000da0:	f000 f92b 	bl	8000ffa <Write4Bits>
  DelayUS(4500);
 8000da4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000da8:	f000 f99a 	bl	80010e0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000dac:	2030      	movs	r0, #48	@ 0x30
 8000dae:	f000 f924 	bl	8000ffa <Write4Bits>
  DelayUS(4500);
 8000db2:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000db6:	f000 f993 	bl	80010e0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000dba:	2030      	movs	r0, #48	@ 0x30
 8000dbc:	f000 f91d 	bl	8000ffa <Write4Bits>
  DelayUS(4500);
 8000dc0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dc4:	f000 f98c 	bl	80010e0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000dc8:	2020      	movs	r0, #32
 8000dca:	f000 f916 	bl	8000ffa <Write4Bits>
  DelayUS(100);
 8000dce:	2064      	movs	r0, #100	@ 0x64
 8000dd0:	f000 f986 	bl	80010e0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <LCD16X2_Init+0xf4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	f043 0320 	orr.w	r3, r3, #32
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f8ce 	bl	8000f80 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000de4:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <LCD16X2_Init+0xf8>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	701a      	strb	r2, [r3, #0]
  LCD16X2_Display();
 8000dea:	f000 f875 	bl	8000ed8 <LCD16X2_Display>
  LCD16X2_Clear();
 8000dee:	f000 f82b 	bl	8000e48 <LCD16X2_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <LCD16X2_Init+0xfc>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000df8:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <LCD16X2_Init+0xfc>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f8bc 	bl	8000f80 <SendCommand>
  DelayUS(4500);
 8000e08:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e0c:	f000 f968 	bl	80010e0 <DelayUS>

  LCD16X2_CreateSpecialChar(0, special1);
 8000e10:	490b      	ldr	r1, [pc, #44]	@ (8000e40 <LCD16X2_Init+0x100>)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f876 	bl	8000f04 <LCD16X2_CreateSpecialChar>
  LCD16X2_CreateSpecialChar(1, special2);
 8000e18:	490a      	ldr	r1, [pc, #40]	@ (8000e44 <LCD16X2_Init+0x104>)
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 f872 	bl	8000f04 <LCD16X2_CreateSpecialChar>

  LCD16X2_Home();
 8000e20:	f000 f81d 	bl	8000e5e <LCD16X2_Home>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200004bf 	.word	0x200004bf
 8000e30:	200004c0 	.word	0x200004c0
 8000e34:	200004bc 	.word	0x200004bc
 8000e38:	200004bd 	.word	0x200004bd
 8000e3c:	200004be 	.word	0x200004be
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008

08000e48 <LCD16X2_Clear>:

void LCD16X2_Clear()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 f897 	bl	8000f80 <SendCommand>
  DelayUS(2000);
 8000e52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e56:	f000 f943 	bl	80010e0 <DelayUS>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <LCD16X2_Home>:

void LCD16X2_Home()
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e62:	2002      	movs	r0, #2
 8000e64:	f000 f88c 	bl	8000f80 <SendCommand>
  DelayUS(2000);
 8000e68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e6c:	f000 f938 	bl	80010e0 <DelayUS>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LCD16X2_SetCursor>:

void LCD16X2_SetCursor(uint8_t col, uint8_t row)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <LCD16X2_SetCursor+0x5c>)
 8000e86:	f107 0408 	add.w	r4, r7, #8
 8000e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <LCD16X2_SetCursor+0x60>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	79ba      	ldrb	r2, [r7, #6]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d303      	bcc.n	8000ea2 <LCD16X2_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <LCD16X2_SetCursor+0x60>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	3318      	adds	r3, #24
 8000ea8:	443b      	add	r3, r7
 8000eaa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f85d 	bl	8000f80 <SendCommand>
}
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800c7c8 	.word	0x0800c7c8
 8000ed4:	200004bf 	.word	0x200004bf

08000ed8 <LCD16X2_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD16X2_Display()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <LCD16X2_Display+0x28>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <LCD16X2_Display+0x28>)
 8000ee8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <LCD16X2_Display+0x28>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f843 	bl	8000f80 <SendCommand>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200004bd 	.word	0x200004bd

08000f04 <LCD16X2_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void LCD16X2_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f82a 	bl	8000f80 <SendCommand>
  for (int i=0; i<8; i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e009      	b.n	8000f46 <LCD16X2_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f82e 	bl	8000f9c <SendChar>
  for (int i=0; i<8; i++)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b07      	cmp	r3, #7
 8000f4a:	ddf2      	ble.n	8000f32 <LCD16X2_CreateSpecialChar+0x2e>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <LCD16X2_PrintStr>:
{
  LCD16X2_CreateSpecialChar(char_num, rows);
}

void LCD16X2_PrintStr(const char c[])
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000f5e:	e006      	b.n	8000f6e <LCD16X2_PrintStr+0x18>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f817 	bl	8000f9c <SendChar>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f4      	bne.n	8000f60 <LCD16X2_PrintStr+0xa>
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f812 	bl	8000fb8 <Send>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f804 	bl	8000fb8 <Send>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f023 030f 	bic.w	r3, r3, #15
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f80b 	bl	8000ffa <Write4Bits>
  Write4Bits((lownib)|mode);
 8000fe4:	7bba      	ldrb	r2, [r7, #14]
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f804 	bl	8000ffa <Write4Bits>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f808 	bl	800101c <ExpanderWrite>
  PulseEnable(value);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f820 	bl	8001054 <PulseEnable>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <ExpanderWrite+0x30>)
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4313      	orrs	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001032:	f107 020f 	add.w	r2, r7, #15
 8001036:	230a      	movs	r3, #10
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	214e      	movs	r1, #78	@ 0x4e
 800103e:	4804      	ldr	r0, [pc, #16]	@ (8001050 <ExpanderWrite+0x34>)
 8001040:	f003 fc2a 	bl	8004898 <HAL_I2C_Master_Transmit>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200004c0 	.word	0x200004c0
 8001050:	200005f8 	.word	0x200005f8

08001054 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ffd8 	bl	800101c <ExpanderWrite>
  DelayUS(20);
 800106c:	2014      	movs	r0, #20
 800106e:	f000 f837 	bl	80010e0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f023 0304 	bic.w	r3, r3, #4
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffce 	bl	800101c <ExpanderWrite>
  DelayUS(20);
 8001080:	2014      	movs	r0, #20
 8001082:	f000 f82d 	bl	80010e0 <DelayUS>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <DelayInit>:

static void DelayInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <DelayInit+0x48>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <DelayInit+0x48>)
 800109a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800109e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <DelayInit+0x48>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <DelayInit+0x48>)
 80010a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010aa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <DelayInit+0x4c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <DelayInit+0x4c>)
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <DelayInit+0x4c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <DelayInit+0x4c>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <DelayInit+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80010ca:	bf00      	nop
  __ASM volatile ("NOP");
 80010cc:	bf00      	nop
  __ASM volatile ("NOP");
 80010ce:	bf00      	nop
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	e000edf0 	.word	0xe000edf0
 80010dc:	e0001000 	.word	0xe0001000

080010e0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <DelayUS+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <DelayUS+0x44>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9a      	lsrs	r2, r3, #18
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <DelayUS+0x48>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <DelayUS+0x48>)
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f6      	bhi.n	8001102 <DelayUS+0x22>
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000014 	.word	0x20000014
 8001124:	431bde83 	.word	0x431bde83
 8001128:	e0001000 	.word	0xe0001000

0800112c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <Ringbuf_init+0x38>)
 8001132:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <Ringbuf_init+0x3c>)
 8001134:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <Ringbuf_init+0x40>)
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <Ringbuf_init+0x44>)
 800113a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <Ringbuf_init+0x48>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <Ringbuf_init+0x48>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <Ringbuf_init+0x48>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <Ringbuf_init+0x48>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0220 	orr.w	r2, r2, #32
 800115a:	60da      	str	r2, [r3, #12]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000554 	.word	0x20000554
 8001168:	200004c4 	.word	0x200004c4
 800116c:	20000558 	.word	0x20000558
 8001170:	2000050c 	.word	0x2000050c
 8001174:	200006dc 	.word	0x200006dc

08001178 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	3301      	adds	r3, #1
 800118a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800118e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	d007      	beq.n	80011aa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	79f9      	ldrb	r1, [r7, #7]
 80011a2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <Uart_write>:
}

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db21      	blt.n	8001206 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <Uart_write+0x5c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	3301      	adds	r3, #1
 80011ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011ce:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 80011d0:	bf00      	nop
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <Uart_write+0x5c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d0f9      	beq.n	80011d2 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <Uart_write+0x5c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <Uart_write+0x5c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	b2c9      	uxtb	r1, r1
 80011ec:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <Uart_write+0x5c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <Uart_write+0x60>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <Uart_write+0x60>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001204:	60da      	str	r2, [r3, #12]
	}
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000558 	.word	0x20000558
 8001214:	200006dc 	.word	0x200006dc

08001218 <Uart_sendstring>:
}

/* sends the string to the uart
 */
void Uart_sendstring (const char *s)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001220:	e006      	b.n	8001230 <Uart_sendstring+0x18>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffc2 	bl	80011b4 <Uart_write>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f4      	bne.n	8001222 <Uart_sendstring+0xa>
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <Uart_flush>:
		indx++;
	}
}

void Uart_flush (void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <Uart_flush+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2240      	movs	r2, #64	@ 0x40
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f008 fa74 	bl	800973e <memset>
	_rx_buffer->head = 0;
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <Uart_flush+0x28>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
	_rx_buffer->tail = 0;
 800125e:	4b03      	ldr	r3, [pc, #12]	@ (800126c <Uart_flush+0x28>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000554 	.word	0x20000554

08001270 <Uart_peek>:

int Uart_peek()
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <Uart_peek+0x30>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <Uart_peek+0x30>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001280:	429a      	cmp	r2, r3
 8001282:	d102      	bne.n	800128a <Uart_peek+0x1a>
  {
    return -1;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	e005      	b.n	8001296 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <Uart_peek+0x30>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <Uart_peek+0x30>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001294:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000554 	.word	0x20000554

080012a4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d013      	beq.n	80012ee <Uart_isr+0x4a>
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00e      	beq.n	80012ee <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <Uart_isr+0xac>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff46 	bl	8001178 <store_char>
        return;
 80012ec:	e02c      	b.n	8001348 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d027      	beq.n	8001348 <Uart_isr+0xa4>
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d022      	beq.n	8001348 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <Uart_isr+0xb0>)
 8001304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <Uart_isr+0xb0>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	429a      	cmp	r2, r3
 800130c:	d108      	bne.n	8001320 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800131c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800131e:	e012      	b.n	8001346 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <Uart_isr+0xb0>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <Uart_isr+0xb0>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <Uart_isr+0xb0>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	3301      	adds	r3, #1
 8001330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <Uart_isr+0xb0>)
 8001336:	6453      	str	r3, [r2, #68]	@ 0x44
    	      huart->Instance->SR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	7bba      	ldrb	r2, [r7, #14]
 8001344:	605a      	str	r2, [r3, #4]
    	return;
 8001346:	bf00      	nop
    }
}
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000554 	.word	0x20000554
 8001354:	2000050c 	.word	0x2000050c

08001358 <vref>:
void StartAdcTask(void const *argument);
void StartBalansTask(void const *argument);

/* USER CODE BEGIN PFP */

uint32_t vref(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	float Vref = 0.0;
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
	uint32_t dgr = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
	Vref = (1.20 / adc_buffer[6]) * 4095.0;
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <vref+0x70>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8ed 	bl	800054c <__aeabi_ui2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	f04f 3033 	mov.w	r0, #858993459	@ 0x33333333
 800137a:	4914      	ldr	r1, [pc, #80]	@ (80013cc <vref+0x74>)
 800137c:	f7ff fa8a 	bl	8000894 <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a30d      	add	r3, pc, #52	@ (adr r3, 80013c0 <vref+0x68>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f957 	bl	8000640 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fc49 	bl	8000c30 <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
 80013a0:	607b      	str	r3, [r7, #4]
	dgr = Vref * 1000;
 80013a2:	490b      	ldr	r1, [pc, #44]	@ (80013d0 <vref+0x78>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7fe fedb 	bl	8000160 <__aeabi_fmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fc8f 	bl	8000cd0 <__aeabi_f2uiz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	603b      	str	r3, [r7, #0]
	return dgr;
 80013b6:	683b      	ldr	r3, [r7, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40affe00 	.word	0x40affe00
 80013c8:	20000730 	.word	0x20000730
 80013cc:	3ff33333 	.word	0x3ff33333
 80013d0:	447a0000 	.word	0x447a0000

080013d4 <tempMCU>:

int tempMCU(void) {
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	temperature =
			(uint16_t) ((V25 - (uint16_t) adc_buffer[5]) / Avg_Slope + 25);
 80013d8:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 80013dc:	461a      	mov	r2, r3
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <tempMCU+0x30>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2205      	movs	r2, #5
 80013e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3319      	adds	r3, #25
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	461a      	mov	r2, r3
	temperature =
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <tempMCU+0x34>)
 80013f6:	601a      	str	r2, [r3, #0]
	return temperature;
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <tempMCU+0x34>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000730 	.word	0x20000730
 8001408:	20000760 	.word	0x20000760
 800140c:	00000000 	.word	0x00000000

08001410 <analogtan_veriye>:
uint32_t analogtan_veriye(uint32_t kanal, uint32_t Vrefint) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	return (Vrefint * kanal) / 4095.0;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f892 	bl	800054c <__aeabi_ui2d>
 8001428:	a307      	add	r3, pc, #28	@ (adr r3, 8001448 <analogtan_veriye+0x38>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fa31 	bl	8000894 <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbd9 	bl	8000bf0 <__aeabi_d2uiz>
 800143e:	4603      	mov	r3, r0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	00000000 	.word	0x00000000
 800144c:	40affe00 	.word	0x40affe00

08001450 <pilleri_olc>:

void pilleri_olc(void) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; ++i) {
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e014      	b.n	8001486 <pilleri_olc+0x36>
		pil[i] = (uint16_t) analogtan_veriye(adc_buffer[i], vref());
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4a0e      	ldr	r2, [pc, #56]	@ (8001498 <pilleri_olc+0x48>)
 8001460:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001464:	f7ff ff78 	bl	8001358 <vref>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff ffcf 	bl	8001410 <analogtan_veriye>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4611      	mov	r1, r2
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <pilleri_olc+0x4c>)
 800147c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 4; ++i) {
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	3301      	adds	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d9e7      	bls.n	800145c <pilleri_olc+0xc>
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000730 	.word	0x20000730
 800149c:	20000750 	.word	0x20000750

080014a0 <prescalerVeCounterBul>:
	LCD16X2_PrintStr(giden_data);

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
}

void prescalerVeCounterBul(uint32_t sayi) {
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	int8_t basamak = 0, bolum = 0, sifirSayisi = -1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
 80014ac:	2300      	movs	r3, #0
 80014ae:	75bb      	strb	r3, [r7, #22]
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	757b      	strb	r3, [r7, #21]
	uint32_t sayi1 = sayi;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	613b      	str	r3, [r7, #16]
	while (sayi1 > 0) {
 80014b8:	e00b      	b.n	80014d2 <prescalerVeCounterBul+0x32>
		sayi1 = sayi1 / 10;
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4a39      	ldr	r2, [pc, #228]	@ (80015a4 <prescalerVeCounterBul+0x104>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	613b      	str	r3, [r7, #16]
		basamak++;
 80014c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	75fb      	strb	r3, [r7, #23]
	while (sayi1 > 0) {
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <prescalerVeCounterBul+0x1a>
	}

	/*sprintf(giden_data, "basamak Sayisi:%d\n", basamak);
	 Uart_sendstring(giden_data);*/

	uint32_t sayi2 = sayi;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60fb      	str	r3, [r7, #12]
	while (bolum == 0) {
 80014dc:	e017      	b.n	800150e <prescalerVeCounterBul+0x6e>
		bolum = sayi2 % 10;
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <prescalerVeCounterBul+0x104>)
 80014e2:	fba3 2301 	umull	r2, r3, r3, r1
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	1aca      	subs	r2, r1, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	75bb      	strb	r3, [r7, #22]
		sayi2 = sayi2 / 10;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a2a      	ldr	r2, [pc, #168]	@ (80015a4 <prescalerVeCounterBul+0x104>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	60fb      	str	r3, [r7, #12]
		sifirSayisi++;
 8001502:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3301      	adds	r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	757b      	strb	r3, [r7, #21]
	while (bolum == 0) {
 800150e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0e3      	beq.n	80014de <prescalerVeCounterBul+0x3e>
	/*sprintf(giden_data, "Sifir Sayisi:%d\n", sifirSayisi);
	 Uart_sendstring(giden_data);*/

	//int r =0;
	//r=pow(10,sifirSayisi);
	prescalerDeger = (sayi / pow(10, sifirSayisi)) - 1;
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff f818 	bl	800054c <__aeabi_ui2d>
 800151c:	4604      	mov	r4, r0
 800151e:	460d      	mov	r5, r1
 8001520:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f821 	bl	800056c <__aeabi_i2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	f04f 0000 	mov.w	r0, #0
 8001532:	491d      	ldr	r1, [pc, #116]	@ (80015a8 <prescalerVeCounterBul+0x108>)
 8001534:	f00a fa2c 	bl	800b990 <pow>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7ff f9a8 	bl	8000894 <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <prescalerVeCounterBul+0x10c>)
 8001552:	f7fe febd 	bl	80002d0 <__aeabi_dsub>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fb47 	bl	8000bf0 <__aeabi_d2uiz>
 8001562:	4603      	mov	r3, r0
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <prescalerVeCounterBul+0x110>)
 8001566:	6013      	str	r3, [r2, #0]
	counterPeriod = pow(10, sifirSayisi) - 1;
 8001568:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fffd 	bl	800056c <__aeabi_i2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	490b      	ldr	r1, [pc, #44]	@ (80015a8 <prescalerVeCounterBul+0x108>)
 800157c:	f00a fa08 	bl	800b990 <pow>
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <prescalerVeCounterBul+0x10c>)
 8001586:	f7fe fea3 	bl	80002d0 <__aeabi_dsub>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fb2d 	bl	8000bf0 <__aeabi_d2uiz>
 8001596:	4603      	mov	r3, r0
 8001598:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <prescalerVeCounterBul+0x114>)
 800159a:	6013      	str	r3, [r2, #0]

	/*sprintf(giden_data, "prc: %ld, cnt: %ld\n", prescalerDeger, counterPeriod);
	 Uart_sendstring(giden_data);*/

}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bdb0      	pop	{r4, r5, r7, pc}
 80015a4:	cccccccd 	.word	0xcccccccd
 80015a8:	40240000 	.word	0x40240000
 80015ac:	3ff00000 	.word	0x3ff00000
 80015b0:	2000076c 	.word	0x2000076c
 80015b4:	20000768 	.word	0x20000768

080015b8 <setPWMFrequencyAndDutyCycle>:

void setPWMFrequencyAndDutyCycle(TIM_HandleTypeDef *htim, uint8_t kanal,
		uint32_t frequency, uint8_t dutyCycle) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	@ 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
 80015c8:	4613      	mov	r3, r2
 80015ca:	72bb      	strb	r3, [r7, #10]
	//uint32_t prescalerValue = 0;
	//prescalerValue = ((HAL_RCC_GetSysClockFreq() / (frequency * (htim->Init.Period+1)))-1);
	//prsc = prescalerValue;
	if (dutyCycle > 0) {
 80015cc:	7abb      	ldrb	r3, [r7, #10]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80b8 	beq.w	8001744 <setPWMFrequencyAndDutyCycle+0x18c>
		prescalerVeCounterBul(72000000 / frequency);
 80015d4:	4a5d      	ldr	r2, [pc, #372]	@ (800174c <setPWMFrequencyAndDutyCycle+0x194>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <prescalerVeCounterBul>
		switch (kanal) {
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d018      	beq.n	800161a <setPWMFrequencyAndDutyCycle+0x62>
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	dc1f      	bgt.n	800162c <setPWMFrequencyAndDutyCycle+0x74>
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d002      	beq.n	80015f6 <setPWMFrequencyAndDutyCycle+0x3e>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d009      	beq.n	8001608 <setPWMFrequencyAndDutyCycle+0x50>
 80015f4:	e01a      	b.n	800162c <setPWMFrequencyAndDutyCycle+0x74>
		case 1:
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 80015f6:	2100      	movs	r1, #0
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f004 fc37 	bl	8005e6c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_1);
 80015fe:	2100      	movs	r1, #0
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f005 fa8f 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
			break;
 8001606:	e011      	b.n	800162c <setPWMFrequencyAndDutyCycle+0x74>
		case 2:
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_2);
 8001608:	2104      	movs	r1, #4
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f004 fc2e 	bl	8005e6c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_2);
 8001610:	2104      	movs	r1, #4
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f005 fa86 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
			break;
 8001618:	e008      	b.n	800162c <setPWMFrequencyAndDutyCycle+0x74>
		case 3:
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_3);
 800161a:	2108      	movs	r1, #8
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f004 fc25 	bl	8005e6c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_3);
 8001622:	2108      	movs	r1, #8
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f005 fa7d 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
			break;
 800162a:	bf00      	nop

		}
		// Timer'ı durdur

		// Prescaler ve Period değerlerini güncelle
		htim->Instance->PSC = prescalerDeger;	//prescalerValue;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a47      	ldr	r2, [pc, #284]	@ (8001750 <setPWMFrequencyAndDutyCycle+0x198>)
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
		htim->Instance->ARR = counterPeriod;//(HAL_RCC_GetSysClockFreq() / (prescalerValue + 1)) / frequency - 1;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a46      	ldr	r2, [pc, #280]	@ (8001754 <setPWMFrequencyAndDutyCycle+0x19c>)
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
		// Duty cycle'ı güncelle
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001654:	2360      	movs	r3, #96	@ 0x60
 8001656:	617b      	str	r3, [r7, #20]
		sConfigOC.Pulse = (dutyCycle * (counterPeriod + 1)) / 100;
 8001658:	7abb      	ldrb	r3, [r7, #10]
 800165a:	4a3e      	ldr	r2, [pc, #248]	@ (8001754 <setPWMFrequencyAndDutyCycle+0x19c>)
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	3201      	adds	r2, #1
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	4a3c      	ldr	r2, [pc, #240]	@ (8001758 <setPWMFrequencyAndDutyCycle+0x1a0>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	61bb      	str	r3, [r7, #24]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24

		// PWM kanal konfigürasyonunu güncelle
		if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4837      	ldr	r0, [pc, #220]	@ (800175c <setPWMFrequencyAndDutyCycle+0x1a4>)
 8001680:	f004 fd60 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <setPWMFrequencyAndDutyCycle+0xd6>
				!= HAL_OK) {
			Error_Handler();
 800168a:	f001 f979 	bl	8002980 <Error_Handler>
		}
		if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2204      	movs	r2, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4831      	ldr	r0, [pc, #196]	@ (800175c <setPWMFrequencyAndDutyCycle+0x1a4>)
 8001698:	f004 fd54 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <setPWMFrequencyAndDutyCycle+0xee>
				!= HAL_OK) {
			Error_Handler();
 80016a2:	f001 f96d 	bl	8002980 <Error_Handler>
		}
		if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2208      	movs	r2, #8
 80016ac:	4619      	mov	r1, r3
 80016ae:	482b      	ldr	r0, [pc, #172]	@ (800175c <setPWMFrequencyAndDutyCycle+0x1a4>)
 80016b0:	f004 fd48 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <setPWMFrequencyAndDutyCycle+0x106>
				!= HAL_OK) {
			Error_Handler();
 80016ba:	f001 f961 	bl	8002980 <Error_Handler>
		}

		// Timer'ı tekrar başlat

		switch (kanal) {
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d018      	beq.n	80016f6 <setPWMFrequencyAndDutyCycle+0x13e>
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	dc1f      	bgt.n	8001708 <setPWMFrequencyAndDutyCycle+0x150>
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d002      	beq.n	80016d2 <setPWMFrequencyAndDutyCycle+0x11a>
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d009      	beq.n	80016e4 <setPWMFrequencyAndDutyCycle+0x12c>
 80016d0:	e01a      	b.n	8001708 <setPWMFrequencyAndDutyCycle+0x150>
		case 1:
			HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80016d2:	2100      	movs	r1, #0
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f004 fb27 	bl	8005d28 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 80016da:	2100      	movs	r1, #0
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f005 f983 	bl	80069e8 <HAL_TIMEx_PWMN_Start>
			break;
 80016e2:	e011      	b.n	8001708 <setPWMFrequencyAndDutyCycle+0x150>
		case 2:
			HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 80016e4:	2104      	movs	r1, #4
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f004 fb1e 	bl	8005d28 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_2);
 80016ec:	2104      	movs	r1, #4
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f005 f97a 	bl	80069e8 <HAL_TIMEx_PWMN_Start>
			break;
 80016f4:	e008      	b.n	8001708 <setPWMFrequencyAndDutyCycle+0x150>
		case 3:
			HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 80016f6:	2108      	movs	r1, #8
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f004 fb15 	bl	8005d28 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_3);
 80016fe:	2108      	movs	r1, #8
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f005 f971 	bl	80069e8 <HAL_TIMEx_PWMN_Start>
			break;
 8001706:	bf00      	nop

		}

		frekans = (72000000 / (prescalerDeger + 1) * (counterPeriod + 1))
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <setPWMFrequencyAndDutyCycle+0x198>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <setPWMFrequencyAndDutyCycle+0x194>)
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <setPWMFrequencyAndDutyCycle+0x19c>)
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	3201      	adds	r2, #1
 800171a:	fb02 f303 	mul.w	r3, r2, r3
				/ 10000;
 800171e:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <setPWMFrequencyAndDutyCycle+0x1a8>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0b5b      	lsrs	r3, r3, #13
		frekans = (72000000 / (prescalerDeger + 1) * (counterPeriod + 1))
 8001726:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <setPWMFrequencyAndDutyCycle+0x1ac>)
 8001728:	6013      	str	r3, [r2, #0]
		duty = (dutyCycle * (counterPeriod + 1)) / 100;
 800172a:	7abb      	ldrb	r3, [r7, #10]
 800172c:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <setPWMFrequencyAndDutyCycle+0x19c>)
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	3201      	adds	r2, #1
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <setPWMFrequencyAndDutyCycle+0x1a0>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <setPWMFrequencyAndDutyCycle+0x1b0>)
 8001742:	701a      	strb	r2, [r3, #0]
	}

}
 8001744:	bf00      	nop
 8001746:	3730      	adds	r7, #48	@ 0x30
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	044aa200 	.word	0x044aa200
 8001750:	2000076c 	.word	0x2000076c
 8001754:	20000768 	.word	0x20000768
 8001758:	51eb851f 	.word	0x51eb851f
 800175c:	2000064c 	.word	0x2000064c
 8001760:	d1b71759 	.word	0xd1b71759
 8001764:	20000770 	.word	0x20000770
 8001768:	20000774 	.word	0x20000774

0800176c <hesaplaAdcDegerleri>:

void hesaplaAdcDegerleri(int adcDegerleri[], int boyut) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	max = adcDegerleri[0];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <hesaplaAdcDegerleri+0xbc>)
 800177e:	801a      	strh	r2, [r3, #0]
	min = adcDegerleri[0];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b29      	ldr	r3, [pc, #164]	@ (800182c <hesaplaAdcDegerleri+0xc0>)
 8001788:	801a      	strh	r2, [r3, #0]
	maxIndex = 0;
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <hesaplaAdcDegerleri+0xc4>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	minIndex = 0;
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <hesaplaAdcDegerleri+0xc8>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	uint32_t toplam = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < boyut; i++) {
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	e034      	b.n	800180a <hesaplaAdcDegerleri+0x9e>
		if (adcDegerleri[i] > max) {
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001828 <hesaplaAdcDegerleri+0xbc>)
 80017ac:	8812      	ldrh	r2, [r2, #0]
 80017ae:	b292      	uxth	r2, r2
 80017b0:	4293      	cmp	r3, r2
 80017b2:	dd0a      	ble.n	80017ca <hesaplaAdcDegerleri+0x5e>
			max = adcDegerleri[i];
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <hesaplaAdcDegerleri+0xbc>)
 80017c2:	801a      	strh	r2, [r3, #0]
			maxIndex = i;
 80017c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <hesaplaAdcDegerleri+0xc4>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	6013      	str	r3, [r2, #0]
		}
		if (adcDegerleri[i] < min) {
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a15      	ldr	r2, [pc, #84]	@ (800182c <hesaplaAdcDegerleri+0xc0>)
 80017d6:	8812      	ldrh	r2, [r2, #0]
 80017d8:	4293      	cmp	r3, r2
 80017da:	da0a      	bge.n	80017f2 <hesaplaAdcDegerleri+0x86>
			min = adcDegerleri[i];
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b10      	ldr	r3, [pc, #64]	@ (800182c <hesaplaAdcDegerleri+0xc0>)
 80017ea:	801a      	strh	r2, [r3, #0]
			minIndex = i;
 80017ec:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <hesaplaAdcDegerleri+0xc8>)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	6013      	str	r3, [r2, #0]
		}
		toplam += adcDegerleri[i];
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < boyut; i++) {
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3301      	adds	r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbc6      	blt.n	80017a0 <hesaplaAdcDegerleri+0x34>
	}

	ortalama = toplam / boyut;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <hesaplaAdcDegerleri+0xcc>)
 800181c:	6013      	str	r3, [r2, #0]

	/*
	 printf("Maksimum ADC degeri: %d, Indeksi: %d\n", max, maxIndex);
	 printf("Minimum ADC degeri: %d, Indeksi: %d\n", min, minIndex);
	 printf("Ortalama ADC degeri: %d\n", ortalama);*/
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000782 	.word	0x20000782
 800182c:	20000784 	.word	0x20000784
 8001830:	20000788 	.word	0x20000788
 8001834:	2000078c 	.word	0x2000078c
 8001838:	20000790 	.word	0x20000790

0800183c <map>:

uint8_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 800183c:	b490      	push	{r4, r7}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800185a:	88fa      	ldrh	r2, [r7, #6]
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	8a39      	ldrh	r1, [r7, #16]
 8001862:	883a      	ldrh	r2, [r7, #0]
 8001864:	1a8a      	subs	r2, r1, r2
 8001866:	fb03 f202 	mul.w	r2, r3, r2
 800186a:	8879      	ldrh	r1, [r7, #2]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1acb      	subs	r3, r1, r3
 8001870:	fb92 f3f3 	sdiv	r3, r2, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	883b      	ldrh	r3, [r7, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b2db      	uxtb	r3, r3
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bc90      	pop	{r4, r7}
 8001886:	4770      	bx	lr

08001888 <pwmSecimi>:

void pwmSecimi(void) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 3; ++i) {
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	e019      	b.n	80018c8 <pwmSecimi+0x40>
		voltFark[i] = (voltFark[i] / 10) * 10;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4a5a      	ldr	r2, [pc, #360]	@ (8001a00 <pwmSecimi+0x178>)
 8001898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189c:	b21b      	sxth	r3, r3
 800189e:	4a59      	ldr	r2, [pc, #356]	@ (8001a04 <pwmSecimi+0x17c>)
 80018a0:	fb82 1203 	smull	r1, r2, r2, r3
 80018a4:	1092      	asrs	r2, r2, #2
 80018a6:	17db      	asrs	r3, r3, #31
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	b211      	sxth	r1, r2
 80018bc:	4a50      	ldr	r2, [pc, #320]	@ (8001a00 <pwmSecimi+0x178>)
 80018be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 3; ++i) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	3301      	adds	r3, #1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d9e2      	bls.n	8001894 <pwmSecimi+0xc>
	}

	max = 0;
 80018ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001a08 <pwmSecimi+0x180>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	801a      	strh	r2, [r3, #0]
	*voltFark = 0;
 80018d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <pwmSecimi+0x178>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 3; i++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	e04f      	b.n	8001980 <pwmSecimi+0xf8>
		if (pil[i] > pil[i + 1]) {
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	4a4a      	ldr	r2, [pc, #296]	@ (8001a0c <pwmSecimi+0x184>)
 80018e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4947      	ldr	r1, [pc, #284]	@ (8001a0c <pwmSecimi+0x184>)
 80018ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dd12      	ble.n	800191c <pwmSecimi+0x94>
			voltFark[i] = pil[i] - pil[i + 1];
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	4a44      	ldr	r2, [pc, #272]	@ (8001a0c <pwmSecimi+0x184>)
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	3301      	adds	r3, #1
 8001904:	4941      	ldr	r1, [pc, #260]	@ (8001a0c <pwmSecimi+0x184>)
 8001906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800190a:	b29b      	uxth	r3, r3
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b29a      	uxth	r2, r3
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	b211      	sxth	r1, r2
 8001914:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <pwmSecimi+0x178>)
 8001916:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800191a:	e004      	b.n	8001926 <pwmSecimi+0x9e>
		} else {
			voltFark[i] = 0;
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	4a38      	ldr	r2, [pc, #224]	@ (8001a00 <pwmSecimi+0x178>)
 8001920:	2100      	movs	r1, #0
 8001922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (voltFark[i] > max) {
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	4a35      	ldr	r2, [pc, #212]	@ (8001a00 <pwmSecimi+0x178>)
 800192a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192e:	b21b      	sxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <pwmSecimi+0x180>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	429a      	cmp	r2, r3
 800193a:	dd07      	ble.n	800194c <pwmSecimi+0xc4>
			max = voltFark[i];
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <pwmSecimi+0x178>)
 8001940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001944:	b21b      	sxth	r3, r3
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <pwmSecimi+0x180>)
 800194a:	801a      	strh	r2, [r3, #0]

		}
		voltFark[i] = (voltFark[i] / 10) * 10;
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a00 <pwmSecimi+0x178>)
 8001950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001954:	b21b      	sxth	r3, r3
 8001956:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <pwmSecimi+0x17c>)
 8001958:	fb82 1203 	smull	r1, r2, r2, r3
 800195c:	1092      	asrs	r2, r2, #2
 800195e:	17db      	asrs	r3, r3, #31
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	b21b      	sxth	r3, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	b211      	sxth	r1, r2
 8001974:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <pwmSecimi+0x178>)
 8001976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 3; i++) {
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	3301      	adds	r3, #1
 800197e:	71bb      	strb	r3, [r7, #6]
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d9ac      	bls.n	80018e0 <pwmSecimi+0x58>
		 printf("%d.fark= %d\n",i,voltFark[i]);
		 printf("max= %d\n",maxV);*/

	}

	max = (max / 10) * 10;
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <pwmSecimi+0x180>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <pwmSecimi+0x188>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	08db      	lsrs	r3, r3, #3
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <pwmSecimi+0x180>)
 80019a2:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 3; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	717b      	strb	r3, [r7, #5]
 80019a8:	e022      	b.n	80019f0 <pwmSecimi+0x168>
		if (voltFark[i] > voltajFark) {
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <pwmSecimi+0x178>)
 80019ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	dd14      	ble.n	80019e2 <pwmSecimi+0x15a>
			hesaplananPwm[i] = map(voltFark[i], 0, max, 0, MAX_PWM_DUTY_CYCLE);
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <pwmSecimi+0x178>)
 80019bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	b298      	uxth	r0, r3
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <pwmSecimi+0x180>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	797c      	ldrb	r4, [r7, #5]
 80019cc:	2346      	movs	r3, #70	@ 0x46
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2300      	movs	r3, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	f7ff ff32 	bl	800183c <map>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <pwmSecimi+0x18c>)
 80019de:	551a      	strb	r2, [r3, r4]
 80019e0:	e003      	b.n	80019ea <pwmSecimi+0x162>
		} else {
			hesaplananPwm[i] = 0;
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <pwmSecimi+0x18c>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 3; i++) {
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	3301      	adds	r3, #1
 80019ee:	717b      	strb	r3, [r7, #5]
 80019f0:	797b      	ldrb	r3, [r7, #5]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d9d9      	bls.n	80019aa <pwmSecimi+0x122>
	 sprintf(giden_data, "%d-%d.Farki = %d,Pwm:%d\n", i, i + 1, voltFark[i],
	 hesaplananPwm[i]);
	 Uart_sendstring(giden_data);

	 }*/
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	2000077c 	.word	0x2000077c
 8001a04:	66666667 	.word	0x66666667
 8001a08:	20000782 	.word	0x20000782
 8001a0c:	20000750 	.word	0x20000750
 8001a10:	cccccccd 	.word	0xcccccccd
 8001a14:	20000778 	.word	0x20000778

08001a18 <limitKontrol>:
void limitKontrol(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	if ((pil[0] > azamiVoltaj) && (pil[1] > azamiVoltaj)
 8001a1c:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dd1e      	ble.n	8001a66 <limitKontrol+0x4e>
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001a30:	4293      	cmp	r3, r2
 8001a32:	dd18      	ble.n	8001a66 <limitKontrol+0x4e>
			&& (pil[2] > azamiVoltaj) && (pil[3] > azamiVoltaj)) {
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	dd12      	ble.n	8001a66 <limitKontrol+0x4e>
 8001a40:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	dd0c      	ble.n	8001a66 <limitKontrol+0x4e>
		azamiDurum = false;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <limitKontrol+0xa0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(kaynak_bagla_GPIO_Port, kaynak_bagla_Pin, RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	4819      	ldr	r0, [pc, #100]	@ (8001abc <limitKontrol+0xa4>)
 8001a58:	f002 fd86 	bl	8004568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yuk_bagla_GPIO_Port, yuk_bagla_Pin, RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2140      	movs	r1, #64	@ 0x40
 8001a60:	4816      	ldr	r0, [pc, #88]	@ (8001abc <limitKontrol+0xa4>)
 8001a62:	f002 fd81 	bl	8004568 <HAL_GPIO_WritePin>
	}

	if ((pil[0] < asgariVoltaj) && (pil[1] < asgariVoltaj)
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f240 3251 	movw	r2, #849	@ 0x351
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	dc1e      	bgt.n	8001ab0 <limitKontrol+0x98>
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f240 3251 	movw	r2, #849	@ 0x351
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	dc18      	bgt.n	8001ab0 <limitKontrol+0x98>
			&& (pil[2] < asgariVoltaj) && (pil[3] < asgariVoltaj)) {
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f240 3251 	movw	r2, #849	@ 0x351
 8001a86:	4293      	cmp	r3, r2
 8001a88:	dc12      	bgt.n	8001ab0 <limitKontrol+0x98>
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <limitKontrol+0x9c>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f240 3251 	movw	r2, #849	@ 0x351
 8001a92:	4293      	cmp	r3, r2
 8001a94:	dc0c      	bgt.n	8001ab0 <limitKontrol+0x98>
		asgariDurum = false;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <limitKontrol+0xa8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(kaynak_bagla_GPIO_Port, kaynak_bagla_Pin, RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2180      	movs	r1, #128	@ 0x80
 8001aa0:	4806      	ldr	r0, [pc, #24]	@ (8001abc <limitKontrol+0xa4>)
 8001aa2:	f002 fd61 	bl	8004568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yuk_bagla_GPIO_Port, yuk_bagla_Pin, RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	4804      	ldr	r0, [pc, #16]	@ (8001abc <limitKontrol+0xa4>)
 8001aac:	f002 fd5c 	bl	8004568 <HAL_GPIO_WritePin>
	}

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000750 	.word	0x20000750
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	20000011 	.word	0x20000011

08001ac4 <balansTest>:

void balansTest(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	 if((abs(adcHamDeger[i]-adcHamDeger[i+1]))>voltajFark){
	 setPWMFrequencyAndDutyCycle(&htim1, 1, 100000, 10);
	 }
	 }*/
	//pwmSecimi();
	if (azamiDurum && asgariDurum && balansDurum) {	//balansDurum){//
 8001ac8:	4b54      	ldr	r3, [pc, #336]	@ (8001c1c <balansTest+0x158>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a2 	beq.w	8001c18 <balansTest+0x154>
 8001ad4:	4b52      	ldr	r3, [pc, #328]	@ (8001c20 <balansTest+0x15c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 809c 	beq.w	8001c18 <balansTest+0x154>
 8001ae0:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <balansTest+0x160>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8096 	beq.w	8001c18 <balansTest+0x154>
		if (hesaplananPwm[0] != 0 || hesaplananPwm[1] != 0
 8001aec:	4b4e      	ldr	r3, [pc, #312]	@ (8001c28 <balansTest+0x164>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d108      	bne.n	8001b06 <balansTest+0x42>
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <balansTest+0x164>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d104      	bne.n	8001b06 <balansTest+0x42>
				|| hesaplananPwm[2] != 0) {
 8001afc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <balansTest+0x164>)
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8089 	beq.w	8001c18 <balansTest+0x154>
			static uint8_t sayac = 0;

			sayac++;
 8001b06:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <balansTest+0x168>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b47      	ldr	r3, [pc, #284]	@ (8001c2c <balansTest+0x168>)
 8001b10:	701a      	strb	r2, [r3, #0]
			if (sayac > 2)
 8001b12:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <balansTest+0x168>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d902      	bls.n	8001b20 <balansTest+0x5c>
				sayac = 0;
 8001b1a:	4b44      	ldr	r3, [pc, #272]	@ (8001c2c <balansTest+0x168>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
//		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
//		 /*HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
//		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);*/
//		 }

			switch (sayac) {
 8001b20:	4b42      	ldr	r3, [pc, #264]	@ (8001c2c <balansTest+0x168>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d04e      	beq.n	8001bc6 <balansTest+0x102>
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	dc75      	bgt.n	8001c18 <balansTest+0x154>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <balansTest+0x72>
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d024      	beq.n	8001b7e <balansTest+0xba>
	 if(adcHamDeger[i]>azamiVoltaj){

	 }
	 }*/

}
 8001b34:	e070      	b.n	8001c18 <balansTest+0x154>
				if (hesaplananPwm[2] > 0) {
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <balansTest+0x164>)
 8001b38:	789b      	ldrb	r3, [r3, #2]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <balansTest+0x8a>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001b3e:	2108      	movs	r1, #8
 8001b40:	483b      	ldr	r0, [pc, #236]	@ (8001c30 <balansTest+0x16c>)
 8001b42:	f004 f993 	bl	8005e6c <HAL_TIM_PWM_Stop>
					HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8001b46:	2108      	movs	r1, #8
 8001b48:	4839      	ldr	r0, [pc, #228]	@ (8001c30 <balansTest+0x16c>)
 8001b4a:	f004 ffeb 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
				if (hesaplananPwm[1] > 0) {
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <balansTest+0x164>)
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <balansTest+0xa2>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b56:	2100      	movs	r1, #0
 8001b58:	4835      	ldr	r0, [pc, #212]	@ (8001c30 <balansTest+0x16c>)
 8001b5a:	f004 f987 	bl	8005e6c <HAL_TIM_PWM_Stop>
					HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4833      	ldr	r0, [pc, #204]	@ (8001c30 <balansTest+0x16c>)
 8001b62:	f004 ffdf 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
				if (hesaplananPwm[0] > 0) {
 8001b66:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <balansTest+0x164>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d04f      	beq.n	8001c0e <balansTest+0x14a>
					setPWMFrequencyAndDutyCycle(&htim1, 1, 100000,
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <balansTest+0x164>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4a30      	ldr	r2, [pc, #192]	@ (8001c34 <balansTest+0x170>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	482e      	ldr	r0, [pc, #184]	@ (8001c30 <balansTest+0x16c>)
 8001b78:	f7ff fd1e 	bl	80015b8 <setPWMFrequencyAndDutyCycle>
				break;
 8001b7c:	e047      	b.n	8001c0e <balansTest+0x14a>
				if (hesaplananPwm[0] > 0) {
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <balansTest+0x164>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <balansTest+0xd2>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b86:	2100      	movs	r1, #0
 8001b88:	4829      	ldr	r0, [pc, #164]	@ (8001c30 <balansTest+0x16c>)
 8001b8a:	f004 f96f 	bl	8005e6c <HAL_TIM_PWM_Stop>
					HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4827      	ldr	r0, [pc, #156]	@ (8001c30 <balansTest+0x16c>)
 8001b92:	f004 ffc7 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
				if (hesaplananPwm[2] > 0) {
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <balansTest+0x164>)
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <balansTest+0xea>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4823      	ldr	r0, [pc, #140]	@ (8001c30 <balansTest+0x16c>)
 8001ba2:	f004 f963 	bl	8005e6c <HAL_TIM_PWM_Stop>
					HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	4821      	ldr	r0, [pc, #132]	@ (8001c30 <balansTest+0x16c>)
 8001baa:	f004 ffbb 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
				if (hesaplananPwm[1] > 0) {
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <balansTest+0x164>)
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d02d      	beq.n	8001c12 <balansTest+0x14e>
					setPWMFrequencyAndDutyCycle(&htim1, 2, 100000,
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <balansTest+0x164>)
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <balansTest+0x170>)
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	481c      	ldr	r0, [pc, #112]	@ (8001c30 <balansTest+0x16c>)
 8001bc0:	f7ff fcfa 	bl	80015b8 <setPWMFrequencyAndDutyCycle>
				break;
 8001bc4:	e025      	b.n	8001c12 <balansTest+0x14e>
				if (hesaplananPwm[1] > 0) {
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <balansTest+0x164>)
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <balansTest+0x11a>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4817      	ldr	r0, [pc, #92]	@ (8001c30 <balansTest+0x16c>)
 8001bd2:	f004 f94b 	bl	8005e6c <HAL_TIM_PWM_Stop>
					HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	4815      	ldr	r0, [pc, #84]	@ (8001c30 <balansTest+0x16c>)
 8001bda:	f004 ffa3 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
				if (hesaplananPwm[0] > 0) {
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <balansTest+0x164>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <balansTest+0x132>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001be6:	2100      	movs	r1, #0
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <balansTest+0x16c>)
 8001bea:	f004 f93f 	bl	8005e6c <HAL_TIM_PWM_Stop>
					HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	480f      	ldr	r0, [pc, #60]	@ (8001c30 <balansTest+0x16c>)
 8001bf2:	f004 ff97 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
				if (hesaplananPwm[2] > 0) {
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <balansTest+0x164>)
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <balansTest+0x152>
					setPWMFrequencyAndDutyCycle(&htim1, 3, 100000,
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <balansTest+0x164>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	4a0c      	ldr	r2, [pc, #48]	@ (8001c34 <balansTest+0x170>)
 8001c04:	2103      	movs	r1, #3
 8001c06:	480a      	ldr	r0, [pc, #40]	@ (8001c30 <balansTest+0x16c>)
 8001c08:	f7ff fcd6 	bl	80015b8 <setPWMFrequencyAndDutyCycle>
				break;
 8001c0c:	e003      	b.n	8001c16 <balansTest+0x152>
				break;
 8001c0e:	bf00      	nop
 8001c10:	e002      	b.n	8001c18 <balansTest+0x154>
				break;
 8001c12:	bf00      	nop
 8001c14:	e000      	b.n	8001c18 <balansTest+0x154>
				break;
 8001c16:	bf00      	nop
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000010 	.word	0x20000010
 8001c20:	20000011 	.word	0x20000011
 8001c24:	2000077b 	.word	0x2000077b
 8001c28:	20000778 	.word	0x20000778
 8001c2c:	20000794 	.word	0x20000794
 8001c30:	2000064c 	.word	0x2000064c
 8001c34:	000186a0 	.word	0x000186a0

08001c38 <send_Lcd>:
void send_Lcd(void) {
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af02      	add	r7, sp, #8

	if (adc_ready != true) {

	}
	adc_ready = false;
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <send_Lcd+0x204>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]

	pilleri_olc();
 8001c44:	f7ff fc04 	bl	8001450 <pilleri_olc>

	static uint8_t cnt = 0;
	cnt++;
 8001c48:	4b7d      	ldr	r3, [pc, #500]	@ (8001e40 <send_Lcd+0x208>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b7b      	ldr	r3, [pc, #492]	@ (8001e40 <send_Lcd+0x208>)
 8001c52:	701a      	strb	r2, [r3, #0]
	LCD16X2_Clear();
 8001c54:	f7ff f8f8 	bl	8000e48 <LCD16X2_Clear>

	if (cnt == 1) {
 8001c58:	4b79      	ldr	r3, [pc, #484]	@ (8001e40 <send_Lcd+0x208>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d11c      	bne.n	8001c9a <send_Lcd+0x62>
		sprintf(giden_data, "B1:%d", pil[3]);
 8001c60:	4b78      	ldr	r3, [pc, #480]	@ (8001e44 <send_Lcd+0x20c>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4978      	ldr	r1, [pc, #480]	@ (8001e48 <send_Lcd+0x210>)
 8001c68:	4878      	ldr	r0, [pc, #480]	@ (8001e4c <send_Lcd+0x214>)
 8001c6a:	f007 fd05 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 0);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff f8ff 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001c76:	4875      	ldr	r0, [pc, #468]	@ (8001e4c <send_Lcd+0x214>)
 8001c78:	f7ff f96d 	bl	8000f56 <LCD16X2_PrintStr>

		sprintf(giden_data, "B2:%d", pil[2]);
 8001c7c:	4b71      	ldr	r3, [pc, #452]	@ (8001e44 <send_Lcd+0x20c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4973      	ldr	r1, [pc, #460]	@ (8001e50 <send_Lcd+0x218>)
 8001c84:	4871      	ldr	r0, [pc, #452]	@ (8001e4c <send_Lcd+0x214>)
 8001c86:	f007 fcf7 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 1);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff f8f1 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001c92:	486e      	ldr	r0, [pc, #440]	@ (8001e4c <send_Lcd+0x214>)
 8001c94:	f7ff f95f 	bl	8000f56 <LCD16X2_PrintStr>
 8001c98:	e0c7      	b.n	8001e2a <send_Lcd+0x1f2>
	} else if (cnt == 2) {
 8001c9a:	4b69      	ldr	r3, [pc, #420]	@ (8001e40 <send_Lcd+0x208>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11c      	bne.n	8001cdc <send_Lcd+0xa4>
		sprintf(giden_data, "B3:%d", pil[1]);
 8001ca2:	4b68      	ldr	r3, [pc, #416]	@ (8001e44 <send_Lcd+0x20c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	496a      	ldr	r1, [pc, #424]	@ (8001e54 <send_Lcd+0x21c>)
 8001caa:	4868      	ldr	r0, [pc, #416]	@ (8001e4c <send_Lcd+0x214>)
 8001cac:	f007 fce4 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 0);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f7ff f8de 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001cb8:	4864      	ldr	r0, [pc, #400]	@ (8001e4c <send_Lcd+0x214>)
 8001cba:	f7ff f94c 	bl	8000f56 <LCD16X2_PrintStr>

		sprintf(giden_data, "B4:%d", pil[0]);
 8001cbe:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <send_Lcd+0x20c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4964      	ldr	r1, [pc, #400]	@ (8001e58 <send_Lcd+0x220>)
 8001cc6:	4861      	ldr	r0, [pc, #388]	@ (8001e4c <send_Lcd+0x214>)
 8001cc8:	f007 fcd6 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 1);
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff f8d0 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001cd4:	485d      	ldr	r0, [pc, #372]	@ (8001e4c <send_Lcd+0x214>)
 8001cd6:	f7ff f93e 	bl	8000f56 <LCD16X2_PrintStr>
 8001cda:	e0a6      	b.n	8001e2a <send_Lcd+0x1f2>
	} else if (cnt == 3) {
 8001cdc:	4b58      	ldr	r3, [pc, #352]	@ (8001e40 <send_Lcd+0x208>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d12d      	bne.n	8001d40 <send_Lcd+0x108>
		sprintf(giden_data, "CR:%ld -> %ld", adc_buffer[4],
 8001ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e5c <send_Lcd+0x224>)
 8001ce6:	691c      	ldr	r4, [r3, #16]
				analogtan_veriye(adc_buffer[4], vref()) * 7);
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e5c <send_Lcd+0x224>)
 8001cea:	691d      	ldr	r5, [r3, #16]
 8001cec:	f7ff fb34 	bl	8001358 <vref>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7ff fb8b 	bl	8001410 <analogtan_veriye>
 8001cfa:	4602      	mov	r2, r0
		sprintf(giden_data, "CR:%ld -> %ld", adc_buffer[4],
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	4622      	mov	r2, r4
 8001d04:	4956      	ldr	r1, [pc, #344]	@ (8001e60 <send_Lcd+0x228>)
 8001d06:	4851      	ldr	r0, [pc, #324]	@ (8001e4c <send_Lcd+0x214>)
 8001d08:	f007 fcb6 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 0);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff f8b0 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001d14:	484d      	ldr	r0, [pc, #308]	@ (8001e4c <send_Lcd+0x214>)
 8001d16:	f7ff f91e 	bl	8000f56 <LCD16X2_PrintStr>

		sprintf(giden_data, "KD:%d - AA:%d", kisa_devre, asiri_akim);
 8001d1a:	4b52      	ldr	r3, [pc, #328]	@ (8001e64 <send_Lcd+0x22c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b51      	ldr	r3, [pc, #324]	@ (8001e68 <send_Lcd+0x230>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4950      	ldr	r1, [pc, #320]	@ (8001e6c <send_Lcd+0x234>)
 8001d2a:	4848      	ldr	r0, [pc, #288]	@ (8001e4c <send_Lcd+0x214>)
 8001d2c:	f007 fca4 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 1);
 8001d30:	2101      	movs	r1, #1
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff f89e 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001d38:	4844      	ldr	r0, [pc, #272]	@ (8001e4c <send_Lcd+0x214>)
 8001d3a:	f7ff f90c 	bl	8000f56 <LCD16X2_PrintStr>
 8001d3e:	e074      	b.n	8001e2a <send_Lcd+0x1f2>

		/*sprintf(giden_data, "LM:%04ld -> %04d", adcHamDeger[5],
		 degerDonusum(adcHamDeger[5]));
		 LCD16X2_SetCursor(0, 1);
		 LCD16X2_PrintStr(giden_data);*/
	} else if (cnt == 4) {
 8001d40:	4b3f      	ldr	r3, [pc, #252]	@ (8001e40 <send_Lcd+0x208>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d11c      	bne.n	8001d82 <send_Lcd+0x14a>
		sprintf(giden_data, "Frq:%ld00", frekans);
 8001d48:	4b49      	ldr	r3, [pc, #292]	@ (8001e70 <send_Lcd+0x238>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4949      	ldr	r1, [pc, #292]	@ (8001e74 <send_Lcd+0x23c>)
 8001d50:	483e      	ldr	r0, [pc, #248]	@ (8001e4c <send_Lcd+0x214>)
 8001d52:	f007 fc91 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 0);
 8001d56:	2100      	movs	r1, #0
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff f88b 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001d5e:	483b      	ldr	r0, [pc, #236]	@ (8001e4c <send_Lcd+0x214>)
 8001d60:	f7ff f8f9 	bl	8000f56 <LCD16X2_PrintStr>

		sprintf(giden_data, "Dty:%d0", duty);
 8001d64:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <send_Lcd+0x240>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4944      	ldr	r1, [pc, #272]	@ (8001e7c <send_Lcd+0x244>)
 8001d6c:	4837      	ldr	r0, [pc, #220]	@ (8001e4c <send_Lcd+0x214>)
 8001d6e:	f007 fc83 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 1);
 8001d72:	2101      	movs	r1, #1
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff f87d 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001d7a:	4834      	ldr	r0, [pc, #208]	@ (8001e4c <send_Lcd+0x214>)
 8001d7c:	f7ff f8eb 	bl	8000f56 <LCD16X2_PrintStr>
 8001d80:	e053      	b.n	8001e2a <send_Lcd+0x1f2>
	} else if (cnt == 5) {
 8001d82:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <send_Lcd+0x208>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d128      	bne.n	8001ddc <send_Lcd+0x1a4>
		sprintf(giden_data, "Mx:%d - Indx:%d", pil[maxIndex], (4 - maxIndex));
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e80 <send_Lcd+0x248>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e44 <send_Lcd+0x20c>)
 8001d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d94:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <send_Lcd+0x248>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1c3 0304 	rsb	r3, r3, #4
 8001d9c:	4939      	ldr	r1, [pc, #228]	@ (8001e84 <send_Lcd+0x24c>)
 8001d9e:	482b      	ldr	r0, [pc, #172]	@ (8001e4c <send_Lcd+0x214>)
 8001da0:	f007 fc6a 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 0);
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f864 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001dac:	4827      	ldr	r0, [pc, #156]	@ (8001e4c <send_Lcd+0x214>)
 8001dae:	f7ff f8d2 	bl	8000f56 <LCD16X2_PrintStr>

		sprintf(giden_data, "Mn:%d - Indx:%d", pil[minIndex], (4 - minIndex));
 8001db2:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <send_Lcd+0x250>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <send_Lcd+0x20c>)
 8001db8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <send_Lcd+0x250>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1c3 0304 	rsb	r3, r3, #4
 8001dc4:	4931      	ldr	r1, [pc, #196]	@ (8001e8c <send_Lcd+0x254>)
 8001dc6:	4821      	ldr	r0, [pc, #132]	@ (8001e4c <send_Lcd+0x214>)
 8001dc8:	f007 fc56 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 1);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff f850 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001dd4:	481d      	ldr	r0, [pc, #116]	@ (8001e4c <send_Lcd+0x214>)
 8001dd6:	f7ff f8be 	bl	8000f56 <LCD16X2_PrintStr>
 8001dda:	e026      	b.n	8001e2a <send_Lcd+0x1f2>
		/*float Vref = 0.0;
		 int dgr = 0;
		 Vref = (1.20 / adcHamDeger[6]) * 4095.0;
		 dgr = Vref * 1000;*/

		sprintf(giden_data, "Vr:%ld -> %ld", adc_buffer[6], vref());
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <send_Lcd+0x224>)
 8001dde:	699c      	ldr	r4, [r3, #24]
 8001de0:	f7ff faba 	bl	8001358 <vref>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4622      	mov	r2, r4
 8001de8:	4929      	ldr	r1, [pc, #164]	@ (8001e90 <send_Lcd+0x258>)
 8001dea:	4818      	ldr	r0, [pc, #96]	@ (8001e4c <send_Lcd+0x214>)
 8001dec:	f007 fc44 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff f83e 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001df8:	4814      	ldr	r0, [pc, #80]	@ (8001e4c <send_Lcd+0x214>)
 8001dfa:	f7ff f8ac 	bl	8000f56 <LCD16X2_PrintStr>

		sprintf(giden_data, "TP:%ld -> %d%cC", adc_buffer[5], tempMCU(), 0xDF);
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <send_Lcd+0x224>)
 8001e00:	695c      	ldr	r4, [r3, #20]
 8001e02:	f7ff fae7 	bl	80013d4 <tempMCU>
 8001e06:	4603      	mov	r3, r0
 8001e08:	22df      	movs	r2, #223	@ 0xdf
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	4622      	mov	r2, r4
 8001e0e:	4921      	ldr	r1, [pc, #132]	@ (8001e94 <send_Lcd+0x25c>)
 8001e10:	480e      	ldr	r0, [pc, #56]	@ (8001e4c <send_Lcd+0x214>)
 8001e12:	f007 fc31 	bl	8009678 <siprintf>
		LCD16X2_SetCursor(0, 1);
 8001e16:	2101      	movs	r1, #1
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff f82b 	bl	8000e74 <LCD16X2_SetCursor>
		LCD16X2_PrintStr(giden_data);
 8001e1e:	480b      	ldr	r0, [pc, #44]	@ (8001e4c <send_Lcd+0x214>)
 8001e20:	f7ff f899 	bl	8000f56 <LCD16X2_PrintStr>

		/*sprintf(giden_data,"Vref:%04d",dgr);
		 LCD16X2_SetCursor(0,1);
		 LCD16X2_PrintStr(giden_data);*/
		cnt = 0;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <send_Lcd+0x208>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]

	 sprintf(giden_data, "sayar:%d", cnt);
	 LCD16X2_SetCursor(6, 1);
	 LCD16X2_PrintStr(giden_data);*/

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	490b      	ldr	r1, [pc, #44]	@ (8001e5c <send_Lcd+0x224>)
 8001e2e:	481a      	ldr	r0, [pc, #104]	@ (8001e98 <send_Lcd+0x260>)
 8001e30:	f001 fab0 	bl	8003394 <HAL_ADC_Start_DMA>
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000074c 	.word	0x2000074c
 8001e40:	20000795 	.word	0x20000795
 8001e44:	20000750 	.word	0x20000750
 8001e48:	0800c7f4 	.word	0x0800c7f4
 8001e4c:	2000055c 	.word	0x2000055c
 8001e50:	0800c7fc 	.word	0x0800c7fc
 8001e54:	0800c804 	.word	0x0800c804
 8001e58:	0800c80c 	.word	0x0800c80c
 8001e5c:	20000730 	.word	0x20000730
 8001e60:	0800c814 	.word	0x0800c814
 8001e64:	20000765 	.word	0x20000765
 8001e68:	20000764 	.word	0x20000764
 8001e6c:	0800c824 	.word	0x0800c824
 8001e70:	20000770 	.word	0x20000770
 8001e74:	0800c834 	.word	0x0800c834
 8001e78:	20000774 	.word	0x20000774
 8001e7c:	0800c840 	.word	0x0800c840
 8001e80:	20000788 	.word	0x20000788
 8001e84:	0800c848 	.word	0x0800c848
 8001e88:	2000078c 	.word	0x2000078c
 8001e8c:	0800c858 	.word	0x0800c858
 8001e90:	0800c868 	.word	0x0800c868
 8001e94:	0800c878 	.word	0x0800c878
 8001e98:	20000584 	.word	0x20000584

08001e9c <send_Serial>:

void send_Serial(void) {
 8001e9c:	b5b0      	push	{r4, r5, r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af02      	add	r7, sp, #8

	sprintf(giden_data, "V_Bat_4 = %d\n", pil[0]);
 8001ea2:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <send_Serial+0x160>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4955      	ldr	r1, [pc, #340]	@ (8002000 <send_Serial+0x164>)
 8001eaa:	4856      	ldr	r0, [pc, #344]	@ (8002004 <send_Serial+0x168>)
 8001eac:	f007 fbe4 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001eb0:	4854      	ldr	r0, [pc, #336]	@ (8002004 <send_Serial+0x168>)
 8001eb2:	f7ff f9b1 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "V_Bat_3 = %d\n", pil[1]);
 8001eb6:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <send_Serial+0x160>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4952      	ldr	r1, [pc, #328]	@ (8002008 <send_Serial+0x16c>)
 8001ebe:	4851      	ldr	r0, [pc, #324]	@ (8002004 <send_Serial+0x168>)
 8001ec0:	f007 fbda 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001ec4:	484f      	ldr	r0, [pc, #316]	@ (8002004 <send_Serial+0x168>)
 8001ec6:	f7ff f9a7 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "V_Bat_2 = %d\n", pil[2]);
 8001eca:	4b4c      	ldr	r3, [pc, #304]	@ (8001ffc <send_Serial+0x160>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	494e      	ldr	r1, [pc, #312]	@ (800200c <send_Serial+0x170>)
 8001ed2:	484c      	ldr	r0, [pc, #304]	@ (8002004 <send_Serial+0x168>)
 8001ed4:	f007 fbd0 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001ed8:	484a      	ldr	r0, [pc, #296]	@ (8002004 <send_Serial+0x168>)
 8001eda:	f7ff f99d 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "V_Bat_1 = %d\n", pil[3]);
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <send_Serial+0x160>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	494a      	ldr	r1, [pc, #296]	@ (8002010 <send_Serial+0x174>)
 8001ee6:	4847      	ldr	r0, [pc, #284]	@ (8002004 <send_Serial+0x168>)
 8001ee8:	f007 fbc6 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001eec:	4845      	ldr	r0, [pc, #276]	@ (8002004 <send_Serial+0x168>)
 8001eee:	f7ff f993 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "A_Pack = %ld -> %ld\n", adc_buffer[4],
 8001ef2:	4b48      	ldr	r3, [pc, #288]	@ (8002014 <send_Serial+0x178>)
 8001ef4:	691c      	ldr	r4, [r3, #16]
			analogtan_veriye(adc_buffer[4], vref()) * 7);
 8001ef6:	4b47      	ldr	r3, [pc, #284]	@ (8002014 <send_Serial+0x178>)
 8001ef8:	691d      	ldr	r5, [r3, #16]
 8001efa:	f7ff fa2d 	bl	8001358 <vref>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7ff fa84 	bl	8001410 <analogtan_veriye>
 8001f08:	4602      	mov	r2, r0
	sprintf(giden_data, "A_Pack = %ld -> %ld\n", adc_buffer[4],
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	4622      	mov	r2, r4
 8001f12:	4941      	ldr	r1, [pc, #260]	@ (8002018 <send_Serial+0x17c>)
 8001f14:	483b      	ldr	r0, [pc, #236]	@ (8002004 <send_Serial+0x168>)
 8001f16:	f007 fbaf 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001f1a:	483a      	ldr	r0, [pc, #232]	@ (8002004 <send_Serial+0x168>)
 8001f1c:	f7ff f97c 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "KisaDevre:%d\nAsiriAkim:%d\n", kisa_devre, asiri_akim);
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <send_Serial+0x180>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b3d      	ldr	r3, [pc, #244]	@ (8002020 <send_Serial+0x184>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	493d      	ldr	r1, [pc, #244]	@ (8002024 <send_Serial+0x188>)
 8001f30:	4834      	ldr	r0, [pc, #208]	@ (8002004 <send_Serial+0x168>)
 8001f32:	f007 fba1 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001f36:	4833      	ldr	r0, [pc, #204]	@ (8002004 <send_Serial+0x168>)
 8001f38:	f7ff f96e 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "Temp = %d*C\n", tempMCU());
 8001f3c:	f7ff fa4a 	bl	80013d4 <tempMCU>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4938      	ldr	r1, [pc, #224]	@ (8002028 <send_Serial+0x18c>)
 8001f46:	482f      	ldr	r0, [pc, #188]	@ (8002004 <send_Serial+0x168>)
 8001f48:	f007 fb96 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001f4c:	482d      	ldr	r0, [pc, #180]	@ (8002004 <send_Serial+0x168>)
 8001f4e:	f7ff f963 	bl	8001218 <Uart_sendstring>
	//(azamiDurum && asgariDurum && balansDurum)

	sprintf(giden_data, "Vref = %ld\n______\n", vref());
 8001f52:	f7ff fa01 	bl	8001358 <vref>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4934      	ldr	r1, [pc, #208]	@ (800202c <send_Serial+0x190>)
 8001f5c:	4829      	ldr	r0, [pc, #164]	@ (8002004 <send_Serial+0x168>)
 8001f5e:	f007 fb8b 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001f62:	4828      	ldr	r0, [pc, #160]	@ (8002004 <send_Serial+0x168>)
 8001f64:	f7ff f958 	bl	8001218 <Uart_sendstring>
	//pwmSecimi();

	//if (balansDurum) {
	for (uint8_t i = 0; i < 3; i++) {
 8001f68:	2300      	movs	r3, #0
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	e018      	b.n	8001fa0 <send_Serial+0x104>
		sprintf(giden_data, "%d-%d.Farki = %d,Pwm:%d\n", i, i + 1, voltFark[i],
 8001f6e:	79fa      	ldrb	r2, [r7, #7]
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	1c59      	adds	r1, r3, #1
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	482e      	ldr	r0, [pc, #184]	@ (8002030 <send_Serial+0x194>)
 8001f78:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	461c      	mov	r4, r3
				hesaplananPwm[i]);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	482c      	ldr	r0, [pc, #176]	@ (8002034 <send_Serial+0x198>)
 8001f84:	5cc3      	ldrb	r3, [r0, r3]
		sprintf(giden_data, "%d-%d.Farki = %d,Pwm:%d\n", i, i + 1, voltFark[i],
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	9400      	str	r4, [sp, #0]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	492a      	ldr	r1, [pc, #168]	@ (8002038 <send_Serial+0x19c>)
 8001f8e:	481d      	ldr	r0, [pc, #116]	@ (8002004 <send_Serial+0x168>)
 8001f90:	f007 fb72 	bl	8009678 <siprintf>
		Uart_sendstring(giden_data);
 8001f94:	481b      	ldr	r0, [pc, #108]	@ (8002004 <send_Serial+0x168>)
 8001f96:	f7ff f93f 	bl	8001218 <Uart_sendstring>
	for (uint8_t i = 0; i < 3; i++) {
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d9e3      	bls.n	8001f6e <send_Serial+0xd2>

	}
	sprintf(giden_data, "max: %d\n", max);
 8001fa6:	4b25      	ldr	r3, [pc, #148]	@ (800203c <send_Serial+0x1a0>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4924      	ldr	r1, [pc, #144]	@ (8002040 <send_Serial+0x1a4>)
 8001fb0:	4814      	ldr	r0, [pc, #80]	@ (8002004 <send_Serial+0x168>)
 8001fb2:	f007 fb61 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001fb6:	4813      	ldr	r0, [pc, #76]	@ (8002004 <send_Serial+0x168>)
 8001fb8:	f7ff f92e 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "azami:%d\nasgari:%d\nbalans:%d\n", azamiDurum,
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <send_Serial+0x1a8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <send_Serial+0x1ac>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <send_Serial+0x1b0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	491e      	ldr	r1, [pc, #120]	@ (8002050 <send_Serial+0x1b4>)
 8001fd8:	480a      	ldr	r0, [pc, #40]	@ (8002004 <send_Serial+0x168>)
 8001fda:	f007 fb4d 	bl	8009678 <siprintf>
			asgariDurum, balansDurum);
	Uart_sendstring(giden_data);
 8001fde:	4809      	ldr	r0, [pc, #36]	@ (8002004 <send_Serial+0x168>)
 8001fe0:	f7ff f91a 	bl	8001218 <Uart_sendstring>

	sprintf(giden_data, "______\n");
 8001fe4:	491b      	ldr	r1, [pc, #108]	@ (8002054 <send_Serial+0x1b8>)
 8001fe6:	4807      	ldr	r0, [pc, #28]	@ (8002004 <send_Serial+0x168>)
 8001fe8:	f007 fb46 	bl	8009678 <siprintf>
	Uart_sendstring(giden_data);
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <send_Serial+0x168>)
 8001fee:	f7ff f913 	bl	8001218 <Uart_sendstring>
	 Uart_sendstring(giden_data);

	 sprintf(giden_data, "Ortalama: %04ld\n______\n", ortalama);
	 HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
	 Uart_sendstring(giden_data);*/
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000750 	.word	0x20000750
 8002000:	0800c888 	.word	0x0800c888
 8002004:	2000055c 	.word	0x2000055c
 8002008:	0800c898 	.word	0x0800c898
 800200c:	0800c8a8 	.word	0x0800c8a8
 8002010:	0800c8b8 	.word	0x0800c8b8
 8002014:	20000730 	.word	0x20000730
 8002018:	0800c8c8 	.word	0x0800c8c8
 800201c:	20000765 	.word	0x20000765
 8002020:	20000764 	.word	0x20000764
 8002024:	0800c8e0 	.word	0x0800c8e0
 8002028:	0800c8fc 	.word	0x0800c8fc
 800202c:	0800c90c 	.word	0x0800c90c
 8002030:	2000077c 	.word	0x2000077c
 8002034:	20000778 	.word	0x20000778
 8002038:	0800c920 	.word	0x0800c920
 800203c:	20000782 	.word	0x20000782
 8002040:	0800c93c 	.word	0x0800c93c
 8002044:	20000010 	.word	0x20000010
 8002048:	20000011 	.word	0x20000011
 800204c:	2000077b 	.word	0x2000077b
 8002050:	0800c948 	.word	0x0800c948
 8002054:	0800c968 	.word	0x0800c968

08002058 <PwmVeOnOffKontrol>:


void PwmVeOnOffKontrol(void) {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

	if (Uart_peek() == '1')
 800205c:	f7ff f908 	bl	8001270 <Uart_peek>
 8002060:	4603      	mov	r3, r0
 8002062:	2b31      	cmp	r3, #49	@ 0x31
 8002064:	d103      	bne.n	800206e <PwmVeOnOffKontrol+0x16>
		HAL_GPIO_TogglePin(kaynak_kontrol_GPIO_Port, kaynak_kontrol_Pin);//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);//Enable
 8002066:	2101      	movs	r1, #1
 8002068:	485b      	ldr	r0, [pc, #364]	@ (80021d8 <PwmVeOnOffKontrol+0x180>)
 800206a:	f002 fa95 	bl	8004598 <HAL_GPIO_TogglePin>
	//if (Uart_peek () == '2') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);

	if (Uart_peek() == '2')
 800206e:	f7ff f8ff 	bl	8001270 <Uart_peek>
 8002072:	4603      	mov	r3, r0
 8002074:	2b32      	cmp	r3, #50	@ 0x32
 8002076:	d103      	bne.n	8002080 <PwmVeOnOffKontrol+0x28>
		HAL_GPIO_TogglePin(yuk_bagla_GPIO_Port, yuk_bagla_Pin);	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);//DisCharge
 8002078:	2140      	movs	r1, #64	@ 0x40
 800207a:	4857      	ldr	r0, [pc, #348]	@ (80021d8 <PwmVeOnOffKontrol+0x180>)
 800207c:	f002 fa8c 	bl	8004598 <HAL_GPIO_TogglePin>
	//if (Uart_peek () == '4') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);

	if (Uart_peek() == '3')
 8002080:	f7ff f8f6 	bl	8001270 <Uart_peek>
 8002084:	4603      	mov	r3, r0
 8002086:	2b33      	cmp	r3, #51	@ 0x33
 8002088:	d103      	bne.n	8002092 <PwmVeOnOffKontrol+0x3a>
		HAL_GPIO_TogglePin(kaynak_bagla_GPIO_Port, kaynak_bagla_Pin);//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);//Charge
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	4852      	ldr	r0, [pc, #328]	@ (80021d8 <PwmVeOnOffKontrol+0x180>)
 800208e:	f002 fa83 	bl	8004598 <HAL_GPIO_TogglePin>
	//if (Uart_peek () == '6') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);

	if (Uart_peek() == '4') {
 8002092:	f7ff f8ed 	bl	8001270 <Uart_peek>
 8002096:	4603      	mov	r3, r0
 8002098:	2b34      	cmp	r3, #52	@ 0x34
 800209a:	d11a      	bne.n	80020d2 <PwmVeOnOffKontrol+0x7a>
		static int t1 = 0;
		t1++;
 800209c:	4b4f      	ldr	r3, [pc, #316]	@ (80021dc <PwmVeOnOffKontrol+0x184>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a4e      	ldr	r2, [pc, #312]	@ (80021dc <PwmVeOnOffKontrol+0x184>)
 80020a4:	6013      	str	r3, [r2, #0]
		if (t1 == 1) {
 80020a6:	4b4d      	ldr	r3, [pc, #308]	@ (80021dc <PwmVeOnOffKontrol+0x184>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <PwmVeOnOffKontrol+0x64>
			setPWMFrequencyAndDutyCycle(&htim1, 1, 100000, 30);
 80020ae:	231e      	movs	r3, #30
 80020b0:	4a4b      	ldr	r2, [pc, #300]	@ (80021e0 <PwmVeOnOffKontrol+0x188>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	484b      	ldr	r0, [pc, #300]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 80020b6:	f7ff fa7f 	bl	80015b8 <setPWMFrequencyAndDutyCycle>
 80020ba:	e00a      	b.n	80020d2 <PwmVeOnOffKontrol+0x7a>
		} else {
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80020bc:	2100      	movs	r1, #0
 80020be:	4849      	ldr	r0, [pc, #292]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 80020c0:	f003 fed4 	bl	8005e6c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80020c4:	2100      	movs	r1, #0
 80020c6:	4847      	ldr	r0, [pc, #284]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 80020c8:	f004 fd2c 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
			t1 = 0;
 80020cc:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <PwmVeOnOffKontrol+0x184>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
		}
	}

	if (Uart_peek() == '5') {
 80020d2:	f7ff f8cd 	bl	8001270 <Uart_peek>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b35      	cmp	r3, #53	@ 0x35
 80020da:	d11a      	bne.n	8002112 <PwmVeOnOffKontrol+0xba>
		static int t2 = 0;
		t2++;
 80020dc:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <PwmVeOnOffKontrol+0x190>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a41      	ldr	r2, [pc, #260]	@ (80021e8 <PwmVeOnOffKontrol+0x190>)
 80020e4:	6013      	str	r3, [r2, #0]
		if (t2 == 1) {
 80020e6:	4b40      	ldr	r3, [pc, #256]	@ (80021e8 <PwmVeOnOffKontrol+0x190>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <PwmVeOnOffKontrol+0xa4>
			setPWMFrequencyAndDutyCycle(&htim1, 2, 100000, 40);
 80020ee:	2328      	movs	r3, #40	@ 0x28
 80020f0:	4a3b      	ldr	r2, [pc, #236]	@ (80021e0 <PwmVeOnOffKontrol+0x188>)
 80020f2:	2102      	movs	r1, #2
 80020f4:	483b      	ldr	r0, [pc, #236]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 80020f6:	f7ff fa5f 	bl	80015b8 <setPWMFrequencyAndDutyCycle>
 80020fa:	e00a      	b.n	8002112 <PwmVeOnOffKontrol+0xba>
		} else {
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80020fc:	2104      	movs	r1, #4
 80020fe:	4839      	ldr	r0, [pc, #228]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 8002100:	f003 feb4 	bl	8005e6c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002104:	2104      	movs	r1, #4
 8002106:	4837      	ldr	r0, [pc, #220]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 8002108:	f004 fd0c 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
			t2 = 0;
 800210c:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <PwmVeOnOffKontrol+0x190>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
		}
	}

	if (Uart_peek() == '6') {
 8002112:	f7ff f8ad 	bl	8001270 <Uart_peek>
 8002116:	4603      	mov	r3, r0
 8002118:	2b36      	cmp	r3, #54	@ 0x36
 800211a:	d11a      	bne.n	8002152 <PwmVeOnOffKontrol+0xfa>
		static int t3 = 0;
		t3++;
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <PwmVeOnOffKontrol+0x194>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <PwmVeOnOffKontrol+0x194>)
 8002124:	6013      	str	r3, [r2, #0]
		if (t3 == 1) {
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <PwmVeOnOffKontrol+0x194>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <PwmVeOnOffKontrol+0xe4>
			setPWMFrequencyAndDutyCycle(&htim1, 3, 100000, 50);
 800212e:	2332      	movs	r3, #50	@ 0x32
 8002130:	4a2b      	ldr	r2, [pc, #172]	@ (80021e0 <PwmVeOnOffKontrol+0x188>)
 8002132:	2103      	movs	r1, #3
 8002134:	482b      	ldr	r0, [pc, #172]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 8002136:	f7ff fa3f 	bl	80015b8 <setPWMFrequencyAndDutyCycle>
 800213a:	e00a      	b.n	8002152 <PwmVeOnOffKontrol+0xfa>
		} else {
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800213c:	2108      	movs	r1, #8
 800213e:	4829      	ldr	r0, [pc, #164]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 8002140:	f003 fe94 	bl	8005e6c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002144:	2108      	movs	r1, #8
 8002146:	4827      	ldr	r0, [pc, #156]	@ (80021e4 <PwmVeOnOffKontrol+0x18c>)
 8002148:	f004 fcec 	bl	8006b24 <HAL_TIMEx_PWMN_Stop>
			t3 = 0;
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <PwmVeOnOffKontrol+0x194>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
		}
	}
	if (Uart_peek() == '7')
 8002152:	f7ff f88d 	bl	8001270 <Uart_peek>
 8002156:	4603      	mov	r3, r0
 8002158:	2b37      	cmp	r3, #55	@ 0x37
 800215a:	d10f      	bne.n	800217c <PwmVeOnOffKontrol+0x124>
		balansDurum = !balansDurum;
 800215c:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <PwmVeOnOffKontrol+0x198>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf14      	ite	ne
 8002166:	2301      	movne	r3, #1
 8002168:	2300      	moveq	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <PwmVeOnOffKontrol+0x198>)
 800217a:	701a      	strb	r2, [r3, #0]
	if (Uart_peek() == '8')
 800217c:	f7ff f878 	bl	8001270 <Uart_peek>
 8002180:	4603      	mov	r3, r0
 8002182:	2b38      	cmp	r3, #56	@ 0x38
 8002184:	d10f      	bne.n	80021a6 <PwmVeOnOffKontrol+0x14e>
		asgariDurum = !asgariDurum;
 8002186:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <PwmVeOnOffKontrol+0x19c>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <PwmVeOnOffKontrol+0x19c>)
 80021a4:	701a      	strb	r2, [r3, #0]
	if (Uart_peek() == '9')
 80021a6:	f7ff f863 	bl	8001270 <Uart_peek>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b39      	cmp	r3, #57	@ 0x39
 80021ae:	d10f      	bne.n	80021d0 <PwmVeOnOffKontrol+0x178>
		azamiDurum = !azamiDurum;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <PwmVeOnOffKontrol+0x1a0>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <PwmVeOnOffKontrol+0x1a0>)
 80021ce:	701a      	strb	r2, [r3, #0]

	Uart_flush();
 80021d0:	f7ff f838 	bl	8001244 <Uart_flush>
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010800 	.word	0x40010800
 80021dc:	20000798 	.word	0x20000798
 80021e0:	000186a0 	.word	0x000186a0
 80021e4:	2000064c 	.word	0x2000064c
 80021e8:	2000079c 	.word	0x2000079c
 80021ec:	200007a0 	.word	0x200007a0
 80021f0:	2000077b 	.word	0x2000077b
 80021f4:	20000011 	.word	0x20000011
 80021f8:	20000010 	.word	0x20000010

080021fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b096      	sub	sp, #88	@ 0x58
 8002200:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002202:	f000 ff99 	bl	8003138 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002206:	f000 f86b 	bl	80022e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800220a:	f000 fad7 	bl	80027bc <MX_GPIO_Init>
	MX_DMA_Init();
 800220e:	f000 fab7 	bl	8002780 <MX_DMA_Init>
	MX_ADC1_Init();
 8002212:	f000 f8c1 	bl	8002398 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002216:	f000 f953 	bl	80024c0 <MX_I2C1_Init>
	MX_TIM1_Init();
 800221a:	f000 f97f 	bl	800251c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800221e:	f000 fa85 	bl	800272c <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8002222:	f000 fa35 	bl	8002690 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	LCD16X2_Init(2);
 8002226:	2002      	movs	r0, #2
 8002228:	f7fe fd8a 	bl	8000d40 <LCD16X2_Init>
	Ringbuf_init();
 800222c:	f7fe ff7e 	bl	800112c <Ringbuf_init>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002230:	4822      	ldr	r0, [pc, #136]	@ (80022bc <main+0xc0>)
 8002232:	f001 fbe5 	bl	8003a00 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 8002236:	2207      	movs	r2, #7
 8002238:	4921      	ldr	r1, [pc, #132]	@ (80022c0 <main+0xc4>)
 800223a:	4820      	ldr	r0, [pc, #128]	@ (80022bc <main+0xc0>)
 800223c:	f001 f8aa 	bl	8003394 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8002240:	4820      	ldr	r0, [pc, #128]	@ (80022c4 <main+0xc8>)
 8002242:	f003 fc7d 	bl	8005b40 <HAL_TIM_Base_Start>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of KontrolTask */
	osThreadDef(KontrolTask, StartKontrolTask, osPriorityNormal, 0, 128);
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <main+0xcc>)
 8002248:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800224c:	461d      	mov	r5, r3
 800224e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	KontrolTaskHandle = osThreadCreate(osThread(KontrolTask), NULL);
 800225a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f005 faf3 	bl	800784c <osThreadCreate>
 8002266:	4603      	mov	r3, r0
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <main+0xd0>)
 800226a:	6013      	str	r3, [r2, #0]

	/* definition and creation of AdcTask */
	osThreadDef(AdcTask, StartAdcTask, osPriorityIdle, 0, 128);
 800226c:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <main+0xd4>)
 800226e:	f107 0420 	add.w	r4, r7, #32
 8002272:	461d      	mov	r5, r3
 8002274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800227c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AdcTaskHandle = osThreadCreate(osThread(AdcTask), NULL);
 8002280:	f107 0320 	add.w	r3, r7, #32
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fae0 	bl	800784c <osThreadCreate>
 800228c:	4603      	mov	r3, r0
 800228e:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <main+0xd8>)
 8002290:	6013      	str	r3, [r2, #0]

	/* definition and creation of BalansTask */
	osThreadDef(BalansTask, StartBalansTask, osPriorityIdle, 0, 128);
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <main+0xdc>)
 8002294:	1d3c      	adds	r4, r7, #4
 8002296:	461d      	mov	r5, r3
 8002298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BalansTaskHandle = osThreadCreate(osThread(BalansTask), NULL);
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 facf 	bl	800784c <osThreadCreate>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <main+0xe0>)
 80022b2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80022b4:	f005 fac3 	bl	800783e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <main+0xbc>
 80022bc:	20000584 	.word	0x20000584
 80022c0:	20000730 	.word	0x20000730
 80022c4:	20000694 	.word	0x20000694
 80022c8:	0800c97c 	.word	0x0800c97c
 80022cc:	20000724 	.word	0x20000724
 80022d0:	0800c9a0 	.word	0x0800c9a0
 80022d4:	20000728 	.word	0x20000728
 80022d8:	0800c9c8 	.word	0x0800c9c8
 80022dc:	2000072c 	.word	0x2000072c

080022e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	@ 0x50
 80022e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ea:	2228      	movs	r2, #40	@ 0x28
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 fa25 	bl	800973e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002310:	2301      	movs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800231e:	2301      	movs	r3, #1
 8002320:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002322:	2302      	movs	r3, #2
 8002324:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800232a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800232c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002330:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fe06 	bl	8004f48 <HAL_RCC_OscConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0x66>
		Error_Handler();
 8002342:	f000 fb1d 	bl	8002980 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002346:	230f      	movs	r3, #15
 8002348:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002356:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f003 f872 	bl	800544c <HAL_RCC_ClockConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0x92>
		Error_Handler();
 800236e:	f000 fb07 	bl	8002980 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002372:	2302      	movs	r3, #2
 8002374:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800237a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fa22 	bl	80057c8 <HAL_RCCEx_PeriphCLKConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0xae>
		Error_Handler();
 800238a:	f000 faf9 	bl	8002980 <Error_Handler>
	}
}
 800238e:	bf00      	nop
 8002390:	3750      	adds	r7, #80	@ 0x50
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80023a8:	4b43      	ldr	r3, [pc, #268]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023aa:	4a44      	ldr	r2, [pc, #272]	@ (80024bc <MX_ADC1_Init+0x124>)
 80023ac:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023ae:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023b4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023be:	2200      	movs	r2, #0
 80023c0:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80023c2:	4b3d      	ldr	r3, [pc, #244]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023c8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 7;
 80023d0:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023d2:	2207      	movs	r2, #7
 80023d4:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80023d6:	4838      	ldr	r0, [pc, #224]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023d8:	f000 ff04 	bl	80031e4 <HAL_ADC_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_ADC1_Init+0x4e>
		Error_Handler();
 80023e2:	f000 facd 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80023ee:	2307      	movs	r3, #7
 80023f0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4830      	ldr	r0, [pc, #192]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80023f8:	f001 f908 	bl	800360c <HAL_ADC_ConfigChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8002402:	f000 fabd 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8002406:	2302      	movs	r3, #2
 8002408:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800240a:	2302      	movs	r3, #2
 800240c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4829      	ldr	r0, [pc, #164]	@ (80024b8 <MX_ADC1_Init+0x120>)
 8002414:	f001 f8fa 	bl	800360c <HAL_ADC_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_ADC1_Init+0x8a>
		Error_Handler();
 800241e:	f000 faaf 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8002422:	2303      	movs	r3, #3
 8002424:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002426:	2303      	movs	r3, #3
 8002428:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4822      	ldr	r0, [pc, #136]	@ (80024b8 <MX_ADC1_Init+0x120>)
 8002430:	f001 f8ec 	bl	800360c <HAL_ADC_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_ADC1_Init+0xa6>
		Error_Handler();
 800243a:	f000 faa1 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800243e:	2304      	movs	r3, #4
 8002440:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002442:	2304      	movs	r3, #4
 8002444:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4619      	mov	r1, r3
 800244a:	481b      	ldr	r0, [pc, #108]	@ (80024b8 <MX_ADC1_Init+0x120>)
 800244c:	f001 f8de 	bl	800360c <HAL_ADC_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_ADC1_Init+0xc2>
		Error_Handler();
 8002456:	f000 fa93 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800245a:	2305      	movs	r3, #5
 800245c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 800245e:	2305      	movs	r3, #5
 8002460:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4814      	ldr	r0, [pc, #80]	@ (80024b8 <MX_ADC1_Init+0x120>)
 8002468:	f001 f8d0 	bl	800360c <HAL_ADC_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_ADC1_Init+0xde>
		Error_Handler();
 8002472:	f000 fa85 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002476:	2310      	movs	r3, #16
 8002478:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 800247a:	2306      	movs	r3, #6
 800247c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	480d      	ldr	r0, [pc, #52]	@ (80024b8 <MX_ADC1_Init+0x120>)
 8002484:	f001 f8c2 	bl	800360c <HAL_ADC_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_ADC1_Init+0xfa>
		Error_Handler();
 800248e:	f000 fa77 	bl	8002980 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002492:	2311      	movs	r3, #17
 8002494:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8002496:	2307      	movs	r3, #7
 8002498:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	@ (80024b8 <MX_ADC1_Init+0x120>)
 80024a0:	f001 f8b4 	bl	800360c <HAL_ADC_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_ADC1_Init+0x116>
		Error_Handler();
 80024aa:	f000 fa69 	bl	8002980 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000584 	.word	0x20000584
 80024bc:	40012400 	.word	0x40012400

080024c0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <MX_I2C1_Init+0x54>)
 80024c8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024cc:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <MX_I2C1_Init+0x58>)
 80024ce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80024fc:	4804      	ldr	r0, [pc, #16]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024fe:	f002 f887 	bl	8004610 <HAL_I2C_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002508:	f000 fa3a 	bl	8002980 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200005f8 	.word	0x200005f8
 8002514:	40005400 	.word	0x40005400
 8002518:	00061a80 	.word	0x00061a80

0800251c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b096      	sub	sp, #88	@ 0x58
 8002520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002522:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800253a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2220      	movs	r2, #32
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f007 f8f2 	bl	800973e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800255a:	4b4b      	ldr	r3, [pc, #300]	@ (8002688 <MX_TIM1_Init+0x16c>)
 800255c:	4a4b      	ldr	r2, [pc, #300]	@ (800268c <MX_TIM1_Init+0x170>)
 800255e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8002560:	4b49      	ldr	r3, [pc, #292]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002562:	2247      	movs	r2, #71	@ 0x47
 8002564:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 800256c:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <MX_TIM1_Init+0x16c>)
 800256e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002572:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002574:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <MX_TIM1_Init+0x16c>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002586:	4840      	ldr	r0, [pc, #256]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002588:	f003 fa8a 	bl	8005aa0 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8002592:	f000 f9f5 	bl	8002980 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800259c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025a0:	4619      	mov	r1, r3
 80025a2:	4839      	ldr	r0, [pc, #228]	@ (8002688 <MX_TIM1_Init+0x16c>)
 80025a4:	f003 fe90 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM1_Init+0x96>
		Error_Handler();
 80025ae:	f000 f9e7 	bl	8002980 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80025b2:	4835      	ldr	r0, [pc, #212]	@ (8002688 <MX_TIM1_Init+0x16c>)
 80025b4:	f003 fb60 	bl	8005c78 <HAL_TIM_PWM_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM1_Init+0xa6>
		Error_Handler();
 80025be:	f000 f9df 	bl	8002980 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80025ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025ce:	4619      	mov	r1, r3
 80025d0:	482d      	ldr	r0, [pc, #180]	@ (8002688 <MX_TIM1_Init+0x16c>)
 80025d2:	f004 fb05 	bl	8006be0 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80025dc:	f000 f9d0 	bl	8002980 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e0:	2360      	movs	r3, #96	@ 0x60
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 499;
 80025e4:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80025fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	4820      	ldr	r0, [pc, #128]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002608:	f003 fd9c 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8002612:	f000 f9b5 	bl	8002980 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261a:	2204      	movs	r2, #4
 800261c:	4619      	mov	r1, r3
 800261e:	481a      	ldr	r0, [pc, #104]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002620:	f003 fd90 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 800262a:	f000 f9a9 	bl	8002980 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800262e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002632:	2208      	movs	r2, #8
 8002634:	4619      	mov	r1, r3
 8002636:	4814      	ldr	r0, [pc, #80]	@ (8002688 <MX_TIM1_Init+0x16c>)
 8002638:	f003 fd84 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8002642:	f000 f99d 	bl	8002980 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800265a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4619      	mov	r1, r3
 8002668:	4807      	ldr	r0, [pc, #28]	@ (8002688 <MX_TIM1_Init+0x16c>)
 800266a:	f004 fb17 	bl	8006c9c <HAL_TIMEx_ConfigBreakDeadTime>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM1_Init+0x15c>
			!= HAL_OK) {
		Error_Handler();
 8002674:	f000 f984 	bl	8002980 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002678:	4803      	ldr	r0, [pc, #12]	@ (8002688 <MX_TIM1_Init+0x16c>)
 800267a:	f000 faa9 	bl	8002bd0 <HAL_TIM_MspPostInit>

}
 800267e:	bf00      	nop
 8002680:	3758      	adds	r7, #88	@ 0x58
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000064c 	.word	0x2000064c
 800268c:	40012c00 	.word	0x40012c00

08002690 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026a4:	463b      	mov	r3, r7
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <MX_TIM3_Init+0x98>)
 80026b0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 71;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026b4:	2247      	movs	r2, #71	@ 0x47
 80026b6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80026be:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026c4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80026d2:	4814      	ldr	r0, [pc, #80]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026d4:	f003 f9e4 	bl	8005aa0 <HAL_TIM_Base_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80026de:	f000 f94f 	bl	8002980 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4619      	mov	r1, r3
 80026ee:	480d      	ldr	r0, [pc, #52]	@ (8002724 <MX_TIM3_Init+0x94>)
 80026f0:	f003 fdea 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM3_Init+0x6e>
		Error_Handler();
 80026fa:	f000 f941 	bl	8002980 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026fe:	2320      	movs	r3, #32
 8002700:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002706:	463b      	mov	r3, r7
 8002708:	4619      	mov	r1, r3
 800270a:	4806      	ldr	r0, [pc, #24]	@ (8002724 <MX_TIM3_Init+0x94>)
 800270c:	f004 fa68 	bl	8006be0 <HAL_TIMEx_MasterConfigSynchronization>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002716:	f000 f933 	bl	8002980 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000694 	.word	0x20000694
 8002728:	40000400 	.word	0x40000400

0800272c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002732:	4a12      	ldr	r2, [pc, #72]	@ (800277c <MX_USART1_UART_Init+0x50>)
 8002734:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800273c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002762:	4805      	ldr	r0, [pc, #20]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002764:	f004 fb21 	bl	8006daa <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800276e:	f000 f907 	bl	8002980 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200006dc 	.word	0x200006dc
 800277c:	40013800 	.word	0x40013800

08002780 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <MX_DMA_Init+0x38>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4a0b      	ldr	r2, [pc, #44]	@ (80027b8 <MX_DMA_Init+0x38>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6153      	str	r3, [r2, #20]
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <MX_DMA_Init+0x38>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2105      	movs	r1, #5
 80027a2:	200b      	movs	r0, #11
 80027a4:	f001 fa8f 	bl	8003cc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027a8:	200b      	movs	r0, #11
 80027aa:	f001 faa8 	bl	8003cfe <HAL_NVIC_EnableIRQ>

}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80027d0:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <MX_GPIO_Init+0x104>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a3a      	ldr	r2, [pc, #232]	@ (80028c0 <MX_GPIO_Init+0x104>)
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b38      	ldr	r3, [pc, #224]	@ (80028c0 <MX_GPIO_Init+0x104>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80027e8:	4b35      	ldr	r3, [pc, #212]	@ (80028c0 <MX_GPIO_Init+0x104>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a34      	ldr	r2, [pc, #208]	@ (80028c0 <MX_GPIO_Init+0x104>)
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <MX_GPIO_Init+0x104>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <MX_GPIO_Init+0x104>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4a2e      	ldr	r2, [pc, #184]	@ (80028c0 <MX_GPIO_Init+0x104>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6193      	str	r3, [r2, #24]
 800280c:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <MX_GPIO_Init+0x104>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <MX_GPIO_Init+0x104>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a28      	ldr	r2, [pc, #160]	@ (80028c0 <MX_GPIO_Init+0x104>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <MX_GPIO_Init+0x104>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002836:	4823      	ldr	r0, [pc, #140]	@ (80028c4 <MX_GPIO_Init+0x108>)
 8002838:	f001 fe96 	bl	8004568 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800283c:	2200      	movs	r2, #0
 800283e:	21c1      	movs	r1, #193	@ 0xc1
 8002840:	4821      	ldr	r0, [pc, #132]	@ (80028c8 <MX_GPIO_Init+0x10c>)
 8002842:	f001 fe91 	bl	8004568 <HAL_GPIO_WritePin>
	kaynak_kontrol_Pin | yuk_bagla_Pin | kaynak_bagla_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8002846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800284a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2302      	movs	r3, #2
 8002856:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	4819      	ldr	r0, [pc, #100]	@ (80028c4 <MX_GPIO_Init+0x108>)
 8002860:	f001 fcfe 	bl	8004260 <HAL_GPIO_Init>

	/*Configure GPIO pins : kaynak_kontrol_Pin yuk_bagla_Pin kaynak_bagla_Pin */
	GPIO_InitStruct.Pin = kaynak_kontrol_Pin | yuk_bagla_Pin | kaynak_bagla_Pin;
 8002864:	23c1      	movs	r3, #193	@ 0xc1
 8002866:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2302      	movs	r3, #2
 8002872:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	4813      	ldr	r0, [pc, #76]	@ (80028c8 <MX_GPIO_Init+0x10c>)
 800287c:	f001 fcf0 	bl	8004260 <HAL_GPIO_Init>

	/*Configure GPIO pins : kisa_d_algila_Pin asiri_a_algila_Pin */
	GPIO_InitStruct.Pin = kisa_d_algila_Pin | asiri_a_algila_Pin;
 8002880:	2303      	movs	r3, #3
 8002882:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <MX_GPIO_Init+0x110>)
 8002886:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4619      	mov	r1, r3
 8002892:	480f      	ldr	r0, [pc, #60]	@ (80028d0 <MX_GPIO_Init+0x114>)
 8002894:	f001 fce4 	bl	8004260 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2105      	movs	r1, #5
 800289c:	2006      	movs	r0, #6
 800289e:	f001 fa12 	bl	8003cc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80028a2:	2006      	movs	r0, #6
 80028a4:	f001 fa2b 	bl	8003cfe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2105      	movs	r1, #5
 80028ac:	2007      	movs	r0, #7
 80028ae:	f001 fa0a 	bl	8003cc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80028b2:	2007      	movs	r0, #7
 80028b4:	f001 fa23 	bl	8003cfe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80028b8:	bf00      	nop
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40011000 	.word	0x40011000
 80028c8:	40010800 	.word	0x40010800
 80028cc:	10110000 	.word	0x10110000
 80028d0:	40010c00 	.word	0x40010c00

080028d4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);
	adc_ready = true;
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 80028e2:	4804      	ldr	r0, [pc, #16]	@ (80028f4 <HAL_ADC_ConvCpltCallback+0x20>)
 80028e4:	f000 fe34 	bl	8003550 <HAL_ADC_Stop_DMA>
	 adcHamDeger[a] = adcDmaDeger[a];
	 }

	 }
	 adc_tamam = true;*/
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000074c 	.word	0x2000074c
 80028f4:	20000584 	.word	0x20000584

080028f8 <StartKontrolTask>:
 * @brief  Function implementing the KontrolTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKontrolTask */
void StartKontrolTask(void const *argument) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002904:	4805      	ldr	r0, [pc, #20]	@ (800291c <StartKontrolTask+0x24>)
 8002906:	f001 fe47 	bl	8004598 <HAL_GPIO_TogglePin>
		PwmVeOnOffKontrol();
 800290a:	f7ff fba5 	bl	8002058 <PwmVeOnOffKontrol>
		limitKontrol();
 800290e:	f7ff f883 	bl	8001a18 <limitKontrol>

		//PwmVeOnOffKontrol();
		osDelay(200);
 8002912:	20c8      	movs	r0, #200	@ 0xc8
 8002914:	f004 ffe6 	bl	80078e4 <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002918:	bf00      	nop
 800291a:	e7f1      	b.n	8002900 <StartKontrolTask+0x8>
 800291c:	40011000 	.word	0x40011000

08002920 <StartAdcTask>:
 * @brief Function implementing the AdcTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void const *argument) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAdcTask */
	/* Infinite loop */
	for (;;) {
		//hesaplaAdcDegerleri((uint32_t *)*pil,4);
		//lcdGoster();
		hesaplaAdcDegerleri(pil, 4);
 8002928:	2104      	movs	r1, #4
 800292a:	4807      	ldr	r0, [pc, #28]	@ (8002948 <StartAdcTask+0x28>)
 800292c:	f7fe ff1e 	bl	800176c <hesaplaAdcDegerleri>
		pwmSecimi();
 8002930:	f7fe ffaa 	bl	8001888 <pwmSecimi>
		send_Lcd();
 8002934:	f7ff f980 	bl	8001c38 <send_Lcd>
		send_Serial();
 8002938:	f7ff fab0 	bl	8001e9c <send_Serial>
		//lcdGoster();
		osDelay(2000);
 800293c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002940:	f004 ffd0 	bl	80078e4 <osDelay>
		hesaplaAdcDegerleri(pil, 4);
 8002944:	bf00      	nop
 8002946:	e7ef      	b.n	8002928 <StartAdcTask+0x8>
 8002948:	20000750 	.word	0x20000750

0800294c <StartBalansTask>:
 * @brief Function implementing the BalansTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBalansTask */
void StartBalansTask(void const *argument) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBalansTask */
	/* Infinite loop */
	for (;;) {
		balansTest();
 8002954:	f7ff f8b6 	bl	8001ac4 <balansTest>
		osDelay(200);
 8002958:	20c8      	movs	r0, #200	@ 0xc8
 800295a:	f004 ffc3 	bl	80078e4 <osDelay>
		balansTest();
 800295e:	bf00      	nop
 8002960:	e7f8      	b.n	8002954 <StartBalansTask+0x8>

08002962 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002972:	d101      	bne.n	8002978 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002974:	f000 fbf6 	bl	8003164 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <Error_Handler+0x8>

0800298c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <HAL_MspInit+0x68>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	4a17      	ldr	r2, [pc, #92]	@ (80029f4 <HAL_MspInit+0x68>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6193      	str	r3, [r2, #24]
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <HAL_MspInit+0x68>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <HAL_MspInit+0x68>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a11      	ldr	r2, [pc, #68]	@ (80029f4 <HAL_MspInit+0x68>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]
 80029b6:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <HAL_MspInit+0x68>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	210f      	movs	r1, #15
 80029c6:	f06f 0001 	mvn.w	r0, #1
 80029ca:	f001 f97c 	bl	8003cc6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_MspInit+0x6c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <HAL_MspInit+0x6c>)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010000 	.word	0x40010000

080029fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a28      	ldr	r2, [pc, #160]	@ (8002ab8 <HAL_ADC_MspInit+0xbc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d149      	bne.n	8002ab0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <HAL_ADC_MspInit+0xc0>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <HAL_ADC_MspInit+0xc0>)
 8002a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <HAL_ADC_MspInit+0xc0>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <HAL_ADC_MspInit+0xc0>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <HAL_ADC_MspInit+0xc0>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_ADC_MspInit+0xc0>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002a4c:	233e      	movs	r3, #62	@ 0x3e
 8002a4e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a50:	2303      	movs	r3, #3
 8002a52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4819      	ldr	r0, [pc, #100]	@ (8002ac0 <HAL_ADC_MspInit+0xc4>)
 8002a5c:	f001 fc00 	bl	8004260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a60:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a62:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <HAL_ADC_MspInit+0xcc>)
 8002a64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a78:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a80:	4b10      	ldr	r3, [pc, #64]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a94:	480b      	ldr	r0, [pc, #44]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002a96:	f001 f941 	bl	8003d1c <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002aa0:	f7ff ff6e 	bl	8002980 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002aa8:	621a      	str	r2, [r3, #32]
 8002aaa:	4a06      	ldr	r2, [pc, #24]	@ (8002ac4 <HAL_ADC_MspInit+0xc8>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ab0:	bf00      	nop
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40012400 	.word	0x40012400
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010800 	.word	0x40010800
 8002ac4:	200005b4 	.word	0x200005b4
 8002ac8:	40020008 	.word	0x40020008

08002acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b5c <HAL_I2C_MspInit+0x90>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d132      	bne.n	8002b52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	4b1c      	ldr	r3, [pc, #112]	@ (8002b60 <HAL_I2C_MspInit+0x94>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b60 <HAL_I2C_MspInit+0x94>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_I2C_MspInit+0x94>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0a:	2312      	movs	r3, #18
 8002b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4812      	ldr	r0, [pc, #72]	@ (8002b64 <HAL_I2C_MspInit+0x98>)
 8002b1a:	f001 fba1 	bl	8004260 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b1e:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_I2C_MspInit+0x9c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b34:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <HAL_I2C_MspInit+0x9c>)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_I2C_MspInit+0x94>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <HAL_I2C_MspInit+0x94>)
 8002b40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_I2C_MspInit+0x94>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	@ 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010c00 	.word	0x40010c00
 8002b68:	40010000 	.word	0x40010000

08002b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <HAL_TIM_Base_MspInit+0x58>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10c      	bne.n	8002b98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8002b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b88:	6193      	str	r3, [r2, #24]
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b96:	e010      	b.n	8002bba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bcc <HAL_TIM_Base_MspInit+0x60>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10b      	bne.n	8002bba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	61d3      	str	r3, [r2, #28]
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <HAL_TIM_MspPostInit+0x8c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d131      	bne.n	8002c54 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_TIM_MspPostInit+0x90>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <HAL_TIM_MspPostInit+0x90>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <HAL_TIM_MspPostInit+0x90>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_TIM_MspPostInit+0x90>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <HAL_TIM_MspPostInit+0x90>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_TIM_MspPostInit+0x90>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c20:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 0310 	add.w	r3, r7, #16
 8002c32:	4619      	mov	r1, r3
 8002c34:	480b      	ldr	r0, [pc, #44]	@ (8002c64 <HAL_TIM_MspPostInit+0x94>)
 8002c36:	f001 fb13 	bl	8004260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c3a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2302      	movs	r3, #2
 8002c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4806      	ldr	r0, [pc, #24]	@ (8002c68 <HAL_TIM_MspPostInit+0x98>)
 8002c50:	f001 fb06 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010c00 	.word	0x40010c00
 8002c68:	40010800 	.word	0x40010800

08002c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <HAL_UART_MspInit+0xb4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d145      	bne.n	8002d18 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8c:	4b25      	ldr	r3, [pc, #148]	@ (8002d24 <HAL_UART_MspInit+0xb8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a24      	ldr	r2, [pc, #144]	@ (8002d24 <HAL_UART_MspInit+0xb8>)
 8002c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <HAL_UART_MspInit+0xb8>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <HAL_UART_MspInit+0xb8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d24 <HAL_UART_MspInit+0xb8>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cbc:	2340      	movs	r3, #64	@ 0x40
 8002cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4816      	ldr	r0, [pc, #88]	@ (8002d28 <HAL_UART_MspInit+0xbc>)
 8002cd0:	f001 fac6 	bl	8004260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4810      	ldr	r0, [pc, #64]	@ (8002d28 <HAL_UART_MspInit+0xbc>)
 8002ce8:	f001 faba 	bl	8004260 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002cec:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <HAL_UART_MspInit+0xc0>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d02:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <HAL_UART_MspInit+0xc0>)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2105      	movs	r1, #5
 8002d0c:	2025      	movs	r0, #37	@ 0x25
 8002d0e:	f000 ffda 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d12:	2025      	movs	r0, #37	@ 0x25
 8002d14:	f000 fff3 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	@ 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40010c00 	.word	0x40010c00
 8002d2c:	40010000 	.word	0x40010000

08002d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	@ 0x38
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d46:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_InitTick+0xe8>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a33      	ldr	r2, [pc, #204]	@ (8002e18 <HAL_InitTick+0xe8>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b31      	ldr	r3, [pc, #196]	@ (8002e18 <HAL_InitTick+0xe8>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d5e:	f107 0210 	add.w	r2, r7, #16
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fcdf 	bl	800572c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d78:	f002 fcb0 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8002d7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8002d7e:	e004      	b.n	8002d8a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d80:	f002 fcac 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8002d84:	4603      	mov	r3, r0
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	4a23      	ldr	r2, [pc, #140]	@ (8002e1c <HAL_InitTick+0xec>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	3b01      	subs	r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002d9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002da0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002da2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002da6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002da8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002dae:	4b1c      	ldr	r3, [pc, #112]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dba:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002dc0:	4817      	ldr	r0, [pc, #92]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002dc2:	f002 fe6d 	bl	8005aa0 <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11b      	bne.n	8002e0c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002dd4:	4812      	ldr	r0, [pc, #72]	@ (8002e20 <HAL_InitTick+0xf0>)
 8002dd6:	f002 fefd 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de8:	201c      	movs	r0, #28
 8002dea:	f000 ff88 	bl	8003cfe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d808      	bhi.n	8002e06 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	201c      	movs	r0, #28
 8002dfa:	f000 ff64 	bl	8003cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dfe:	4a09      	ldr	r2, [pc, #36]	@ (8002e24 <HAL_InitTick+0xf4>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	e002      	b.n	8002e0c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3738      	adds	r7, #56	@ 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	431bde83 	.word	0x431bde83
 8002e20:	200007a4 	.word	0x200007a4
 8002e24:	20000018 	.word	0x20000018

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <NMI_Handler+0x4>

08002e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <HardFault_Handler+0x4>

08002e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <MemManage_Handler+0x4>

08002e40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(kisa_d_algila_Pin);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f001 fbb3 	bl	80045cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
			  if(kisa_d_algila_Pin == GPIO_PIN_0 ) // If The INT Source Is EXTI Line9 (A9 Pin)
			       {
				  kisa_devre = true;
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <EXTI0_IRQHandler+0x4c>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
				  //HAL_GPIO_TogglePin(kaynak_bagla_GPIO_Port, kaynak_bagla_Pin);
				  if(!asiri_akim && kisa_devre && asgariDurum && azamiDurum){
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <EXTI0_IRQHandler+0x50>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <EXTI0_IRQHandler+0x48>
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <EXTI0_IRQHandler+0x4c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00e      	beq.n	8002ea4 <EXTI0_IRQHandler+0x48>
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <EXTI0_IRQHandler+0x54>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <EXTI0_IRQHandler+0x48>
 8002e90:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <EXTI0_IRQHandler+0x58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <EXTI0_IRQHandler+0x48>
					  HAL_GPIO_WritePin(yuk_bagla_GPIO_Port, yuk_bagla_Pin, SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <EXTI0_IRQHandler+0x5c>)
 8002ea0:	f001 fb62 	bl	8004568 <HAL_GPIO_WritePin>
				  }
			       }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000765 	.word	0x20000765
 8002eac:	20000764 	.word	0x20000764
 8002eb0:	20000011 	.word	0x20000011
 8002eb4:	20000010 	.word	0x20000010
 8002eb8:	40010800 	.word	0x40010800

08002ebc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(asiri_a_algila_Pin);
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f001 fb83 	bl	80045cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
			  if(asiri_a_algila_Pin == GPIO_PIN_1 ) // If The INT Source Is EXTI Line9 (A9 Pin)
			      {
				  asiri_akim = true;
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <EXTI1_IRQHandler+0x3c>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
				  //HAL_GPIO_TogglePin(yuk_bagla_GPIO_Port, yuk_bagla_Pin);
				  if(asiri_akim && kisa_devre){
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <EXTI1_IRQHandler+0x3c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00e      	beq.n	8002ef4 <EXTI1_IRQHandler+0x38>
 8002ed6:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <EXTI1_IRQHandler+0x40>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <EXTI1_IRQHandler+0x38>
					  HAL_GPIO_WritePin(kaynak_bagla_GPIO_Port, kaynak_bagla_Pin, RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2180      	movs	r1, #128	@ 0x80
 8002ee4:	4806      	ldr	r0, [pc, #24]	@ (8002f00 <EXTI1_IRQHandler+0x44>)
 8002ee6:	f001 fb3f 	bl	8004568 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(yuk_bagla_GPIO_Port, yuk_bagla_Pin, RESET);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2140      	movs	r1, #64	@ 0x40
 8002eee:	4804      	ldr	r0, [pc, #16]	@ (8002f00 <EXTI1_IRQHandler+0x44>)
 8002ef0:	f001 fb3a 	bl	8004568 <HAL_GPIO_WritePin>
				  }
			      }

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000764 	.word	0x20000764
 8002efc:	20000765 	.word	0x20000765
 8002f00:	40010800 	.word	0x40010800

08002f04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f08:	4802      	ldr	r0, [pc, #8]	@ (8002f14 <DMA1_Channel1_IRQHandler+0x10>)
 8002f0a:	f001 f875 	bl	8003ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200005b4 	.word	0x200005b4

08002f18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(timeout >0)  timeout--;
 8002f1c:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <TIM2_IRQHandler+0x24>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <TIM2_IRQHandler+0x18>
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <TIM2_IRQHandler+0x24>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <TIM2_IRQHandler+0x24>)
 8002f2e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f30:	4803      	ldr	r0, [pc, #12]	@ (8002f40 <TIM2_IRQHandler+0x28>)
 8002f32:	f002 ffff 	bl	8005f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200004c2 	.word	0x200004c2
 8002f40:	200007a4 	.word	0x200007a4

08002f44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002f48:	4803      	ldr	r0, [pc, #12]	@ (8002f58 <USART1_IRQHandler+0x14>)
 8002f4a:	f7fe f9ab 	bl	80012a4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f4e:	4802      	ldr	r0, [pc, #8]	@ (8002f58 <USART1_IRQHandler+0x14>)
 8002f50:	f003 ff7c 	bl	8006e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200006dc 	.word	0x200006dc

08002f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return 1;
 8002f60:	2301      	movs	r3, #1
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <_kill>:

int _kill(int pid, int sig)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f74:	f006 fc8c 	bl	8009890 <__errno>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2216      	movs	r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_exit>:

void _exit (int status)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f92:	f04f 31ff 	mov.w	r1, #4294967295
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffe7 	bl	8002f6a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <_exit+0x12>

08002fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e00a      	b.n	8002fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fb2:	f3af 8000 	nop.w
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	60ba      	str	r2, [r7, #8]
 8002fbe:	b2ca      	uxtb	r2, r1
 8002fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dbf0      	blt.n	8002fb2 <_read+0x12>
  }

  return len;
 8002fd0:	687b      	ldr	r3, [r7, #4]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e009      	b.n	8003000 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	60ba      	str	r2, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	dbf1      	blt.n	8002fec <_write+0x12>
  }
  return len;
 8003008:	687b      	ldr	r3, [r7, #4]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_close>:

int _close(int file)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003038:	605a      	str	r2, [r3, #4]
  return 0;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <_isatty>:

int _isatty(int file)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
	...

08003074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800307c:	4a14      	ldr	r2, [pc, #80]	@ (80030d0 <_sbrk+0x5c>)
 800307e:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <_sbrk+0x60>)
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003088:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <_sbrk+0x64>)
 8003092:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <_sbrk+0x68>)
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003096:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <_sbrk+0x64>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d207      	bcs.n	80030b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a4:	f006 fbf4 	bl	8009890 <__errno>
 80030a8:	4603      	mov	r3, r0
 80030aa:	220c      	movs	r2, #12
 80030ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	e009      	b.n	80030c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b4:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <_sbrk+0x64>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <_sbrk+0x64>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	4a05      	ldr	r2, [pc, #20]	@ (80030d8 <_sbrk+0x64>)
 80030c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20005000 	.word	0x20005000
 80030d4:	00000400 	.word	0x00000400
 80030d8:	200007ec 	.word	0x200007ec
 80030dc:	20001690 	.word	0x20001690

080030e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030ec:	f7ff fff8 	bl	80030e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f0:	480b      	ldr	r0, [pc, #44]	@ (8003120 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030f2:	490c      	ldr	r1, [pc, #48]	@ (8003124 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f8:	e002      	b.n	8003100 <LoopCopyDataInit>

080030fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fe:	3304      	adds	r3, #4

08003100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003104:	d3f9      	bcc.n	80030fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003106:	4a09      	ldr	r2, [pc, #36]	@ (800312c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003108:	4c09      	ldr	r4, [pc, #36]	@ (8003130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800310c:	e001      	b.n	8003112 <LoopFillZerobss>

0800310e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003110:	3204      	adds	r2, #4

08003112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003114:	d3fb      	bcc.n	800310e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003116:	f006 fbc1 	bl	800989c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800311a:	f7ff f86f 	bl	80021fc <main>
  bx lr
 800311e:	4770      	bx	lr
  ldr r0, =_sdata
 8003120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003124:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003128:	0800cdd8 	.word	0x0800cdd8
  ldr r2, =_sbss
 800312c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003130:	2000168c 	.word	0x2000168c

08003134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003134:	e7fe      	b.n	8003134 <ADC1_2_IRQHandler>
	...

08003138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <HAL_Init+0x28>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <HAL_Init+0x28>)
 8003142:	f043 0310 	orr.w	r3, r3, #16
 8003146:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f000 fdb1 	bl	8003cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314e:	200f      	movs	r0, #15
 8003150:	f7ff fdee 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7ff fc1a 	bl	800298c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000

08003164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <HAL_IncTick+0x1c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_IncTick+0x20>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4413      	add	r3, r2
 8003174:	4a03      	ldr	r2, [pc, #12]	@ (8003184 <HAL_IncTick+0x20>)
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	2000001c 	.word	0x2000001c
 8003184:	200007f0 	.word	0x200007f0

08003188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b02      	ldr	r3, [pc, #8]	@ (8003198 <HAL_GetTick+0x10>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	200007f0 	.word	0x200007f0

0800319c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff fff0 	bl	8003188 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d005      	beq.n	80031c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_Delay+0x44>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031c2:	bf00      	nop
 80031c4:	f7ff ffe0 	bl	8003188 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d8f7      	bhi.n	80031c4 <HAL_Delay+0x28>
  {
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000001c 	.word	0x2000001c

080031e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0be      	b.n	8003384 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fbea 	bl	80029fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fb41 	bl	80038b0 <ADC_ConversionStop_Disable>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 8099 	bne.w	8003372 <HAL_ADC_Init+0x18e>
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8095 	bne.w	8003372 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003250:	f023 0302 	bic.w	r3, r3, #2
 8003254:	f043 0202 	orr.w	r2, r3, #2
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003264:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7b1b      	ldrb	r3, [r3, #12]
 800326a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800326c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4313      	orrs	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800327c:	d003      	beq.n	8003286 <HAL_ADC_Init+0xa2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_ADC_Init+0xa8>
 8003286:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800328a:	e000      	b.n	800328e <HAL_ADC_Init+0xaa>
 800328c:	2300      	movs	r3, #0
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7d1b      	ldrb	r3, [r3, #20]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d119      	bne.n	80032d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7b1b      	ldrb	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	035a      	lsls	r2, r3, #13
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e00b      	b.n	80032d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	4b28      	ldr	r3, [pc, #160]	@ (800338c <HAL_ADC_Init+0x1a8>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003300:	d003      	beq.n	800330a <HAL_ADC_Init+0x126>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d104      	bne.n	8003314 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	3b01      	subs	r3, #1
 8003310:	051b      	lsls	r3, r3, #20
 8003312:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	430a      	orrs	r2, r1
 8003326:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <HAL_ADC_Init+0x1ac>)
 8003330:	4013      	ands	r3, r2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d10b      	bne.n	8003350 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800334e:	e018      	b.n	8003382 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f023 0312 	bic.w	r3, r3, #18
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003370:	e007      	b.n	8003382 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	f043 0210 	orr.w	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	ffe1f7fd 	.word	0xffe1f7fd
 8003390:	ff1f0efe 	.word	0xff1f0efe

08003394 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a64      	ldr	r2, [pc, #400]	@ (800353c <HAL_ADC_Start_DMA+0x1a8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_ADC_Start_DMA+0x24>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a63      	ldr	r2, [pc, #396]	@ (8003540 <HAL_ADC_Start_DMA+0x1ac>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d106      	bne.n	80033c6 <HAL_ADC_Start_DMA+0x32>
 80033b8:	4b60      	ldr	r3, [pc, #384]	@ (800353c <HAL_ADC_Start_DMA+0x1a8>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 80b3 	bne.w	800352c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_Start_DMA+0x40>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0ae      	b.n	8003532 <HAL_ADC_Start_DMA+0x19e>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fa0d 	bl	80037fc <ADC_Enable>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 809a 	bne.w	8003522 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4e      	ldr	r2, [pc, #312]	@ (8003540 <HAL_ADC_Start_DMA+0x1ac>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d105      	bne.n	8003418 <HAL_ADC_Start_DMA+0x84>
 800340c:	4b4b      	ldr	r3, [pc, #300]	@ (800353c <HAL_ADC_Start_DMA+0x1a8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d115      	bne.n	8003444 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342e:	2b00      	cmp	r3, #0
 8003430:	d026      	beq.n	8003480 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800343a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003442:	e01d      	b.n	8003480 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a39      	ldr	r2, [pc, #228]	@ (800353c <HAL_ADC_Start_DMA+0x1a8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_ADC_Start_DMA+0xd0>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a38      	ldr	r2, [pc, #224]	@ (8003540 <HAL_ADC_Start_DMA+0x1ac>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10d      	bne.n	8003480 <HAL_ADC_Start_DMA+0xec>
 8003464:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_ADC_Start_DMA+0x1a8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003478:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	f023 0206 	bic.w	r2, r3, #6
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003498:	e002      	b.n	80034a0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a25      	ldr	r2, [pc, #148]	@ (8003544 <HAL_ADC_Start_DMA+0x1b0>)
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a24      	ldr	r2, [pc, #144]	@ (8003548 <HAL_ADC_Start_DMA+0x1b4>)
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a23      	ldr	r2, [pc, #140]	@ (800354c <HAL_ADC_Start_DMA+0x1b8>)
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0202 	mvn.w	r2, #2
 80034c8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a18      	ldr	r0, [r3, #32]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	334c      	adds	r3, #76	@ 0x4c
 80034e4:	4619      	mov	r1, r3
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f000 fc71 	bl	8003dd0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80034f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80034fc:	d108      	bne.n	8003510 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800350c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800350e:	e00f      	b.n	8003530 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800351e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003520:	e006      	b.n	8003530 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800352a:	e001      	b.n	8003530 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40012400 	.word	0x40012400
 8003540:	40012800 	.word	0x40012800
 8003544:	08003933 	.word	0x08003933
 8003548:	080039af 	.word	0x080039af
 800354c:	080039cb 	.word	0x080039cb

08003550 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_ADC_Stop_DMA+0x1a>
 8003566:	2302      	movs	r3, #2
 8003568:	e03a      	b.n	80035e0 <HAL_ADC_Stop_DMA+0x90>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f99c 	bl	80038b0 <ADC_ConversionStop_Disable>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d129      	bne.n	80035d6 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003590:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d11a      	bne.n	80035d6 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fc73 	bl	8003e90 <HAL_DMA_Abort>
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035c8:	e005      	b.n	80035d6 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x20>
 8003628:	2302      	movs	r3, #2
 800362a:	e0dc      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x1da>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b06      	cmp	r3, #6
 800363a:	d81c      	bhi.n	8003676 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b05      	subs	r3, #5
 800364e:	221f      	movs	r2, #31
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	4019      	ands	r1, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	3b05      	subs	r3, #5
 8003668:	fa00 f203 	lsl.w	r2, r0, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34
 8003674:	e03c      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d81c      	bhi.n	80036b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	3b23      	subs	r3, #35	@ 0x23
 8003690:	221f      	movs	r2, #31
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	4019      	ands	r1, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	3b23      	subs	r3, #35	@ 0x23
 80036aa:	fa00 f203 	lsl.w	r2, r0, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80036b6:	e01b      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3b41      	subs	r3, #65	@ 0x41
 80036ca:	221f      	movs	r2, #31
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4019      	ands	r1, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	3b41      	subs	r3, #65	@ 0x41
 80036e4:	fa00 f203 	lsl.w	r2, r0, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	d91c      	bls.n	8003732 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68d9      	ldr	r1, [r3, #12]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	3b1e      	subs	r3, #30
 800370a:	2207      	movs	r2, #7
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	4019      	ands	r1, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6898      	ldr	r0, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	3b1e      	subs	r3, #30
 8003724:	fa00 f203 	lsl.w	r2, r0, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e019      	b.n	8003766 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	2207      	movs	r2, #7
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	4019      	ands	r1, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6898      	ldr	r0, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	fa00 f203 	lsl.w	r2, r0, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b10      	cmp	r3, #16
 800376c:	d003      	beq.n	8003776 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003772:	2b11      	cmp	r3, #17
 8003774:	d132      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d125      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d126      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800379c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d11a      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037a6:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	0c9a      	lsrs	r2, r3, #18
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037bc:	e002      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f9      	bne.n	80037be <HAL_ADC_ConfigChannel+0x1b2>
 80037ca:	e007      	b.n	80037dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012400 	.word	0x40012400
 80037f4:	20000014 	.word	0x20000014
 80037f8:	431bde83 	.word	0x431bde83

080037fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d040      	beq.n	800389c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800382a:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <ADC_Enable+0xac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1f      	ldr	r2, [pc, #124]	@ (80038ac <ADC_Enable+0xb0>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9b      	lsrs	r3, r3, #18
 8003836:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003838:	e002      	b.n	8003840 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3b01      	subs	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f9      	bne.n	800383a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003846:	f7ff fc9f 	bl	8003188 <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800384c:	e01f      	b.n	800388e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800384e:	f7ff fc9b 	bl	8003188 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d918      	bls.n	800388e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d011      	beq.n	800388e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e007      	b.n	800389e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d1d8      	bne.n	800384e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000014 	.word	0x20000014
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d12e      	bne.n	8003928 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038da:	f7ff fc55 	bl	8003188 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038e0:	e01b      	b.n	800391a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038e2:	f7ff fc51 	bl	8003188 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d914      	bls.n	800391a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10d      	bne.n	800391a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	f043 0210 	orr.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e007      	b.n	800392a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d0dc      	beq.n	80038e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d127      	bne.n	800399c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003962:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003966:	d115      	bne.n	8003994 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800396c:	2b00      	cmp	r3, #0
 800396e:	d111      	bne.n	8003994 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7fe ff9d 	bl	80028d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800399a:	e004      	b.n	80039a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fe13 	bl	80035e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	f043 0204 	orr.w	r2, r3, #4
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fe02 	bl	80035fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_ADCEx_Calibration_Start+0x1e>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e097      	b.n	8003b4e <HAL_ADCEx_Calibration_Start+0x14e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ff42 	bl	80038b0 <ADC_ConversionStop_Disable>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fee3 	bl	80037fc <ADC_Enable>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 8081 	bne.w	8003b44 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a4a:	f023 0302 	bic.w	r3, r3, #2
 8003a4e:	f043 0202 	orr.w	r2, r3, #2
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003a56:	4b40      	ldr	r3, [pc, #256]	@ (8003b58 <HAL_ADCEx_Calibration_Start+0x158>)
 8003a58:	681c      	ldr	r4, [r3, #0]
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f001 ff6a 	bl	8005934 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a60:	4603      	mov	r3, r0
 8003a62:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003a66:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003a68:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003a6a:	e002      	b.n	8003a72 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a88:	f7ff fb7e 	bl	8003188 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a8e:	e01b      	b.n	8003ac8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a90:	f7ff fb7a 	bl	8003188 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b0a      	cmp	r3, #10
 8003a9c:	d914      	bls.n	8003ac8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	f023 0312 	bic.w	r3, r3, #18
 8003ab4:	f043 0210 	orr.w	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e042      	b.n	8003b4e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1dc      	bne.n	8003a90 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0204 	orr.w	r2, r2, #4
 8003ae4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003ae6:	f7ff fb4f 	bl	8003188 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003aec:	e01b      	b.n	8003b26 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003aee:	f7ff fb4b 	bl	8003188 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b0a      	cmp	r3, #10
 8003afa:	d914      	bls.n	8003b26 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	f023 0312 	bic.w	r3, r3, #18
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e013      	b.n	8003b4e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1dc      	bne.n	8003aee <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	f023 0303 	bic.w	r3, r3, #3
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000014 	.word	0x20000014

08003b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <__NVIC_GetPriorityGrouping+0x18>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0307 	and.w	r3, r3, #7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0b      	blt.n	8003bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <__NVIC_EnableIRQ+0x34>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	@ (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	@ (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
         );
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	@ 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff4f 	bl	8003b5c <__NVIC_SetPriorityGrouping>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd8:	f7ff ff64 	bl	8003ba4 <__NVIC_GetPriorityGrouping>
 8003cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f7ff ffb2 	bl	8003c4c <NVIC_EncodePriority>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff81 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff57 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e043      	b.n	8003dba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b22      	ldr	r3, [pc, #136]	@ (8003dc4 <HAL_DMA_Init+0xa8>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a22      	ldr	r2, [pc, #136]	@ (8003dc8 <HAL_DMA_Init+0xac>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_DMA_Init+0xb0>)
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	bffdfff8 	.word	0xbffdfff8
 8003dc8:	cccccccd 	.word	0xcccccccd
 8003dcc:	40020000 	.word	0x40020000

08003dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Start_IT+0x20>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e04b      	b.n	8003e88 <HAL_DMA_Start_IT+0xb8>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d13a      	bne.n	8003e7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f9eb 	bl	8004204 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 020e 	orr.w	r2, r2, #14
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00f      	b.n	8003e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 020a 	orr.w	r2, r2, #10
 8003e66:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e005      	b.n	8003e86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d008      	beq.n	8003eba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e020      	b.n	8003efc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 020e 	bic.w	r2, r2, #14
 8003ec8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d005      	beq.n	8003f2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2204      	movs	r2, #4
 8003f24:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	e051      	b.n	8003fd0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 020e 	bic.w	r2, r2, #14
 8003f3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <HAL_DMA_Abort_IT+0xd4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d029      	beq.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	@ (8003fe0 <HAL_DMA_Abort_IT+0xd8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <HAL_DMA_Abort_IT+0x9e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe4 <HAL_DMA_Abort_IT+0xdc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01a      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x98>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <HAL_DMA_Abort_IT+0xe0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d012      	beq.n	8003f9a <HAL_DMA_Abort_IT+0x92>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <HAL_DMA_Abort_IT+0xe4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00a      	beq.n	8003f94 <HAL_DMA_Abort_IT+0x8c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_DMA_Abort_IT+0xe8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d102      	bne.n	8003f8e <HAL_DMA_Abort_IT+0x86>
 8003f88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f8c:	e00e      	b.n	8003fac <HAL_DMA_Abort_IT+0xa4>
 8003f8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f92:	e00b      	b.n	8003fac <HAL_DMA_Abort_IT+0xa4>
 8003f94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f98:	e008      	b.n	8003fac <HAL_DMA_Abort_IT+0xa4>
 8003f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f9e:	e005      	b.n	8003fac <HAL_DMA_Abort_IT+0xa4>
 8003fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fa4:	e002      	b.n	8003fac <HAL_DMA_Abort_IT+0xa4>
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	e000      	b.n	8003fac <HAL_DMA_Abort_IT+0xa4>
 8003faa:	2301      	movs	r3, #1
 8003fac:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <HAL_DMA_Abort_IT+0xec>)
 8003fae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
    } 
  }
  return status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40020008 	.word	0x40020008
 8003fe0:	4002001c 	.word	0x4002001c
 8003fe4:	40020030 	.word	0x40020030
 8003fe8:	40020044 	.word	0x40020044
 8003fec:	40020058 	.word	0x40020058
 8003ff0:	4002006c 	.word	0x4002006c
 8003ff4:	40020000 	.word	0x40020000

08003ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2204      	movs	r2, #4
 8004016:	409a      	lsls	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d04f      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xc8>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04a      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0204 	bic.w	r2, r2, #4
 8004046:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a66      	ldr	r2, [pc, #408]	@ (80041e8 <HAL_DMA_IRQHandler+0x1f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d029      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xae>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a65      	ldr	r2, [pc, #404]	@ (80041ec <HAL_DMA_IRQHandler+0x1f4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d022      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xaa>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a63      	ldr	r2, [pc, #396]	@ (80041f0 <HAL_DMA_IRQHandler+0x1f8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01a      	beq.n	800409c <HAL_DMA_IRQHandler+0xa4>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a62      	ldr	r2, [pc, #392]	@ (80041f4 <HAL_DMA_IRQHandler+0x1fc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d012      	beq.n	8004096 <HAL_DMA_IRQHandler+0x9e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a60      	ldr	r2, [pc, #384]	@ (80041f8 <HAL_DMA_IRQHandler+0x200>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00a      	beq.n	8004090 <HAL_DMA_IRQHandler+0x98>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5f      	ldr	r2, [pc, #380]	@ (80041fc <HAL_DMA_IRQHandler+0x204>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d102      	bne.n	800408a <HAL_DMA_IRQHandler+0x92>
 8004084:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004088:	e00e      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb0>
 800408a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800408e:	e00b      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb0>
 8004090:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004094:	e008      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb0>
 8004096:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800409a:	e005      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb0>
 800409c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040a0:	e002      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb0>
 80040a2:	2340      	movs	r3, #64	@ 0x40
 80040a4:	e000      	b.n	80040a8 <HAL_DMA_IRQHandler+0xb0>
 80040a6:	2304      	movs	r3, #4
 80040a8:	4a55      	ldr	r2, [pc, #340]	@ (8004200 <HAL_DMA_IRQHandler+0x208>)
 80040aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8094 	beq.w	80041de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80040be:	e08e      	b.n	80041de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2202      	movs	r2, #2
 80040c6:	409a      	lsls	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d056      	beq.n	800417e <HAL_DMA_IRQHandler+0x186>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d051      	beq.n	800417e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 020a 	bic.w	r2, r2, #10
 80040f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a38      	ldr	r2, [pc, #224]	@ (80041e8 <HAL_DMA_IRQHandler+0x1f0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d029      	beq.n	800415e <HAL_DMA_IRQHandler+0x166>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a37      	ldr	r2, [pc, #220]	@ (80041ec <HAL_DMA_IRQHandler+0x1f4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_DMA_IRQHandler+0x162>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a35      	ldr	r2, [pc, #212]	@ (80041f0 <HAL_DMA_IRQHandler+0x1f8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01a      	beq.n	8004154 <HAL_DMA_IRQHandler+0x15c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a34      	ldr	r2, [pc, #208]	@ (80041f4 <HAL_DMA_IRQHandler+0x1fc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d012      	beq.n	800414e <HAL_DMA_IRQHandler+0x156>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a32      	ldr	r2, [pc, #200]	@ (80041f8 <HAL_DMA_IRQHandler+0x200>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00a      	beq.n	8004148 <HAL_DMA_IRQHandler+0x150>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a31      	ldr	r2, [pc, #196]	@ (80041fc <HAL_DMA_IRQHandler+0x204>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d102      	bne.n	8004142 <HAL_DMA_IRQHandler+0x14a>
 800413c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004140:	e00e      	b.n	8004160 <HAL_DMA_IRQHandler+0x168>
 8004142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004146:	e00b      	b.n	8004160 <HAL_DMA_IRQHandler+0x168>
 8004148:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800414c:	e008      	b.n	8004160 <HAL_DMA_IRQHandler+0x168>
 800414e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004152:	e005      	b.n	8004160 <HAL_DMA_IRQHandler+0x168>
 8004154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004158:	e002      	b.n	8004160 <HAL_DMA_IRQHandler+0x168>
 800415a:	2320      	movs	r3, #32
 800415c:	e000      	b.n	8004160 <HAL_DMA_IRQHandler+0x168>
 800415e:	2302      	movs	r3, #2
 8004160:	4a27      	ldr	r2, [pc, #156]	@ (8004200 <HAL_DMA_IRQHandler+0x208>)
 8004162:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	d034      	beq.n	80041de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800417c:	e02f      	b.n	80041de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	2208      	movs	r2, #8
 8004184:	409a      	lsls	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d028      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x1e8>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d023      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020e 	bic.w	r2, r2, #14
 80041a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f202 	lsl.w	r2, r1, r2
 80041b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
    }
  }
  return;
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
}
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40020008 	.word	0x40020008
 80041ec:	4002001c 	.word	0x4002001c
 80041f0:	40020030 	.word	0x40020030
 80041f4:	40020044 	.word	0x40020044
 80041f8:	40020058 	.word	0x40020058
 80041fc:	4002006c 	.word	0x4002006c
 8004200:	40020000 	.word	0x40020000

08004204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b10      	cmp	r3, #16
 8004230:	d108      	bne.n	8004244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004242:	e007      	b.n	8004254 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
	...

08004260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004260:	b480      	push	{r7}
 8004262:	b08b      	sub	sp, #44	@ 0x2c
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004272:	e169      	b.n	8004548 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004274:	2201      	movs	r2, #1
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	429a      	cmp	r2, r3
 800428e:	f040 8158 	bne.w	8004542 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a9a      	ldr	r2, [pc, #616]	@ (8004500 <HAL_GPIO_Init+0x2a0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d05e      	beq.n	800435a <HAL_GPIO_Init+0xfa>
 800429c:	4a98      	ldr	r2, [pc, #608]	@ (8004500 <HAL_GPIO_Init+0x2a0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d875      	bhi.n	800438e <HAL_GPIO_Init+0x12e>
 80042a2:	4a98      	ldr	r2, [pc, #608]	@ (8004504 <HAL_GPIO_Init+0x2a4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d058      	beq.n	800435a <HAL_GPIO_Init+0xfa>
 80042a8:	4a96      	ldr	r2, [pc, #600]	@ (8004504 <HAL_GPIO_Init+0x2a4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d86f      	bhi.n	800438e <HAL_GPIO_Init+0x12e>
 80042ae:	4a96      	ldr	r2, [pc, #600]	@ (8004508 <HAL_GPIO_Init+0x2a8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d052      	beq.n	800435a <HAL_GPIO_Init+0xfa>
 80042b4:	4a94      	ldr	r2, [pc, #592]	@ (8004508 <HAL_GPIO_Init+0x2a8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d869      	bhi.n	800438e <HAL_GPIO_Init+0x12e>
 80042ba:	4a94      	ldr	r2, [pc, #592]	@ (800450c <HAL_GPIO_Init+0x2ac>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04c      	beq.n	800435a <HAL_GPIO_Init+0xfa>
 80042c0:	4a92      	ldr	r2, [pc, #584]	@ (800450c <HAL_GPIO_Init+0x2ac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d863      	bhi.n	800438e <HAL_GPIO_Init+0x12e>
 80042c6:	4a92      	ldr	r2, [pc, #584]	@ (8004510 <HAL_GPIO_Init+0x2b0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d046      	beq.n	800435a <HAL_GPIO_Init+0xfa>
 80042cc:	4a90      	ldr	r2, [pc, #576]	@ (8004510 <HAL_GPIO_Init+0x2b0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d85d      	bhi.n	800438e <HAL_GPIO_Init+0x12e>
 80042d2:	2b12      	cmp	r3, #18
 80042d4:	d82a      	bhi.n	800432c <HAL_GPIO_Init+0xcc>
 80042d6:	2b12      	cmp	r3, #18
 80042d8:	d859      	bhi.n	800438e <HAL_GPIO_Init+0x12e>
 80042da:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <HAL_GPIO_Init+0x80>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	0800435b 	.word	0x0800435b
 80042e4:	08004335 	.word	0x08004335
 80042e8:	08004347 	.word	0x08004347
 80042ec:	08004389 	.word	0x08004389
 80042f0:	0800438f 	.word	0x0800438f
 80042f4:	0800438f 	.word	0x0800438f
 80042f8:	0800438f 	.word	0x0800438f
 80042fc:	0800438f 	.word	0x0800438f
 8004300:	0800438f 	.word	0x0800438f
 8004304:	0800438f 	.word	0x0800438f
 8004308:	0800438f 	.word	0x0800438f
 800430c:	0800438f 	.word	0x0800438f
 8004310:	0800438f 	.word	0x0800438f
 8004314:	0800438f 	.word	0x0800438f
 8004318:	0800438f 	.word	0x0800438f
 800431c:	0800438f 	.word	0x0800438f
 8004320:	0800438f 	.word	0x0800438f
 8004324:	0800433d 	.word	0x0800433d
 8004328:	08004351 	.word	0x08004351
 800432c:	4a79      	ldr	r2, [pc, #484]	@ (8004514 <HAL_GPIO_Init+0x2b4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004332:	e02c      	b.n	800438e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	623b      	str	r3, [r7, #32]
          break;
 800433a:	e029      	b.n	8004390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	3304      	adds	r3, #4
 8004342:	623b      	str	r3, [r7, #32]
          break;
 8004344:	e024      	b.n	8004390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	3308      	adds	r3, #8
 800434c:	623b      	str	r3, [r7, #32]
          break;
 800434e:	e01f      	b.n	8004390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	330c      	adds	r3, #12
 8004356:	623b      	str	r3, [r7, #32]
          break;
 8004358:	e01a      	b.n	8004390 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004362:	2304      	movs	r3, #4
 8004364:	623b      	str	r3, [r7, #32]
          break;
 8004366:	e013      	b.n	8004390 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004370:	2308      	movs	r3, #8
 8004372:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	611a      	str	r2, [r3, #16]
          break;
 800437a:	e009      	b.n	8004390 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800437c:	2308      	movs	r3, #8
 800437e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	615a      	str	r2, [r3, #20]
          break;
 8004386:	e003      	b.n	8004390 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004388:	2300      	movs	r3, #0
 800438a:	623b      	str	r3, [r7, #32]
          break;
 800438c:	e000      	b.n	8004390 <HAL_GPIO_Init+0x130>
          break;
 800438e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2bff      	cmp	r3, #255	@ 0xff
 8004394:	d801      	bhi.n	800439a <HAL_GPIO_Init+0x13a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	e001      	b.n	800439e <HAL_GPIO_Init+0x13e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2bff      	cmp	r3, #255	@ 0xff
 80043a4:	d802      	bhi.n	80043ac <HAL_GPIO_Init+0x14c>
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	e002      	b.n	80043b2 <HAL_GPIO_Init+0x152>
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	3b08      	subs	r3, #8
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	210f      	movs	r1, #15
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	431a      	orrs	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80b1 	beq.w	8004542 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004518 <HAL_GPIO_Init+0x2b8>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4a4c      	ldr	r2, [pc, #304]	@ (8004518 <HAL_GPIO_Init+0x2b8>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6193      	str	r3, [r2, #24]
 80043ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004518 <HAL_GPIO_Init+0x2b8>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80043f8:	4a48      	ldr	r2, [pc, #288]	@ (800451c <HAL_GPIO_Init+0x2bc>)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	220f      	movs	r2, #15
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a40      	ldr	r2, [pc, #256]	@ (8004520 <HAL_GPIO_Init+0x2c0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_GPIO_Init+0x1ec>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a3f      	ldr	r2, [pc, #252]	@ (8004524 <HAL_GPIO_Init+0x2c4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00d      	beq.n	8004448 <HAL_GPIO_Init+0x1e8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a3e      	ldr	r2, [pc, #248]	@ (8004528 <HAL_GPIO_Init+0x2c8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d007      	beq.n	8004444 <HAL_GPIO_Init+0x1e4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3d      	ldr	r2, [pc, #244]	@ (800452c <HAL_GPIO_Init+0x2cc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d101      	bne.n	8004440 <HAL_GPIO_Init+0x1e0>
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <HAL_GPIO_Init+0x1ee>
 8004440:	2304      	movs	r3, #4
 8004442:	e004      	b.n	800444e <HAL_GPIO_Init+0x1ee>
 8004444:	2302      	movs	r3, #2
 8004446:	e002      	b.n	800444e <HAL_GPIO_Init+0x1ee>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_GPIO_Init+0x1ee>
 800444c:	2300      	movs	r3, #0
 800444e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004450:	f002 0203 	and.w	r2, r2, #3
 8004454:	0092      	lsls	r2, r2, #2
 8004456:	4093      	lsls	r3, r2
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800445e:	492f      	ldr	r1, [pc, #188]	@ (800451c <HAL_GPIO_Init+0x2bc>)
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	3302      	adds	r3, #2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004478:	4b2d      	ldr	r3, [pc, #180]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	492c      	ldr	r1, [pc, #176]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]
 8004484:	e006      	b.n	8004494 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004486:	4b2a      	ldr	r3, [pc, #168]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	43db      	mvns	r3, r3
 800448e:	4928      	ldr	r1, [pc, #160]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 8004490:	4013      	ands	r3, r2
 8004492:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044a0:	4b23      	ldr	r3, [pc, #140]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	4922      	ldr	r1, [pc, #136]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60cb      	str	r3, [r1, #12]
 80044ac:	e006      	b.n	80044bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044ae:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	491e      	ldr	r1, [pc, #120]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044c8:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	4918      	ldr	r1, [pc, #96]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
 80044d4:	e006      	b.n	80044e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044d6:	4b16      	ldr	r3, [pc, #88]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	43db      	mvns	r3, r3
 80044de:	4914      	ldr	r1, [pc, #80]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d021      	beq.n	8004534 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	490e      	ldr	r1, [pc, #56]	@ (8004530 <HAL_GPIO_Init+0x2d0>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	e021      	b.n	8004542 <HAL_GPIO_Init+0x2e2>
 80044fe:	bf00      	nop
 8004500:	10320000 	.word	0x10320000
 8004504:	10310000 	.word	0x10310000
 8004508:	10220000 	.word	0x10220000
 800450c:	10210000 	.word	0x10210000
 8004510:	10120000 	.word	0x10120000
 8004514:	10110000 	.word	0x10110000
 8004518:	40021000 	.word	0x40021000
 800451c:	40010000 	.word	0x40010000
 8004520:	40010800 	.word	0x40010800
 8004524:	40010c00 	.word	0x40010c00
 8004528:	40011000 	.word	0x40011000
 800452c:	40011400 	.word	0x40011400
 8004530:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_GPIO_Init+0x304>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	43db      	mvns	r3, r3
 800453c:	4909      	ldr	r1, [pc, #36]	@ (8004564 <HAL_GPIO_Init+0x304>)
 800453e:	4013      	ands	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	f47f ae8e 	bne.w	8004274 <HAL_GPIO_Init+0x14>
  }
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	372c      	adds	r7, #44	@ 0x2c
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	40010400 	.word	0x40010400

08004568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
 8004574:	4613      	mov	r3, r2
 8004576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004578:	787b      	ldrb	r3, [r7, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004584:	e003      	b.n	800458e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4013      	ands	r3, r2
 80045b0:	041a      	lsls	r2, r3, #16
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43d9      	mvns	r1, r3
 80045b6:	887b      	ldrh	r3, [r7, #2]
 80045b8:	400b      	ands	r3, r1
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d006      	beq.n	80045f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045e2:	4a05      	ldr	r2, [pc, #20]	@ (80045f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f806 	bl	80045fc <HAL_GPIO_EXTI_Callback>
  }
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e12b      	b.n	800487a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fa48 	bl	8002acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	@ 0x24
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004674:	f001 f832 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8004678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4a81      	ldr	r2, [pc, #516]	@ (8004884 <HAL_I2C_Init+0x274>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d807      	bhi.n	8004694 <HAL_I2C_Init+0x84>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a80      	ldr	r2, [pc, #512]	@ (8004888 <HAL_I2C_Init+0x278>)
 8004688:	4293      	cmp	r3, r2
 800468a:	bf94      	ite	ls
 800468c:	2301      	movls	r3, #1
 800468e:	2300      	movhi	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e006      	b.n	80046a2 <HAL_I2C_Init+0x92>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a7d      	ldr	r2, [pc, #500]	@ (800488c <HAL_I2C_Init+0x27c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	bf94      	ite	ls
 800469c:	2301      	movls	r3, #1
 800469e:	2300      	movhi	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0e7      	b.n	800487a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a78      	ldr	r2, [pc, #480]	@ (8004890 <HAL_I2C_Init+0x280>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004884 <HAL_I2C_Init+0x274>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d802      	bhi.n	80046e4 <HAL_I2C_Init+0xd4>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3301      	adds	r3, #1
 80046e2:	e009      	b.n	80046f8 <HAL_I2C_Init+0xe8>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	4a69      	ldr	r2, [pc, #420]	@ (8004894 <HAL_I2C_Init+0x284>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	3301      	adds	r3, #1
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800470a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	495c      	ldr	r1, [pc, #368]	@ (8004884 <HAL_I2C_Init+0x274>)
 8004714:	428b      	cmp	r3, r1
 8004716:	d819      	bhi.n	800474c <HAL_I2C_Init+0x13c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e59      	subs	r1, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fbb1 f3f3 	udiv	r3, r1, r3
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800472c:	400b      	ands	r3, r1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_I2C_Init+0x138>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e59      	subs	r1, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	e051      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 8004748:	2304      	movs	r3, #4
 800474a:	e04f      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <HAL_I2C_Init+0x168>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e58      	subs	r0, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	440b      	add	r3, r1
 8004762:	fbb0 f3f3 	udiv	r3, r0, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e012      	b.n	800479e <HAL_I2C_Init+0x18e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1e58      	subs	r0, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	0099      	lsls	r1, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	fbb0 f3f3 	udiv	r3, r0, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Init+0x196>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e022      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10e      	bne.n	80047cc <HAL_I2C_Init+0x1bc>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1e58      	subs	r0, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ca:	e00f      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	0099      	lsls	r1, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	6809      	ldr	r1, [r1, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800481a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6911      	ldr	r1, [r2, #16]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	4311      	orrs	r1, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	430b      	orrs	r3, r1
 800482e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	000186a0 	.word	0x000186a0
 8004888:	001e847f 	.word	0x001e847f
 800488c:	003d08ff 	.word	0x003d08ff
 8004890:	431bde83 	.word	0x431bde83
 8004894:	10624dd3 	.word	0x10624dd3

08004898 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	461a      	mov	r2, r3
 80048a4:	460b      	mov	r3, r1
 80048a6:	817b      	strh	r3, [r7, #10]
 80048a8:	4613      	mov	r3, r2
 80048aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ac:	f7fe fc6c 	bl	8003188 <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	f040 80e0 	bne.w	8004a80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2319      	movs	r3, #25
 80048c6:	2201      	movs	r2, #1
 80048c8:	4970      	ldr	r1, [pc, #448]	@ (8004a8c <HAL_I2C_Master_Transmit+0x1f4>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f964 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
 80048d8:	e0d3      	b.n	8004a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_I2C_Master_Transmit+0x50>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0cc      	b.n	8004a82 <HAL_I2C_Master_Transmit+0x1ea>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d007      	beq.n	800490e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800491c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2221      	movs	r2, #33	@ 0x21
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2210      	movs	r2, #16
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	893a      	ldrh	r2, [r7, #8]
 800493e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a50      	ldr	r2, [pc, #320]	@ (8004a90 <HAL_I2C_Master_Transmit+0x1f8>)
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004950:	8979      	ldrh	r1, [r7, #10]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f89c 	bl	8004a94 <I2C_MasterRequestWrite>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e08d      	b.n	8004a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800497c:	e066      	b.n	8004a4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	6a39      	ldr	r1, [r7, #32]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fa22 	bl	8004dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	2b04      	cmp	r3, #4
 8004994:	d107      	bne.n	80049a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e06b      	b.n	8004a82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d11b      	bne.n	8004a20 <HAL_I2C_Master_Transmit+0x188>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	6a39      	ldr	r1, [r7, #32]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fa19 	bl	8004e5c <I2C_WaitOnBTFFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d107      	bne.n	8004a48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e01a      	b.n	8004a82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d194      	bne.n	800497e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	00100002 	.word	0x00100002
 8004a90:	ffff0000 	.word	0xffff0000

08004a94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d006      	beq.n	8004abe <I2C_MasterRequestWrite+0x2a>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d003      	beq.n	8004abe <I2C_MasterRequestWrite+0x2a>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004abc:	d108      	bne.n	8004ad0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e00b      	b.n	8004ae8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad4:	2b12      	cmp	r3, #18
 8004ad6:	d107      	bne.n	8004ae8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f84f 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b0e:	d103      	bne.n	8004b18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e035      	b.n	8004b88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b24:	d108      	bne.n	8004b38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b26:	897b      	ldrh	r3, [r7, #10]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b34:	611a      	str	r2, [r3, #16]
 8004b36:	e01b      	b.n	8004b70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b38:	897b      	ldrh	r3, [r7, #10]
 8004b3a:	11db      	asrs	r3, r3, #7
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0306 	and.w	r3, r3, #6
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f063 030f 	orn	r3, r3, #15
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	490e      	ldr	r1, [pc, #56]	@ (8004b90 <I2C_MasterRequestWrite+0xfc>)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f898 	bl	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e010      	b.n	8004b88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4907      	ldr	r1, [pc, #28]	@ (8004b94 <I2C_MasterRequestWrite+0x100>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f888 	bl	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	00010008 	.word	0x00010008
 8004b94:	00010002 	.word	0x00010002

08004b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba8:	e048      	b.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d044      	beq.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fe fae9 	bl	8003188 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d139      	bne.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d10d      	bne.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	e00c      	b.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	43da      	mvns	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e023      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10d      	bne.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	e00c      	b.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d093      	beq.n	8004baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c9a:	e071      	b.n	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004caa:	d123      	bne.n	8004cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e067      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d041      	beq.n	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fe fa44 	bl	8003188 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d136      	bne.n	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10c      	bne.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	43da      	mvns	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e00b      	b.n	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e021      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d10c      	bne.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	43da      	mvns	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4013      	ands	r3, r2
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e00b      	b.n	8004dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	43da      	mvns	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f47f af6d 	bne.w	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd8:	e034      	b.n	8004e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f886 	bl	8004eec <I2C_IsAcknowledgeFailed>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e034      	b.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d028      	beq.n	8004e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df2:	f7fe f9c9 	bl	8003188 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11d      	bne.n	8004e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e12:	2b80      	cmp	r3, #128	@ 0x80
 8004e14:	d016      	beq.n	8004e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e007      	b.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4e:	2b80      	cmp	r3, #128	@ 0x80
 8004e50:	d1c3      	bne.n	8004dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e68:	e034      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f83e 	bl	8004eec <I2C_IsAcknowledgeFailed>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e034      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d028      	beq.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fe f981 	bl	8003188 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11d      	bne.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d016      	beq.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e007      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d1c3      	bne.n	8004e6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f02:	d11b      	bne.n	8004f3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e272      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8087 	beq.w	8005076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f68:	4b92      	ldr	r3, [pc, #584]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d00c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f74:	4b8f      	ldr	r3, [pc, #572]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d112      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x5e>
 8004f80:	4b8c      	ldr	r3, [pc, #560]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8e:	4b89      	ldr	r3, [pc, #548]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d06c      	beq.n	8005074 <HAL_RCC_OscConfig+0x12c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d168      	bne.n	8005074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e24c      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fae:	d106      	bne.n	8004fbe <HAL_RCC_OscConfig+0x76>
 8004fb0:	4b80      	ldr	r3, [pc, #512]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a7f      	ldr	r2, [pc, #508]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e02e      	b.n	800501c <HAL_RCC_OscConfig+0xd4>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x98>
 8004fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a7a      	ldr	r2, [pc, #488]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	4b78      	ldr	r3, [pc, #480]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a77      	ldr	r2, [pc, #476]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e01d      	b.n	800501c <HAL_RCC_OscConfig+0xd4>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCC_OscConfig+0xbc>
 8004fea:	4b72      	ldr	r3, [pc, #456]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a71      	ldr	r2, [pc, #452]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b6f      	ldr	r3, [pc, #444]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a6e      	ldr	r2, [pc, #440]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e00b      	b.n	800501c <HAL_RCC_OscConfig+0xd4>
 8005004:	4b6b      	ldr	r3, [pc, #428]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a6a      	ldr	r2, [pc, #424]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 800500a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4b68      	ldr	r3, [pc, #416]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a67      	ldr	r2, [pc, #412]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800501a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fe f8b0 	bl	8003188 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800502c:	f7fe f8ac 	bl	8003188 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	@ 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e200      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b5d      	ldr	r3, [pc, #372]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0xe4>
 800504a:	e014      	b.n	8005076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fe f89c 	bl	8003188 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005054:	f7fe f898 	bl	8003188 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	@ 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1ec      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005066:	4b53      	ldr	r3, [pc, #332]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x10c>
 8005072:	e000      	b.n	8005076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d063      	beq.n	800514a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005082:	4b4c      	ldr	r3, [pc, #304]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800508e:	4b49      	ldr	r3, [pc, #292]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b08      	cmp	r3, #8
 8005098:	d11c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x18c>
 800509a:	4b46      	ldr	r3, [pc, #280]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d116      	bne.n	80050d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	4b43      	ldr	r3, [pc, #268]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_RCC_OscConfig+0x176>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e1c0      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050be:	4b3d      	ldr	r3, [pc, #244]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4939      	ldr	r1, [pc, #228]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d2:	e03a      	b.n	800514a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050dc:	4b36      	ldr	r3, [pc, #216]	@ (80051b8 <HAL_RCC_OscConfig+0x270>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fe f851 	bl	8003188 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ea:	f7fe f84d 	bl	8003188 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e1a1      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	4b2d      	ldr	r3, [pc, #180]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b2a      	ldr	r3, [pc, #168]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4927      	ldr	r1, [pc, #156]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
 800511c:	e015      	b.n	800514a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511e:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <HAL_RCC_OscConfig+0x270>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fe f830 	bl	8003188 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512c:	f7fe f82c 	bl	8003188 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e180      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513e:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d03a      	beq.n	80051cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d019      	beq.n	8005192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515e:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <HAL_RCC_OscConfig+0x274>)
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005164:	f7fe f810 	bl	8003188 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800516c:	f7fe f80c 	bl	8003188 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e160      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <HAL_RCC_OscConfig+0x26c>)
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800518a:	2001      	movs	r0, #1
 800518c:	f000 fafe 	bl	800578c <RCC_Delay>
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005192:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <HAL_RCC_OscConfig+0x274>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005198:	f7fd fff6 	bl	8003188 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519e:	e00f      	b.n	80051c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a0:	f7fd fff2 	bl	8003188 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d908      	bls.n	80051c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e146      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	42420000 	.word	0x42420000
 80051bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	4b92      	ldr	r3, [pc, #584]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e9      	bne.n	80051a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80a6 	beq.w	8005326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051de:	4b8b      	ldr	r3, [pc, #556]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	4b88      	ldr	r3, [pc, #544]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	4a87      	ldr	r2, [pc, #540]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	61d3      	str	r3, [r2, #28]
 80051f6:	4b85      	ldr	r3, [pc, #532]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005206:	4b82      	ldr	r3, [pc, #520]	@ (8005410 <HAL_RCC_OscConfig+0x4c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d118      	bne.n	8005244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005212:	4b7f      	ldr	r3, [pc, #508]	@ (8005410 <HAL_RCC_OscConfig+0x4c8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7e      	ldr	r2, [pc, #504]	@ (8005410 <HAL_RCC_OscConfig+0x4c8>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800521c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521e:	f7fd ffb3 	bl	8003188 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005226:	f7fd ffaf 	bl	8003188 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b64      	cmp	r3, #100	@ 0x64
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e103      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	4b75      	ldr	r3, [pc, #468]	@ (8005410 <HAL_RCC_OscConfig+0x4c8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x312>
 800524c:	4b6f      	ldr	r3, [pc, #444]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	4a6e      	ldr	r2, [pc, #440]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6213      	str	r3, [r2, #32]
 8005258:	e02d      	b.n	80052b6 <HAL_RCC_OscConfig+0x36e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0x334>
 8005262:	4b6a      	ldr	r3, [pc, #424]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4a69      	ldr	r2, [pc, #420]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	6213      	str	r3, [r2, #32]
 800526e:	4b67      	ldr	r3, [pc, #412]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	4a66      	ldr	r2, [pc, #408]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005274:	f023 0304 	bic.w	r3, r3, #4
 8005278:	6213      	str	r3, [r2, #32]
 800527a:	e01c      	b.n	80052b6 <HAL_RCC_OscConfig+0x36e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0x356>
 8005284:	4b61      	ldr	r3, [pc, #388]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4a60      	ldr	r2, [pc, #384]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	4b5e      	ldr	r3, [pc, #376]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4a5d      	ldr	r2, [pc, #372]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6213      	str	r3, [r2, #32]
 800529c:	e00b      	b.n	80052b6 <HAL_RCC_OscConfig+0x36e>
 800529e:	4b5b      	ldr	r3, [pc, #364]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4a5a      	ldr	r2, [pc, #360]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6213      	str	r3, [r2, #32]
 80052aa:	4b58      	ldr	r3, [pc, #352]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4a57      	ldr	r2, [pc, #348]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052be:	f7fd ff63 	bl	8003188 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fd ff5f 	bl	8003188 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0b1      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b4b      	ldr	r3, [pc, #300]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCC_OscConfig+0x37e>
 80052e8:	e014      	b.n	8005314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ea:	f7fd ff4d 	bl	8003188 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fd ff49 	bl	8003188 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e09b      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005308:	4b40      	ldr	r3, [pc, #256]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531a:	4b3c      	ldr	r3, [pc, #240]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4a3b      	ldr	r2, [pc, #236]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8087 	beq.w	800543e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005330:	4b36      	ldr	r3, [pc, #216]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d061      	beq.n	8005400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d146      	bne.n	80053d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005344:	4b33      	ldr	r3, [pc, #204]	@ (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fd ff1d 	bl	8003188 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005352:	f7fd ff19 	bl	8003188 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e06d      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005364:	4b29      	ldr	r3, [pc, #164]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d108      	bne.n	800538c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800537a:	4b24      	ldr	r3, [pc, #144]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	4921      	ldr	r1, [pc, #132]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800538c:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a19      	ldr	r1, [r3, #32]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	430b      	orrs	r3, r1
 800539e:	491b      	ldr	r1, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053aa:	f7fd feed 	bl	8003188 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fd fee9 	bl	8003188 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e03d      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c4:	4b11      	ldr	r3, [pc, #68]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x46a>
 80053d0:	e035      	b.n	800543e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fd fed6 	bl	8003188 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fd fed2 	bl	8003188 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e026      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f2:	4b06      	ldr	r3, [pc, #24]	@ (800540c <HAL_RCC_OscConfig+0x4c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x498>
 80053fe:	e01e      	b.n	800543e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d107      	bne.n	8005418 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e019      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
 800540c:	40021000 	.word	0x40021000
 8005410:	40007000 	.word	0x40007000
 8005414:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005418:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <HAL_RCC_OscConfig+0x500>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	429a      	cmp	r2, r3
 800542a:	d106      	bne.n	800543a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d001      	beq.n	800543e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000

0800544c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0d0      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005460:	4b6a      	ldr	r3, [pc, #424]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d910      	bls.n	8005490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b67      	ldr	r3, [pc, #412]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	4965      	ldr	r1, [pc, #404]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b63      	ldr	r3, [pc, #396]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0b8      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a8:	4b59      	ldr	r3, [pc, #356]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4a58      	ldr	r2, [pc, #352]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c0:	4b53      	ldr	r3, [pc, #332]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a52      	ldr	r2, [pc, #328]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b50      	ldr	r3, [pc, #320]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	494d      	ldr	r1, [pc, #308]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d040      	beq.n	800556c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	4b47      	ldr	r3, [pc, #284]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d115      	bne.n	800552a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550a:	4b41      	ldr	r3, [pc, #260]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e073      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551a:	4b3d      	ldr	r3, [pc, #244]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e06b      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552a:	4b39      	ldr	r3, [pc, #228]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f023 0203 	bic.w	r2, r3, #3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4936      	ldr	r1, [pc, #216]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800553c:	f7fd fe24 	bl	8003188 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	e00a      	b.n	800555a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005544:	f7fd fe20 	bl	8003188 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e053      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555a:	4b2d      	ldr	r3, [pc, #180]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 020c 	and.w	r2, r3, #12
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	429a      	cmp	r2, r3
 800556a:	d1eb      	bne.n	8005544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800556c:	4b27      	ldr	r3, [pc, #156]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d210      	bcs.n	800559c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b24      	ldr	r3, [pc, #144]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 0207 	bic.w	r2, r3, #7
 8005582:	4922      	ldr	r1, [pc, #136]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b20      	ldr	r3, [pc, #128]	@ (800560c <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e032      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a8:	4b19      	ldr	r3, [pc, #100]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4916      	ldr	r1, [pc, #88]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055c6:	4b12      	ldr	r3, [pc, #72]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	490e      	ldr	r1, [pc, #56]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055da:	f000 f821 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80055de:	4602      	mov	r2, r0
 80055e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	490a      	ldr	r1, [pc, #40]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055ec:	5ccb      	ldrb	r3, [r1, r3]
 80055ee:	fa22 f303 	lsr.w	r3, r2, r3
 80055f2:	4a09      	ldr	r2, [pc, #36]	@ (8005618 <HAL_RCC_ClockConfig+0x1cc>)
 80055f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCC_ClockConfig+0x1d0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd fb98 	bl	8002d30 <HAL_InitTick>

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40022000 	.word	0x40022000
 8005610:	40021000 	.word	0x40021000
 8005614:	0800c9ec 	.word	0x0800c9ec
 8005618:	20000014 	.word	0x20000014
 800561c:	20000018 	.word	0x20000018

08005620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800563a:	4b1e      	ldr	r3, [pc, #120]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b04      	cmp	r3, #4
 8005648:	d002      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x30>
 800564a:	2b08      	cmp	r3, #8
 800564c:	d003      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x36>
 800564e:	e027      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005650:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005652:	613b      	str	r3, [r7, #16]
      break;
 8005654:	e027      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	0c9b      	lsrs	r3, r3, #18
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005660:	5cd3      	ldrb	r3, [r2, r3]
 8005662:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800566e:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	0c5b      	lsrs	r3, r3, #17
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	4a11      	ldr	r2, [pc, #68]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a0d      	ldr	r2, [pc, #52]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005682:	fb03 f202 	mul.w	r2, r3, r2
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e004      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a0c      	ldr	r2, [pc, #48]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005694:	fb02 f303 	mul.w	r3, r2, r3
 8005698:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	613b      	str	r3, [r7, #16]
      break;
 800569e:	e002      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80056a2:	613b      	str	r3, [r7, #16]
      break;
 80056a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a6:	693b      	ldr	r3, [r7, #16]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000
 80056b8:	007a1200 	.word	0x007a1200
 80056bc:	0800ca04 	.word	0x0800ca04
 80056c0:	0800ca14 	.word	0x0800ca14
 80056c4:	003d0900 	.word	0x003d0900

080056c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056cc:	4b02      	ldr	r3, [pc, #8]	@ (80056d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80056ce:	681b      	ldr	r3, [r3, #0]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	20000014 	.word	0x20000014

080056dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056e0:	f7ff fff2 	bl	80056c8 <HAL_RCC_GetHCLKFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4903      	ldr	r1, [pc, #12]	@ (8005700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800c9fc 	.word	0x0800c9fc

08005704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005708:	f7ff ffde 	bl	80056c8 <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	0adb      	lsrs	r3, r3, #11
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4903      	ldr	r1, [pc, #12]	@ (8005728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000
 8005728:	0800c9fc 	.word	0x0800c9fc

0800572c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	220f      	movs	r2, #15
 800573a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800573c:	4b11      	ldr	r3, [pc, #68]	@ (8005784 <HAL_RCC_GetClockConfig+0x58>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 0203 	and.w	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005748:	4b0e      	ldr	r3, [pc, #56]	@ (8005784 <HAL_RCC_GetClockConfig+0x58>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005754:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <HAL_RCC_GetClockConfig+0x58>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005760:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <HAL_RCC_GetClockConfig+0x58>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	08db      	lsrs	r3, r3, #3
 8005766:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800576e:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <HAL_RCC_GetClockConfig+0x5c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0207 	and.w	r2, r3, #7
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	40021000 	.word	0x40021000
 8005788:	40022000 	.word	0x40022000

0800578c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005794:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <RCC_Delay+0x34>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a0a      	ldr	r2, [pc, #40]	@ (80057c4 <RCC_Delay+0x38>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	0a5b      	lsrs	r3, r3, #9
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057a8:	bf00      	nop
  }
  while (Delay --);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1e5a      	subs	r2, r3, #1
 80057ae:	60fa      	str	r2, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f9      	bne.n	80057a8 <RCC_Delay+0x1c>
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	20000014 	.word	0x20000014
 80057c4:	10624dd3 	.word	0x10624dd3

080057c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d07d      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80057e4:	2300      	movs	r3, #0
 80057e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	61d3      	str	r3, [r2, #28]
 8005800:	4b49      	ldr	r3, [pc, #292]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	4b46      	ldr	r3, [pc, #280]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d118      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581c:	4b43      	ldr	r3, [pc, #268]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a42      	ldr	r2, [pc, #264]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005828:	f7fd fcae 	bl	8003188 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582e:	e008      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005830:	f7fd fcaa 	bl	8003188 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	@ 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e06d      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005842:	4b3a      	ldr	r3, [pc, #232]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800584e:	4b36      	ldr	r3, [pc, #216]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005856:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d02e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d027      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800586c:	4b2e      	ldr	r3, [pc, #184]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005874:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005876:	4b2e      	ldr	r3, [pc, #184]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800587c:	4b2c      	ldr	r3, [pc, #176]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005882:	4a29      	ldr	r2, [pc, #164]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d014      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fd fc79 	bl	8003188 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005898:	e00a      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589a:	f7fd fc75 	bl	8003188 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e036      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ee      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4917      	ldr	r1, [pc, #92]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d4:	4b14      	ldr	r3, [pc, #80]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	4a13      	ldr	r2, [pc, #76]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	490b      	ldr	r1, [pc, #44]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800590a:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4904      	ldr	r1, [pc, #16]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	40007000 	.word	0x40007000
 8005930:	42420440 	.word	0x42420440

08005934 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b10      	cmp	r3, #16
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b10      	cmp	r3, #16
 800595a:	f200 808a 	bhi.w	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d045      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d075      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800596a:	e082      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800596c:	4b46      	ldr	r3, [pc, #280]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005972:	4b45      	ldr	r3, [pc, #276]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d07b      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	0c9b      	lsrs	r3, r3, #18
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	4a41      	ldr	r2, [pc, #260]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005988:	5cd3      	ldrb	r3, [r2, r3]
 800598a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d015      	beq.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005996:	4b3c      	ldr	r3, [pc, #240]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	0c5b      	lsrs	r3, r3, #17
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80059b0:	4a38      	ldr	r2, [pc, #224]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4a34      	ldr	r2, [pc, #208]	@ (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80059cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059d8:	d102      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	61bb      	str	r3, [r7, #24]
      break;
 80059de:	e04a      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4a2d      	ldr	r2, [pc, #180]	@ (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	61bb      	str	r3, [r7, #24]
      break;
 80059ee:	e042      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80059f0:	4b25      	ldr	r3, [pc, #148]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a00:	d108      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e01f      	b.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a1e:	d109      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a20:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005a2c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e00f      	b.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a3e:	d11c      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a40:	4b11      	ldr	r3, [pc, #68]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d016      	beq.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005a4c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005a50:	61bb      	str	r3, [r7, #24]
      break;
 8005a52:	e012      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a54:	e011      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a56:	f7ff fe55 	bl	8005704 <HAL_RCC_GetPCLK2Freq>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	0b9b      	lsrs	r3, r3, #14
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	3301      	adds	r3, #1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	61bb      	str	r3, [r7, #24]
      break;
 8005a70:	e004      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a7a:	bf00      	nop
    }
  }
  return (frequency);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	0800ca18 	.word	0x0800ca18
 8005a90:	0800ca28 	.word	0x0800ca28
 8005a94:	007a1200 	.word	0x007a1200
 8005a98:	003d0900 	.word	0x003d0900
 8005a9c:	aaaaaaab 	.word	0xaaaaaaab

08005aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e041      	b.n	8005b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fd f850 	bl	8002b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fcde 	bl	80064a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e032      	b.n	8005bbe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <HAL_TIM_Base_Start+0x88>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_TIM_Base_Start+0x48>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b72:	d009      	beq.n	8005b88 <HAL_TIM_Base_Start+0x48>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a14      	ldr	r2, [pc, #80]	@ (8005bcc <HAL_TIM_Base_Start+0x8c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_TIM_Base_Start+0x48>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a13      	ldr	r2, [pc, #76]	@ (8005bd0 <HAL_TIM_Base_Start+0x90>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d111      	bne.n	8005bac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b06      	cmp	r3, #6
 8005b98:	d010      	beq.n	8005bbc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	e007      	b.n	8005bbc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800

08005bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d001      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e03a      	b.n	8005c62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <HAL_TIM_Base_Start_IT+0x98>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	@ (8005c70 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d111      	bne.n	8005c50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b06      	cmp	r3, #6
 8005c3c:	d010      	beq.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	e007      	b.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800

08005c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e041      	b.n	8005d0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f839 	bl	8005d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 fbf2 	bl	80064a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_TIM_PWM_Start+0x24>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e022      	b.n	8005d92 <HAL_TIM_PWM_Start+0x6a>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d109      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x3e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	bf14      	ite	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	2300      	moveq	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	e015      	b.n	8005d92 <HAL_TIM_PWM_Start+0x6a>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x58>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e008      	b.n	8005d92 <HAL_TIM_PWM_Start+0x6a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	bf14      	ite	ne
 8005d8c:	2301      	movne	r3, #1
 8005d8e:	2300      	moveq	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e05e      	b.n	8005e58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Start+0x82>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da8:	e013      	b.n	8005dd2 <HAL_TIM_PWM_Start+0xaa>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0x92>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005db8:	e00b      	b.n	8005dd2 <HAL_TIM_PWM_Start+0xaa>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dc8:	e003      	b.n	8005dd2 <HAL_TIM_PWM_Start+0xaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fde0 	bl	80069a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e60 <HAL_TIM_PWM_Start+0x138>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <HAL_TIM_PWM_Start+0x138>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00e      	beq.n	8005e22 <HAL_TIM_PWM_Start+0xfa>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0c:	d009      	beq.n	8005e22 <HAL_TIM_PWM_Start+0xfa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a14      	ldr	r2, [pc, #80]	@ (8005e64 <HAL_TIM_PWM_Start+0x13c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d004      	beq.n	8005e22 <HAL_TIM_PWM_Start+0xfa>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a12      	ldr	r2, [pc, #72]	@ (8005e68 <HAL_TIM_PWM_Start+0x140>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d111      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	d010      	beq.n	8005e56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	e007      	b.n	8005e56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800

08005e6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fd8e 	bl	80069a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a29      	ldr	r2, [pc, #164]	@ (8005f30 <HAL_TIM_PWM_Stop+0xc4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d117      	bne.n	8005ebe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <HAL_TIM_PWM_Stop+0x52>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_PWM_Stop+0x52>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a1a      	ldr	r2, [r3, #32]
 8005ec4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_TIM_PWM_Stop+0x82>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d107      	bne.n	8005eee <HAL_TIM_PWM_Stop+0x82>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Stop+0x92>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005efc:	e013      	b.n	8005f26 <HAL_TIM_PWM_Stop+0xba>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Stop+0xa2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f0c:	e00b      	b.n	8005f26 <HAL_TIM_PWM_Stop+0xba>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0xb2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f1c:	e003      	b.n	8005f26 <HAL_TIM_PWM_Stop+0xba>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40012c00 	.word	0x40012c00

08005f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d122      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d11b      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0202 	mvn.w	r2, #2
 8005f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa76 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa69 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa78 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d122      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d11b      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0204 	mvn.w	r2, #4
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fa4c 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 8005fd0:	e005      	b.n	8005fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa3f 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fa4e 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0208 	mvn.w	r2, #8
 8006008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2204      	movs	r2, #4
 800600e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa22 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa15 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fa24 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b10      	cmp	r3, #16
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b10      	cmp	r3, #16
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0210 	mvn.w	r2, #16
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2208      	movs	r2, #8
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9f8 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9eb 	bl	8006456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f9fa 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0201 	mvn.w	r2, #1
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fc fc55 	bl	8002962 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c2:	2b80      	cmp	r3, #128	@ 0x80
 80060c4:	d10e      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d0:	2b80      	cmp	r3, #128	@ 0x80
 80060d2:	d107      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fe36 	bl	8006d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ee:	2b40      	cmp	r3, #64	@ 0x40
 80060f0:	d10e      	bne.n	8006110 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d107      	bne.n	8006110 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9be 	bl	800648c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b20      	cmp	r3, #32
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b20      	cmp	r3, #32
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0220 	mvn.w	r2, #32
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fe01 	bl	8006d3e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800615e:	2302      	movs	r3, #2
 8006160:	e0ae      	b.n	80062c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b0c      	cmp	r3, #12
 800616e:	f200 809f 	bhi.w	80062b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006172:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080062b1 	.word	0x080062b1
 8006180:	080062b1 	.word	0x080062b1
 8006184:	080062b1 	.word	0x080062b1
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080062b1 	.word	0x080062b1
 8006190:	080062b1 	.word	0x080062b1
 8006194:	080062b1 	.word	0x080062b1
 8006198:	0800622f 	.word	0x0800622f
 800619c:	080062b1 	.word	0x080062b1
 80061a0:	080062b1 	.word	0x080062b1
 80061a4:	080062b1 	.word	0x080062b1
 80061a8:	0800626f 	.word	0x0800626f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f9d6 	bl	8006564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0204 	bic.w	r2, r2, #4
 80061d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6999      	ldr	r1, [r3, #24]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	619a      	str	r2, [r3, #24]
      break;
 80061ea:	e064      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fa1c 	bl	8006630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	619a      	str	r2, [r3, #24]
      break;
 800622c:	e043      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fa65 	bl	8006704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0208 	orr.w	r2, r2, #8
 8006248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0204 	bic.w	r2, r2, #4
 8006258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69d9      	ldr	r1, [r3, #28]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	61da      	str	r2, [r3, #28]
      break;
 800626c:	e023      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 faaf 	bl	80067d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	021a      	lsls	r2, r3, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	61da      	str	r2, [r3, #28]
      break;
 80062ae:	e002      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
      break;
 80062b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062be:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_ConfigClockSource+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0b4      	b.n	800644e <HAL_TIM_ConfigClockSource+0x186>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800630a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631c:	d03e      	beq.n	800639c <HAL_TIM_ConfigClockSource+0xd4>
 800631e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006322:	f200 8087 	bhi.w	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	f000 8086 	beq.w	800643a <HAL_TIM_ConfigClockSource+0x172>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006332:	d87f      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b70      	cmp	r3, #112	@ 0x70
 8006336:	d01a      	beq.n	800636e <HAL_TIM_ConfigClockSource+0xa6>
 8006338:	2b70      	cmp	r3, #112	@ 0x70
 800633a:	d87b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b60      	cmp	r3, #96	@ 0x60
 800633e:	d050      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006340:	2b60      	cmp	r3, #96	@ 0x60
 8006342:	d877      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b50      	cmp	r3, #80	@ 0x50
 8006346:	d03c      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006348:	2b50      	cmp	r3, #80	@ 0x50
 800634a:	d873      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d058      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x13a>
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d86f      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b30      	cmp	r3, #48	@ 0x30
 8006356:	d064      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	2b30      	cmp	r3, #48	@ 0x30
 800635a:	d86b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d060      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d867      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d05c      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 8006368:	2b10      	cmp	r3, #16
 800636a:	d05a      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	e062      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800637e:	f000 faf0 	bl	8006962 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	609a      	str	r2, [r3, #8]
      break;
 800639a:	e04f      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ac:	f000 fad9 	bl	8006962 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063be:	609a      	str	r2, [r3, #8]
      break;
 80063c0:	e03c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	461a      	mov	r2, r3
 80063d0:	f000 fa50 	bl	8006874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2150      	movs	r1, #80	@ 0x50
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 faa7 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80063e0:	e02c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 fa6e 	bl	80068d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2160      	movs	r1, #96	@ 0x60
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fa97 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 8006400:	e01c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fa30 	bl	8006874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2140      	movs	r1, #64	@ 0x40
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fa87 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 8006420:	e00c      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f000 fa7e 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 8006432:	e003      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	e000      	b.n	800643c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800643a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr
	...

080064a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <TIM_Base_SetConfig+0xb8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_Base_SetConfig+0x30>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0x30>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a26      	ldr	r2, [pc, #152]	@ (800655c <TIM_Base_SetConfig+0xbc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0x30>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a25      	ldr	r2, [pc, #148]	@ (8006560 <TIM_Base_SetConfig+0xc0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006558 <TIM_Base_SetConfig+0xb8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_Base_SetConfig+0x62>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f0:	d007      	beq.n	8006502 <TIM_Base_SetConfig+0x62>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <TIM_Base_SetConfig+0xbc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_Base_SetConfig+0x62>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <TIM_Base_SetConfig+0xc0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d108      	bne.n	8006514 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a07      	ldr	r2, [pc, #28]	@ (8006558 <TIM_Base_SetConfig+0xb8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d103      	bne.n	8006548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	615a      	str	r2, [r3, #20]
}
 800654e:	bf00      	nop
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800

08006564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0201 	bic.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f023 0302 	bic.w	r3, r3, #2
 80065ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <TIM_OC1_SetConfig+0xc8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10c      	bne.n	80065da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0308 	bic.w	r3, r3, #8
 80065c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 0304 	bic.w	r3, r3, #4
 80065d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a13      	ldr	r2, [pc, #76]	@ (800662c <TIM_OC1_SetConfig+0xc8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d111      	bne.n	8006606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40012c00 	.word	0x40012c00

08006630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f023 0210 	bic.w	r2, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0320 	bic.w	r3, r3, #32
 800667a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <TIM_OC2_SetConfig+0xd0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10d      	bne.n	80066ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a14      	ldr	r2, [pc, #80]	@ (8006700 <TIM_OC2_SetConfig+0xd0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d113      	bne.n	80066dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00

08006704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800674c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <TIM_OC3_SetConfig+0xd0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d10d      	bne.n	800677e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	@ (80067d4 <TIM_OC3_SetConfig+0xd0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d113      	bne.n	80067ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800678c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40012c00 	.word	0x40012c00

080067d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	031b      	lsls	r3, r3, #12
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0f      	ldr	r2, [pc, #60]	@ (8006870 <TIM_OC4_SetConfig+0x98>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d109      	bne.n	800684c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	019b      	lsls	r3, r3, #6
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00

08006874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800689e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 030a 	bic.w	r3, r3, #10
 80068b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0210 	bic.w	r2, r3, #16
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	031b      	lsls	r3, r3, #12
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800690c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	f043 0307 	orr.w	r3, r3, #7
 8006950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006962:	b480      	push	{r7}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
 800696e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800697c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	021a      	lsls	r2, r3, #8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	431a      	orrs	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4313      	orrs	r3, r2
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	609a      	str	r2, [r3, #8]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	2201      	movs	r2, #1
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	43db      	mvns	r3, r3
 80069c2:	401a      	ands	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	fa01 f303 	lsl.w	r3, r1, r3
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_TIMEx_PWMN_Start+0x24>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	e022      	b.n	8006a52 <HAL_TIMEx_PWMN_Start+0x6a>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d109      	bne.n	8006a26 <HAL_TIMEx_PWMN_Start+0x3e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	bf14      	ite	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	2300      	moveq	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	e015      	b.n	8006a52 <HAL_TIMEx_PWMN_Start+0x6a>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d109      	bne.n	8006a40 <HAL_TIMEx_PWMN_Start+0x58>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	bf14      	ite	ne
 8006a38:	2301      	movne	r3, #1
 8006a3a:	2300      	moveq	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	e008      	b.n	8006a52 <HAL_TIMEx_PWMN_Start+0x6a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	bf14      	ite	ne
 8006a4c:	2301      	movne	r3, #1
 8006a4e:	2300      	moveq	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e059      	b.n	8006b0e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIMEx_PWMN_Start+0x82>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a68:	e013      	b.n	8006a92 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIMEx_PWMN_Start+0x92>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a78:	e00b      	b.n	8006a92 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIMEx_PWMN_Start+0xa2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a88:	e003      	b.n	8006a92 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2204      	movs	r2, #4
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f961 	bl	8006d62 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a18      	ldr	r2, [pc, #96]	@ (8006b18 <HAL_TIMEx_PWMN_Start+0x130>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac2:	d009      	beq.n	8006ad8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <HAL_TIMEx_PWMN_Start+0x134>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a13      	ldr	r2, [pc, #76]	@ (8006b20 <HAL_TIMEx_PWMN_Start+0x138>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d111      	bne.n	8006afc <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d010      	beq.n	8006b0c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afa:	e007      	b.n	8006b0c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40000400 	.word	0x40000400
 8006b20:	40000800 	.word	0x40000800

08006b24 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f913 	bl	8006d62 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a1a      	ldr	r2, [r3, #32]
 8006b42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10f      	bne.n	8006b6c <HAL_TIMEx_PWMN_Stop+0x48>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d107      	bne.n	8006b6c <HAL_TIMEx_PWMN_Stop+0x48>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6a1a      	ldr	r2, [r3, #32]
 8006b72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10f      	bne.n	8006b9c <HAL_TIMEx_PWMN_Stop+0x78>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d107      	bne.n	8006b9c <HAL_TIMEx_PWMN_Stop+0x78>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <HAL_TIMEx_PWMN_Stop+0x88>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006baa:	e013      	b.n	8006bd4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d104      	bne.n	8006bbc <HAL_TIMEx_PWMN_Stop+0x98>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bba:	e00b      	b.n	8006bd4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d104      	bne.n	8006bcc <HAL_TIMEx_PWMN_Stop+0xa8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bca:	e003      	b.n	8006bd4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e046      	b.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a16      	ldr	r2, [pc, #88]	@ (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00e      	beq.n	8006c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c44:	d009      	beq.n	8006c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a12      	ldr	r2, [pc, #72]	@ (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d004      	beq.n	8006c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a10      	ldr	r2, [pc, #64]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d10c      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr
 8006c90:	40012c00 	.word	0x40012c00
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800

08006c9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e03d      	b.n	8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	2204      	movs	r2, #4
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	401a      	ands	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	621a      	str	r2, [r3, #32]
}
 8006da0:	bf00      	nop
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e042      	b.n	8006e42 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fb ff4b 	bl	8002c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	@ 0x24
 8006dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc80 	bl	80076f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691a      	ldr	r2, [r3, #16]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695a      	ldr	r2, [r3, #20]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b0ba      	sub	sp, #232	@ 0xe8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x66>
 8006e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fb63 	bl	8007576 <UART_Receive_IT>
      return;
 8006eb0:	e25b      	b.n	800736a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 80de 	beq.w	8007078 <HAL_UART_IRQHandler+0x22c>
 8006ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80d1 	beq.w	8007078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_UART_IRQHandler+0xae>
 8006ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f043 0201 	orr.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <HAL_UART_IRQHandler+0xd2>
 8006f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f043 0202 	orr.w	r2, r3, #2
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00b      	beq.n	8006f42 <HAL_UART_IRQHandler+0xf6>
 8006f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	f043 0204 	orr.w	r2, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d011      	beq.n	8006f72 <HAL_UART_IRQHandler+0x126>
 8006f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	f043 0208 	orr.w	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 81f2 	beq.w	8007360 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_UART_IRQHandler+0x14e>
 8006f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 faee 	bl	8007576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf14      	ite	ne
 8006fa8:	2301      	movne	r3, #1
 8006faa:	2300      	moveq	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x17a>
 8006fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d04f      	beq.n	8007066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9f8 	bl	80073bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d041      	beq.n	800705e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3314      	adds	r3, #20
 8006fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3314      	adds	r3, #20
 8007002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007006:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800700a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800701e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1d9      	bne.n	8006fda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d013      	beq.n	8007056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007032:	4a7e      	ldr	r2, [pc, #504]	@ (800722c <HAL_UART_IRQHandler+0x3e0>)
 8007034:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703a:	4618      	mov	r0, r3
 800703c:	f7fc ff64 	bl	8003f08 <HAL_DMA_Abort_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d016      	beq.n	8007074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e00e      	b.n	8007074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f99c 	bl	8007394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e00a      	b.n	8007074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f998 	bl	8007394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	e006      	b.n	8007074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f994 	bl	8007394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007072:	e175      	b.n	8007360 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007074:	bf00      	nop
    return;
 8007076:	e173      	b.n	8007360 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707c:	2b01      	cmp	r3, #1
 800707e:	f040 814f 	bne.w	8007320 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007086:	f003 0310 	and.w	r3, r3, #16
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8148 	beq.w	8007320 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8141 	beq.w	8007320 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800709e:	2300      	movs	r3, #0
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60bb      	str	r3, [r7, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80b6 	beq.w	8007230 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8145 	beq.w	8007364 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070e2:	429a      	cmp	r2, r3
 80070e4:	f080 813e 	bcs.w	8007364 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	f000 8088 	beq.w	800720c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007112:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800711a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	330c      	adds	r3, #12
 8007124:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007128:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800712c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007134:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1d9      	bne.n	80070fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3314      	adds	r3, #20
 800714e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3314      	adds	r3, #20
 8007168:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800716c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007170:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007174:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800717e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e1      	bne.n	8007148 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3314      	adds	r3, #20
 800718a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800719a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3314      	adds	r3, #20
 80071a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e3      	bne.n	8007184 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071dc:	f023 0310 	bic.w	r3, r3, #16
 80071e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	330c      	adds	r3, #12
 80071ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e3      	bne.n	80071ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc fe42 	bl	8003e90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800721a:	b29b      	uxth	r3, r3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	b29b      	uxth	r3, r3
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8bf 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007228:	e09c      	b.n	8007364 <HAL_UART_IRQHandler+0x518>
 800722a:	bf00      	nop
 800722c:	08007481 	.word	0x08007481
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007238:	b29b      	uxth	r3, r3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 808e 	beq.w	8007368 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800724c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8089 	beq.w	8007368 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800726c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800727a:	647a      	str	r2, [r7, #68]	@ 0x44
 800727c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e3      	bne.n	8007256 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	623b      	str	r3, [r7, #32]
   return(result);
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e3      	bne.n	800728e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0310 	bic.w	r3, r3, #16
 80072ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80072f8:	61fa      	str	r2, [r7, #28]
 80072fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	617b      	str	r3, [r7, #20]
   return(result);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e3      	bne.n	80072d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f844 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800731e:	e023      	b.n	8007368 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <HAL_UART_IRQHandler+0x4f4>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8b5 	bl	80074a8 <UART_Transmit_IT>
    return;
 800733e:	e014      	b.n	800736a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00e      	beq.n	800736a <HAL_UART_IRQHandler+0x51e>
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f8f4 	bl	8007546 <UART_EndTransmit_IT>
    return;
 800735e:	e004      	b.n	800736a <HAL_UART_IRQHandler+0x51e>
    return;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <HAL_UART_IRQHandler+0x51e>
      return;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <HAL_UART_IRQHandler+0x51e>
      return;
 8007368:	bf00      	nop
  }
}
 800736a:	37e8      	adds	r7, #232	@ 0xe8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr

08007382 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr

080073bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b095      	sub	sp, #84	@ 0x54
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	330c      	adds	r3, #12
 80073e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e5      	bne.n	80073c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3314      	adds	r3, #20
 80073fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	e853 3f00 	ldrex	r3, [r3]
 8007406:	61fb      	str	r3, [r7, #28]
   return(result);
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f023 0301 	bic.w	r3, r3, #1
 800740e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3314      	adds	r3, #20
 8007416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800741a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800741e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e5      	bne.n	80073f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	2b01      	cmp	r3, #1
 8007432:	d119      	bne.n	8007468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	60bb      	str	r3, [r7, #8]
   return(result);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0310 	bic.w	r3, r3, #16
 800744a:	647b      	str	r3, [r7, #68]	@ 0x44
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	330c      	adds	r3, #12
 8007452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007454:	61ba      	str	r2, [r7, #24]
 8007456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6979      	ldr	r1, [r7, #20]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	613b      	str	r3, [r7, #16]
   return(result);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007476:	bf00      	nop
 8007478:	3754      	adds	r7, #84	@ 0x54
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff ff7a 	bl	8007394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b21      	cmp	r3, #33	@ 0x21
 80074ba:	d13e      	bne.n	800753a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c4:	d114      	bne.n	80074f0 <UART_Transmit_IT+0x48>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d110      	bne.n	80074f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]
 80074ee:	e008      	b.n	8007502 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6211      	str	r1, [r2, #32]
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4619      	mov	r1, r3
 8007510:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007524:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007534:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800755c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ff02 	bl	8007370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b08c      	sub	sp, #48	@ 0x30
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b22      	cmp	r3, #34	@ 0x22
 8007588:	f040 80ae 	bne.w	80076e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007594:	d117      	bne.n	80075c6 <UART_Receive_IT+0x50>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d113      	bne.n	80075c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	1c9a      	adds	r2, r3, #2
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80075c4:	e026      	b.n	8007614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d8:	d007      	beq.n	80075ea <UART_Receive_IT+0x74>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <UART_Receive_IT+0x82>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e008      	b.n	800760a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007604:	b2da      	uxtb	r2, r3
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29b      	uxth	r3, r3
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4619      	mov	r1, r3
 8007622:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007624:	2b00      	cmp	r3, #0
 8007626:	d15d      	bne.n	80076e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0220 	bic.w	r2, r2, #32
 8007636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0201 	bic.w	r2, r2, #1
 8007656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	2b01      	cmp	r3, #1
 800766c:	d135      	bne.n	80076da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	613b      	str	r3, [r7, #16]
   return(result);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f023 0310 	bic.w	r3, r3, #16
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
 8007692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007694:	623a      	str	r2, [r7, #32]
 8007696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	69f9      	ldr	r1, [r7, #28]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e5      	bne.n	8007674 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d10a      	bne.n	80076cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff fe67 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
 80076d8:	e002      	b.n	80076e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fe51 	bl	8007382 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e002      	b.n	80076ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e000      	b.n	80076ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
  }
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3730      	adds	r7, #48	@ 0x30
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800772e:	f023 030c 	bic.w	r3, r3, #12
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	430b      	orrs	r3, r1
 800773a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a2c      	ldr	r2, [pc, #176]	@ (8007808 <UART_SetConfig+0x114>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d103      	bne.n	8007764 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800775c:	f7fd ffd2 	bl	8005704 <HAL_RCC_GetPCLK2Freq>
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	e002      	b.n	800776a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fd ffba 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 8007768:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009a      	lsls	r2, r3, #2
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007780:	4a22      	ldr	r2, [pc, #136]	@ (800780c <UART_SetConfig+0x118>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	0119      	lsls	r1, r3, #4
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009a      	lsls	r2, r3, #2
 8007794:	441a      	add	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	fbb2 f2f3 	udiv	r2, r2, r3
 80077a0:	4b1a      	ldr	r3, [pc, #104]	@ (800780c <UART_SetConfig+0x118>)
 80077a2:	fba3 0302 	umull	r0, r3, r3, r2
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	2064      	movs	r0, #100	@ 0x64
 80077aa:	fb00 f303 	mul.w	r3, r0, r3
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	3332      	adds	r3, #50	@ 0x32
 80077b4:	4a15      	ldr	r2, [pc, #84]	@ (800780c <UART_SetConfig+0x118>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077c0:	4419      	add	r1, r3
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009a      	lsls	r2, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80077d8:	4b0c      	ldr	r3, [pc, #48]	@ (800780c <UART_SetConfig+0x118>)
 80077da:	fba3 0302 	umull	r0, r3, r3, r2
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	2064      	movs	r0, #100	@ 0x64
 80077e2:	fb00 f303 	mul.w	r3, r0, r3
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	3332      	adds	r3, #50	@ 0x32
 80077ec:	4a07      	ldr	r2, [pc, #28]	@ (800780c <UART_SetConfig+0x118>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	440a      	add	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40013800 	.word	0x40013800
 800780c:	51eb851f 	.word	0x51eb851f

08007810 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800781e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007822:	2b84      	cmp	r3, #132	@ 0x84
 8007824:	d005      	beq.n	8007832 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	3303      	adds	r3, #3
 8007830:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr

0800783e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007842:	f000 faef 	bl	8007e24 <vTaskStartScheduler>
  
  return osOK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd80      	pop	{r7, pc}

0800784c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800784c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784e:	b089      	sub	sp, #36	@ 0x24
 8007850:	af04      	add	r7, sp, #16
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d020      	beq.n	80078a0 <osThreadCreate+0x54>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01c      	beq.n	80078a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685c      	ldr	r4, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691e      	ldr	r6, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff ffc9 	bl	8007810 <makeFreeRtosPriority>
 800787e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007888:	9202      	str	r2, [sp, #8]
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	9100      	str	r1, [sp, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	4632      	mov	r2, r6
 8007892:	4629      	mov	r1, r5
 8007894:	4620      	mov	r0, r4
 8007896:	f000 f8e8 	bl	8007a6a <xTaskCreateStatic>
 800789a:	4603      	mov	r3, r0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e01c      	b.n	80078da <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685c      	ldr	r4, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff ffab 	bl	8007810 <makeFreeRtosPriority>
 80078ba:	4602      	mov	r2, r0
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	9200      	str	r2, [sp, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	4632      	mov	r2, r6
 80078c8:	4629      	mov	r1, r5
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 f92c 	bl	8007b28 <xTaskCreate>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d001      	beq.n	80078da <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <osDelay+0x16>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	e000      	b.n	80078fc <osDelay+0x18>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fa5b 	bl	8007db8 <vTaskDelay>
  
  return osOK;
 8007902:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f103 0208 	add.w	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f103 0208 	add.w	r2, r3, #8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 0208 	add.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr

08007962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e00c      	b.n	80079e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3308      	adds	r3, #8
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e002      	b.n	80079d6 <vListInsert+0x2e>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d2f6      	bcs.n	80079d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6892      	ldr	r2, [r2, #8]
 8007a2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6852      	ldr	r2, [r2, #4]
 8007a38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d103      	bne.n	8007a4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	1e5a      	subs	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b08e      	sub	sp, #56	@ 0x38
 8007a6e:	af04      	add	r7, sp, #16
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10b      	bne.n	8007a96 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	e7fd      	b.n	8007a92 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61fb      	str	r3, [r7, #28]
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ab4:	23a0      	movs	r3, #160	@ 0xa0
 8007ab6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	2ba0      	cmp	r3, #160	@ 0xa0
 8007abc:	d00b      	beq.n	8007ad6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	61bb      	str	r3, [r7, #24]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01e      	beq.n	8007b1a <xTaskCreateStatic+0xb0>
 8007adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d01b      	beq.n	8007b1a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007af4:	2300      	movs	r3, #0
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	f107 0314 	add.w	r3, r7, #20
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f851 	bl	8007bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b14:	f000 f8e6 	bl	8007ce4 <prvAddNewTaskToReadyList>
 8007b18:	e001      	b.n	8007b1e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b1e:	697b      	ldr	r3, [r7, #20]
	}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3728      	adds	r7, #40	@ 0x28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08c      	sub	sp, #48	@ 0x30
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fe9f 	bl	8008880 <pvPortMalloc>
 8007b42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00e      	beq.n	8007b68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007b4a:	20a0      	movs	r0, #160	@ 0xa0
 8007b4c:	f000 fe98 	bl	8008880 <pvPortMalloc>
 8007b50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b5e:	e005      	b.n	8007b6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b60:	6978      	ldr	r0, [r7, #20]
 8007b62:	f000 ff55 	bl	8008a10 <vPortFree>
 8007b66:	e001      	b.n	8007b6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d017      	beq.n	8007ba2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b7a:	88fa      	ldrh	r2, [r7, #6]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9303      	str	r3, [sp, #12]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f80f 	bl	8007bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b96:	69f8      	ldr	r0, [r7, #28]
 8007b98:	f000 f8a4 	bl	8007ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	e002      	b.n	8007ba8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
	}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	617b      	str	r3, [r7, #20]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	e012      	b.n	8007c2a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	7819      	ldrb	r1, [r3, #0]
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	3334      	adds	r3, #52	@ 0x34
 8007c14:	460a      	mov	r2, r1
 8007c16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d006      	beq.n	8007c32 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b0f      	cmp	r3, #15
 8007c2e:	d9e9      	bls.n	8007c04 <prvInitialiseNewTask+0x50>
 8007c30:	e000      	b.n	8007c34 <prvInitialiseNewTask+0x80>
		{
			break;
 8007c32:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	2b06      	cmp	r3, #6
 8007c40:	d901      	bls.n	8007c46 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c42:	2306      	movs	r3, #6
 8007c44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c50:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2200      	movs	r2, #0
 8007c56:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fe74 	bl	800794a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	3318      	adds	r3, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fe6f 	bl	800794a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c74:	f1c3 0207 	rsb	r2, r3, #7
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	334c      	adds	r3, #76	@ 0x4c
 8007c96:	224c      	movs	r2, #76	@ 0x4c
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 fd4f 	bl	800973e <memset>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8007cd8 <prvInitialiseNewTask+0x124>)
 8007ca4:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8007cdc <prvInitialiseNewTask+0x128>)
 8007caa:	655a      	str	r2, [r3, #84]	@ 0x54
 8007cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce0 <prvInitialiseNewTask+0x12c>)
 8007cb0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	68f9      	ldr	r1, [r7, #12]
 8007cb6:	69b8      	ldr	r0, [r7, #24]
 8007cb8:	f000 fc30 	bl	800851c <pxPortInitialiseStack>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cce:	bf00      	nop
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20001540 	.word	0x20001540
 8007cdc:	200015a8 	.word	0x200015a8
 8007ce0:	20001610 	.word	0x20001610

08007ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cec:	f000 fd06 	bl	80086fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d9c <prvAddNewTaskToReadyList+0xb8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a29      	ldr	r2, [pc, #164]	@ (8007d9c <prvAddNewTaskToReadyList+0xb8>)
 8007cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cfa:	4b29      	ldr	r3, [pc, #164]	@ (8007da0 <prvAddNewTaskToReadyList+0xbc>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d02:	4a27      	ldr	r2, [pc, #156]	@ (8007da0 <prvAddNewTaskToReadyList+0xbc>)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d08:	4b24      	ldr	r3, [pc, #144]	@ (8007d9c <prvAddNewTaskToReadyList+0xb8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d110      	bne.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d10:	f000 fad6 	bl	80082c0 <prvInitialiseTaskLists>
 8007d14:	e00d      	b.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d16:	4b23      	ldr	r3, [pc, #140]	@ (8007da4 <prvAddNewTaskToReadyList+0xc0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d1e:	4b20      	ldr	r3, [pc, #128]	@ (8007da0 <prvAddNewTaskToReadyList+0xbc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d802      	bhi.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007da0 <prvAddNewTaskToReadyList+0xbc>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <prvAddNewTaskToReadyList+0xc4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	4a1b      	ldr	r2, [pc, #108]	@ (8007da8 <prvAddNewTaskToReadyList+0xc4>)
 8007d3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d40:	2201      	movs	r2, #1
 8007d42:	409a      	lsls	r2, r3
 8007d44:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	4a18      	ldr	r2, [pc, #96]	@ (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <prvAddNewTaskToReadyList+0xcc>)
 8007d5c:	441a      	add	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f7ff fdfc 	bl	8007962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d6a:	f000 fcf7 	bl	800875c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <prvAddNewTaskToReadyList+0xc0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00e      	beq.n	8007d94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d76:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <prvAddNewTaskToReadyList+0xbc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d207      	bcs.n	8007d94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d84:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <prvAddNewTaskToReadyList+0xd0>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	200008f4 	.word	0x200008f4
 8007da0:	200007f4 	.word	0x200007f4
 8007da4:	20000900 	.word	0x20000900
 8007da8:	20000910 	.word	0x20000910
 8007dac:	200008fc 	.word	0x200008fc
 8007db0:	200007f8 	.word	0x200007f8
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d018      	beq.n	8007dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dca:	4b14      	ldr	r3, [pc, #80]	@ (8007e1c <vTaskDelay+0x64>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <vTaskDelay+0x32>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60bb      	str	r3, [r7, #8]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007dea:	f000 f885 	bl	8007ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007dee:	2100      	movs	r1, #0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fb2d 	bl	8008450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007df6:	f000 f88d 	bl	8007f14 <xTaskResumeAll>
 8007dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d107      	bne.n	8007e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e02:	4b07      	ldr	r3, [pc, #28]	@ (8007e20 <vTaskDelay+0x68>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	2000091c 	.word	0x2000091c
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08a      	sub	sp, #40	@ 0x28
 8007e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e32:	463a      	mov	r2, r7
 8007e34:	1d39      	adds	r1, r7, #4
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f8 ff68 	bl	8000d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	9202      	str	r2, [sp, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	460a      	mov	r2, r1
 8007e52:	4921      	ldr	r1, [pc, #132]	@ (8007ed8 <vTaskStartScheduler+0xb4>)
 8007e54:	4821      	ldr	r0, [pc, #132]	@ (8007edc <vTaskStartScheduler+0xb8>)
 8007e56:	f7ff fe08 	bl	8007a6a <xTaskCreateStatic>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4a20      	ldr	r2, [pc, #128]	@ (8007ee0 <vTaskStartScheduler+0xbc>)
 8007e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e60:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee0 <vTaskStartScheduler+0xbc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e001      	b.n	8007e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d11b      	bne.n	8007eb0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	613b      	str	r3, [r7, #16]
}
 8007e8a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e8c:	4b15      	ldr	r3, [pc, #84]	@ (8007ee4 <vTaskStartScheduler+0xc0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	334c      	adds	r3, #76	@ 0x4c
 8007e92:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <vTaskStartScheduler+0xc4>)
 8007e94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e96:	4b15      	ldr	r3, [pc, #84]	@ (8007eec <vTaskStartScheduler+0xc8>)
 8007e98:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e9e:	4b14      	ldr	r3, [pc, #80]	@ (8007ef0 <vTaskStartScheduler+0xcc>)
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ea4:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <vTaskStartScheduler+0xd0>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007eaa:	f000 fbb5 	bl	8008618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007eae:	e00f      	b.n	8007ed0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb6:	d10b      	bne.n	8007ed0 <vTaskStartScheduler+0xac>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <vTaskStartScheduler+0xa8>
}
 8007ed0:	bf00      	nop
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	0800c9e4 	.word	0x0800c9e4
 8007edc:	08008291 	.word	0x08008291
 8007ee0:	20000918 	.word	0x20000918
 8007ee4:	200007f4 	.word	0x200007f4
 8007ee8:	20000030 	.word	0x20000030
 8007eec:	20000914 	.word	0x20000914
 8007ef0:	20000900 	.word	0x20000900
 8007ef4:	200008f8 	.word	0x200008f8

08007ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007efc:	4b04      	ldr	r3, [pc, #16]	@ (8007f10 <vTaskSuspendAll+0x18>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3301      	adds	r3, #1
 8007f02:	4a03      	ldr	r2, [pc, #12]	@ (8007f10 <vTaskSuspendAll+0x18>)
 8007f04:	6013      	str	r3, [r2, #0]
}
 8007f06:	bf00      	nop
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bc80      	pop	{r7}
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	2000091c 	.word	0x2000091c

08007f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f22:	4b42      	ldr	r3, [pc, #264]	@ (800802c <xTaskResumeAll+0x118>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xTaskResumeAll+0x2e>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	603b      	str	r3, [r7, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f42:	f000 fbdb 	bl	80086fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f46:	4b39      	ldr	r3, [pc, #228]	@ (800802c <xTaskResumeAll+0x118>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4a37      	ldr	r2, [pc, #220]	@ (800802c <xTaskResumeAll+0x118>)
 8007f4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f50:	4b36      	ldr	r3, [pc, #216]	@ (800802c <xTaskResumeAll+0x118>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d161      	bne.n	800801c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f58:	4b35      	ldr	r3, [pc, #212]	@ (8008030 <xTaskResumeAll+0x11c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d05d      	beq.n	800801c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f60:	e02e      	b.n	8007fc0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f62:	4b34      	ldr	r3, [pc, #208]	@ (8008034 <xTaskResumeAll+0x120>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3318      	adds	r3, #24
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fd52 	bl	8007a18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fd4d 	bl	8007a18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f82:	2201      	movs	r2, #1
 8007f84:	409a      	lsls	r2, r3
 8007f86:	4b2c      	ldr	r3, [pc, #176]	@ (8008038 <xTaskResumeAll+0x124>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8008038 <xTaskResumeAll+0x124>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a27      	ldr	r2, [pc, #156]	@ (800803c <xTaskResumeAll+0x128>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7ff fcdb 	bl	8007962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb0:	4b23      	ldr	r3, [pc, #140]	@ (8008040 <xTaskResumeAll+0x12c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d302      	bcc.n	8007fc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fba:	4b22      	ldr	r3, [pc, #136]	@ (8008044 <xTaskResumeAll+0x130>)
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008034 <xTaskResumeAll+0x120>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1cc      	bne.n	8007f62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fce:	f000 fa1b 	bl	8008408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8008048 <xTaskResumeAll+0x134>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d010      	beq.n	8008000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fde:	f000 f837 	bl	8008050 <xTaskIncrementTick>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fe8:	4b16      	ldr	r3, [pc, #88]	@ (8008044 <xTaskResumeAll+0x130>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f1      	bne.n	8007fde <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007ffa:	4b13      	ldr	r3, [pc, #76]	@ (8008048 <xTaskResumeAll+0x134>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008000:	4b10      	ldr	r3, [pc, #64]	@ (8008044 <xTaskResumeAll+0x130>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d009      	beq.n	800801c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800800c:	4b0f      	ldr	r3, [pc, #60]	@ (800804c <xTaskResumeAll+0x138>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800801c:	f000 fb9e 	bl	800875c <vPortExitCritical>

	return xAlreadyYielded;
 8008020:	68bb      	ldr	r3, [r7, #8]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	2000091c 	.word	0x2000091c
 8008030:	200008f4 	.word	0x200008f4
 8008034:	200008b4 	.word	0x200008b4
 8008038:	200008fc 	.word	0x200008fc
 800803c:	200007f8 	.word	0x200007f8
 8008040:	200007f4 	.word	0x200007f4
 8008044:	20000908 	.word	0x20000908
 8008048:	20000904 	.word	0x20000904
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800805a:	4b51      	ldr	r3, [pc, #324]	@ (80081a0 <xTaskIncrementTick+0x150>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f040 808e 	bne.w	8008180 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008064:	4b4f      	ldr	r3, [pc, #316]	@ (80081a4 <xTaskIncrementTick+0x154>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800806c:	4a4d      	ldr	r2, [pc, #308]	@ (80081a4 <xTaskIncrementTick+0x154>)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d121      	bne.n	80080bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008078:	4b4b      	ldr	r3, [pc, #300]	@ (80081a8 <xTaskIncrementTick+0x158>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	603b      	str	r3, [r7, #0]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <xTaskIncrementTick+0x46>
 800809a:	4b43      	ldr	r3, [pc, #268]	@ (80081a8 <xTaskIncrementTick+0x158>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	4b42      	ldr	r3, [pc, #264]	@ (80081ac <xTaskIncrementTick+0x15c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a40      	ldr	r2, [pc, #256]	@ (80081a8 <xTaskIncrementTick+0x158>)
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	4a40      	ldr	r2, [pc, #256]	@ (80081ac <xTaskIncrementTick+0x15c>)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	4b40      	ldr	r3, [pc, #256]	@ (80081b0 <xTaskIncrementTick+0x160>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a3e      	ldr	r2, [pc, #248]	@ (80081b0 <xTaskIncrementTick+0x160>)
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	f000 f9a6 	bl	8008408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080bc:	4b3d      	ldr	r3, [pc, #244]	@ (80081b4 <xTaskIncrementTick+0x164>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d34d      	bcc.n	8008162 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c6:	4b38      	ldr	r3, [pc, #224]	@ (80081a8 <xTaskIncrementTick+0x158>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <xTaskIncrementTick+0x84>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e000      	b.n	80080d6 <xTaskIncrementTick+0x86>
 80080d4:	2300      	movs	r3, #0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080da:	4b36      	ldr	r3, [pc, #216]	@ (80081b4 <xTaskIncrementTick+0x164>)
 80080dc:	f04f 32ff 	mov.w	r2, #4294967295
 80080e0:	601a      	str	r2, [r3, #0]
					break;
 80080e2:	e03e      	b.n	8008162 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80080e4:	4b30      	ldr	r3, [pc, #192]	@ (80081a8 <xTaskIncrementTick+0x158>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d203      	bcs.n	8008104 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080fc:	4a2d      	ldr	r2, [pc, #180]	@ (80081b4 <xTaskIncrementTick+0x164>)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6013      	str	r3, [r2, #0]
						break;
 8008102:	e02e      	b.n	8008162 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3304      	adds	r3, #4
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fc85 	bl	8007a18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	3318      	adds	r3, #24
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff fc7c 	bl	8007a18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008124:	2201      	movs	r2, #1
 8008126:	409a      	lsls	r2, r3
 8008128:	4b23      	ldr	r3, [pc, #140]	@ (80081b8 <xTaskIncrementTick+0x168>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4313      	orrs	r3, r2
 800812e:	4a22      	ldr	r2, [pc, #136]	@ (80081b8 <xTaskIncrementTick+0x168>)
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a1f      	ldr	r2, [pc, #124]	@ (80081bc <xTaskIncrementTick+0x16c>)
 8008140:	441a      	add	r2, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	3304      	adds	r3, #4
 8008146:	4619      	mov	r1, r3
 8008148:	4610      	mov	r0, r2
 800814a:	f7ff fc0a 	bl	8007962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008152:	4b1b      	ldr	r3, [pc, #108]	@ (80081c0 <xTaskIncrementTick+0x170>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008158:	429a      	cmp	r2, r3
 800815a:	d3b4      	bcc.n	80080c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008160:	e7b1      	b.n	80080c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008162:	4b17      	ldr	r3, [pc, #92]	@ (80081c0 <xTaskIncrementTick+0x170>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008168:	4914      	ldr	r1, [pc, #80]	@ (80081bc <xTaskIncrementTick+0x16c>)
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d907      	bls.n	800818a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800817a:	2301      	movs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	e004      	b.n	800818a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008180:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <xTaskIncrementTick+0x174>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	4a0f      	ldr	r2, [pc, #60]	@ (80081c4 <xTaskIncrementTick+0x174>)
 8008188:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800818a:	4b0f      	ldr	r3, [pc, #60]	@ (80081c8 <xTaskIncrementTick+0x178>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008192:	2301      	movs	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008196:	697b      	ldr	r3, [r7, #20]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000091c 	.word	0x2000091c
 80081a4:	200008f8 	.word	0x200008f8
 80081a8:	200008ac 	.word	0x200008ac
 80081ac:	200008b0 	.word	0x200008b0
 80081b0:	2000090c 	.word	0x2000090c
 80081b4:	20000914 	.word	0x20000914
 80081b8:	200008fc 	.word	0x200008fc
 80081bc:	200007f8 	.word	0x200007f8
 80081c0:	200007f4 	.word	0x200007f4
 80081c4:	20000904 	.word	0x20000904
 80081c8:	20000908 	.word	0x20000908

080081cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081d2:	4b29      	ldr	r3, [pc, #164]	@ (8008278 <vTaskSwitchContext+0xac>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081da:	4b28      	ldr	r3, [pc, #160]	@ (800827c <vTaskSwitchContext+0xb0>)
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081e0:	e045      	b.n	800826e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80081e2:	4b26      	ldr	r3, [pc, #152]	@ (800827c <vTaskSwitchContext+0xb0>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80081e8:	4b25      	ldr	r3, [pc, #148]	@ (8008280 <vTaskSwitchContext+0xb4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	fab3 f383 	clz	r3, r3
 80081f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80081f6:	7afb      	ldrb	r3, [r7, #11]
 80081f8:	f1c3 031f 	rsb	r3, r3, #31
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	4921      	ldr	r1, [pc, #132]	@ (8008284 <vTaskSwitchContext+0xb8>)
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	607b      	str	r3, [r7, #4]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <vTaskSwitchContext+0x5a>
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4613      	mov	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4a13      	ldr	r2, [pc, #76]	@ (8008284 <vTaskSwitchContext+0xb8>)
 8008236:	4413      	add	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	605a      	str	r2, [r3, #4]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3308      	adds	r3, #8
 800824c:	429a      	cmp	r2, r3
 800824e:	d104      	bne.n	800825a <vTaskSwitchContext+0x8e>
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	4a09      	ldr	r2, [pc, #36]	@ (8008288 <vTaskSwitchContext+0xbc>)
 8008262:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008264:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <vTaskSwitchContext+0xbc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	334c      	adds	r3, #76	@ 0x4c
 800826a:	4a08      	ldr	r2, [pc, #32]	@ (800828c <vTaskSwitchContext+0xc0>)
 800826c:	6013      	str	r3, [r2, #0]
}
 800826e:	bf00      	nop
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr
 8008278:	2000091c 	.word	0x2000091c
 800827c:	20000908 	.word	0x20000908
 8008280:	200008fc 	.word	0x200008fc
 8008284:	200007f8 	.word	0x200007f8
 8008288:	200007f4 	.word	0x200007f4
 800828c:	20000030 	.word	0x20000030

08008290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008298:	f000 f852 	bl	8008340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800829c:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <prvIdleTask+0x28>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d9f9      	bls.n	8008298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <prvIdleTask+0x2c>)
 80082a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082b4:	e7f0      	b.n	8008298 <prvIdleTask+0x8>
 80082b6:	bf00      	nop
 80082b8:	200007f8 	.word	0x200007f8
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082c6:	2300      	movs	r3, #0
 80082c8:	607b      	str	r3, [r7, #4]
 80082ca:	e00c      	b.n	80082e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4a12      	ldr	r2, [pc, #72]	@ (8008320 <prvInitialiseTaskLists+0x60>)
 80082d8:	4413      	add	r3, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff fb16 	bl	800790c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3301      	adds	r3, #1
 80082e4:	607b      	str	r3, [r7, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b06      	cmp	r3, #6
 80082ea:	d9ef      	bls.n	80082cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082ec:	480d      	ldr	r0, [pc, #52]	@ (8008324 <prvInitialiseTaskLists+0x64>)
 80082ee:	f7ff fb0d 	bl	800790c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082f2:	480d      	ldr	r0, [pc, #52]	@ (8008328 <prvInitialiseTaskLists+0x68>)
 80082f4:	f7ff fb0a 	bl	800790c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082f8:	480c      	ldr	r0, [pc, #48]	@ (800832c <prvInitialiseTaskLists+0x6c>)
 80082fa:	f7ff fb07 	bl	800790c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082fe:	480c      	ldr	r0, [pc, #48]	@ (8008330 <prvInitialiseTaskLists+0x70>)
 8008300:	f7ff fb04 	bl	800790c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008304:	480b      	ldr	r0, [pc, #44]	@ (8008334 <prvInitialiseTaskLists+0x74>)
 8008306:	f7ff fb01 	bl	800790c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800830a:	4b0b      	ldr	r3, [pc, #44]	@ (8008338 <prvInitialiseTaskLists+0x78>)
 800830c:	4a05      	ldr	r2, [pc, #20]	@ (8008324 <prvInitialiseTaskLists+0x64>)
 800830e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008310:	4b0a      	ldr	r3, [pc, #40]	@ (800833c <prvInitialiseTaskLists+0x7c>)
 8008312:	4a05      	ldr	r2, [pc, #20]	@ (8008328 <prvInitialiseTaskLists+0x68>)
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	200007f8 	.word	0x200007f8
 8008324:	20000884 	.word	0x20000884
 8008328:	20000898 	.word	0x20000898
 800832c:	200008b4 	.word	0x200008b4
 8008330:	200008c8 	.word	0x200008c8
 8008334:	200008e0 	.word	0x200008e0
 8008338:	200008ac 	.word	0x200008ac
 800833c:	200008b0 	.word	0x200008b0

08008340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008346:	e019      	b.n	800837c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008348:	f000 f9d8 	bl	80086fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800834c:	4b10      	ldr	r3, [pc, #64]	@ (8008390 <prvCheckTasksWaitingTermination+0x50>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fb5d 	bl	8007a18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800835e:	4b0d      	ldr	r3, [pc, #52]	@ (8008394 <prvCheckTasksWaitingTermination+0x54>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3b01      	subs	r3, #1
 8008364:	4a0b      	ldr	r2, [pc, #44]	@ (8008394 <prvCheckTasksWaitingTermination+0x54>)
 8008366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008368:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <prvCheckTasksWaitingTermination+0x58>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3b01      	subs	r3, #1
 800836e:	4a0a      	ldr	r2, [pc, #40]	@ (8008398 <prvCheckTasksWaitingTermination+0x58>)
 8008370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008372:	f000 f9f3 	bl	800875c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f810 	bl	800839c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800837c:	4b06      	ldr	r3, [pc, #24]	@ (8008398 <prvCheckTasksWaitingTermination+0x58>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e1      	bne.n	8008348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	200008c8 	.word	0x200008c8
 8008394:	200008f4 	.word	0x200008f4
 8008398:	200008dc 	.word	0x200008dc

0800839c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	334c      	adds	r3, #76	@ 0x4c
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f9e5 	bl	8009778 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d108      	bne.n	80083ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fb27 	bl	8008a10 <vPortFree>
				vPortFree( pxTCB );
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fb24 	bl	8008a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083c8:	e019      	b.n	80083fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d103      	bne.n	80083dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb1b 	bl	8008a10 <vPortFree>
	}
 80083da:	e010      	b.n	80083fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d00b      	beq.n	80083fe <prvDeleteTCB+0x62>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60fb      	str	r3, [r7, #12]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <prvDeleteTCB+0x5e>
	}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800840e:	4b0e      	ldr	r3, [pc, #56]	@ (8008448 <prvResetNextTaskUnblockTime+0x40>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <prvResetNextTaskUnblockTime+0x14>
 8008418:	2301      	movs	r3, #1
 800841a:	e000      	b.n	800841e <prvResetNextTaskUnblockTime+0x16>
 800841c:	2300      	movs	r3, #0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008422:	4b0a      	ldr	r3, [pc, #40]	@ (800844c <prvResetNextTaskUnblockTime+0x44>)
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800842a:	e008      	b.n	800843e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <prvResetNextTaskUnblockTime+0x40>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	4a04      	ldr	r2, [pc, #16]	@ (800844c <prvResetNextTaskUnblockTime+0x44>)
 800843c:	6013      	str	r3, [r2, #0]
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr
 8008448:	200008ac 	.word	0x200008ac
 800844c:	20000914 	.word	0x20000914

08008450 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800845a:	4b29      	ldr	r3, [pc, #164]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008460:	4b28      	ldr	r3, [pc, #160]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3304      	adds	r3, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fad6 	bl	8007a18 <uxListRemove>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008472:	4b24      	ldr	r3, [pc, #144]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	2201      	movs	r2, #1
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43da      	mvns	r2, r3
 8008480:	4b21      	ldr	r3, [pc, #132]	@ (8008508 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4013      	ands	r3, r2
 8008486:	4a20      	ldr	r2, [pc, #128]	@ (8008508 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008488:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d10a      	bne.n	80084a8 <prvAddCurrentTaskToDelayedList+0x58>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008498:	4b1a      	ldr	r3, [pc, #104]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	481a      	ldr	r0, [pc, #104]	@ (800850c <prvAddCurrentTaskToDelayedList+0xbc>)
 80084a2:	f7ff fa5e 	bl	8007962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a6:	e026      	b.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084b0:	4b14      	ldr	r3, [pc, #80]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d209      	bcs.n	80084d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084c0:	4b13      	ldr	r3, [pc, #76]	@ (8008510 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7ff fa6b 	bl	80079a8 <vListInsert>
}
 80084d2:	e010      	b.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008514 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7ff fa61 	bl	80079a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d202      	bcs.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084f0:	4a09      	ldr	r2, [pc, #36]	@ (8008518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6013      	str	r3, [r2, #0]
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200008f8 	.word	0x200008f8
 8008504:	200007f4 	.word	0x200007f4
 8008508:	200008fc 	.word	0x200008fc
 800850c:	200008e0 	.word	0x200008e0
 8008510:	200008b0 	.word	0x200008b0
 8008514:	200008ac 	.word	0x200008ac
 8008518:	20000914 	.word	0x20000914

0800851c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3b04      	subs	r3, #4
 800852c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b04      	subs	r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3b04      	subs	r3, #4
 800854a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800854c:	4a08      	ldr	r2, [pc, #32]	@ (8008570 <pxPortInitialiseStack+0x54>)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b14      	subs	r3, #20
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b20      	subs	r3, #32
 8008562:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008564:	68fb      	ldr	r3, [r7, #12]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr
 8008570:	08008575 	.word	0x08008575

08008574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800857a:	2300      	movs	r3, #0
 800857c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800857e:	4b12      	ldr	r3, [pc, #72]	@ (80085c8 <prvTaskExitError+0x54>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	d00b      	beq.n	80085a0 <prvTaskExitError+0x2c>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60fb      	str	r3, [r7, #12]
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <prvTaskExitError+0x28>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60bb      	str	r3, [r7, #8]
}
 80085b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085b4:	bf00      	nop
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0fc      	beq.n	80085b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr
 80085c8:	20000020 	.word	0x20000020
 80085cc:	00000000 	.word	0x00000000

080085d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085d0:	4b07      	ldr	r3, [pc, #28]	@ (80085f0 <pxCurrentTCBConst2>)
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	6808      	ldr	r0, [r1, #0]
 80085d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085da:	f380 8809 	msr	PSP, r0
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8811 	msr	BASEPRI, r0
 80085ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80085ee:	4770      	bx	lr

080085f0 <pxCurrentTCBConst2>:
 80085f0:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80085f8:	4806      	ldr	r0, [pc, #24]	@ (8008614 <prvPortStartFirstTask+0x1c>)
 80085fa:	6800      	ldr	r0, [r0, #0]
 80085fc:	6800      	ldr	r0, [r0, #0]
 80085fe:	f380 8808 	msr	MSP, r0
 8008602:	b662      	cpsie	i
 8008604:	b661      	cpsie	f
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	df00      	svc	0
 8008610:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008612:	bf00      	nop
 8008614:	e000ed08 	.word	0xe000ed08

08008618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800861e:	4b32      	ldr	r3, [pc, #200]	@ (80086e8 <xPortStartScheduler+0xd0>)
 8008620:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	@ 0xff
 800862e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008640:	b2da      	uxtb	r2, r3
 8008642:	4b2a      	ldr	r3, [pc, #168]	@ (80086ec <xPortStartScheduler+0xd4>)
 8008644:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008646:	4b2a      	ldr	r3, [pc, #168]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008648:	2207      	movs	r2, #7
 800864a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864c:	e009      	b.n	8008662 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800864e:	4b28      	ldr	r3, [pc, #160]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3b01      	subs	r3, #1
 8008654:	4a26      	ldr	r2, [pc, #152]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008656:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800866a:	2b80      	cmp	r3, #128	@ 0x80
 800866c:	d0ef      	beq.n	800864e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800866e:	4b20      	ldr	r3, [pc, #128]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f1c3 0307 	rsb	r3, r3, #7
 8008676:	2b04      	cmp	r3, #4
 8008678:	d00b      	beq.n	8008692 <xPortStartScheduler+0x7a>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	60bb      	str	r3, [r7, #8]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008692:	4b17      	ldr	r3, [pc, #92]	@ (80086f0 <xPortStartScheduler+0xd8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	4a15      	ldr	r2, [pc, #84]	@ (80086f0 <xPortStartScheduler+0xd8>)
 800869a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800869c:	4b14      	ldr	r3, [pc, #80]	@ (80086f0 <xPortStartScheduler+0xd8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086a4:	4a12      	ldr	r2, [pc, #72]	@ (80086f0 <xPortStartScheduler+0xd8>)
 80086a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086b0:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a0f      	ldr	r2, [pc, #60]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0c      	ldr	r2, [pc, #48]	@ (80086f4 <xPortStartScheduler+0xdc>)
 80086c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086c8:	f000 f8b8 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086cc:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <xPortStartScheduler+0xe0>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086d2:	f7ff ff91 	bl	80085f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086d6:	f7ff fd79 	bl	80081cc <vTaskSwitchContext>
	prvTaskExitError();
 80086da:	f7ff ff4b 	bl	8008574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000e400 	.word	0xe000e400
 80086ec:	20000920 	.word	0x20000920
 80086f0:	20000924 	.word	0x20000924
 80086f4:	e000ed20 	.word	0xe000ed20
 80086f8:	20000020 	.word	0x20000020

080086fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	607b      	str	r3, [r7, #4]
}
 8008714:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008716:	4b0f      	ldr	r3, [pc, #60]	@ (8008754 <vPortEnterCritical+0x58>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	4a0d      	ldr	r2, [pc, #52]	@ (8008754 <vPortEnterCritical+0x58>)
 800871e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <vPortEnterCritical+0x58>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d110      	bne.n	800874a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008728:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <vPortEnterCritical+0x5c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <vPortEnterCritical+0x4e>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	603b      	str	r3, [r7, #0]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <vPortEnterCritical+0x4a>
	}
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr
 8008754:	20000020 	.word	0x20000020
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008762:	4b12      	ldr	r3, [pc, #72]	@ (80087ac <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <vPortExitCritical+0x26>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	607b      	str	r3, [r7, #4]
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	e7fd      	b.n	800877e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008782:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3b01      	subs	r3, #1
 8008788:	4a08      	ldr	r2, [pc, #32]	@ (80087ac <vPortExitCritical+0x50>)
 800878a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800878c:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <vPortExitCritical+0x50>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <vPortExitCritical+0x44>
 8008794:	2300      	movs	r3, #0
 8008796:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800879e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000020 	.word	0x20000020

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087c0:	6010      	str	r0, [r2, #0]
 80087c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80087c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087ca:	f380 8811 	msr	BASEPRI, r0
 80087ce:	f7ff fcfd 	bl	80081cc <vTaskSwitchContext>
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087e6:	f380 8809 	msr	PSP, r0
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	4770      	bx	lr

080087f0 <pxCurrentTCBConst>:
 80087f0:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7ff fc1d 	bl	8008050 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <SysTick_Handler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <vPortSetupTimerInterrupt+0x30>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b09      	ldr	r3, [pc, #36]	@ (8008874 <vPortSetupTimerInterrupt+0x38>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a09      	ldr	r2, [pc, #36]	@ (8008878 <vPortSetupTimerInterrupt+0x3c>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a08      	ldr	r2, [pc, #32]	@ (800887c <vPortSetupTimerInterrupt+0x40>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b03      	ldr	r3, [pc, #12]	@ (800886c <vPortSetupTimerInterrupt+0x30>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	e000e010 	.word	0xe000e010
 8008870:	e000e018 	.word	0xe000e018
 8008874:	20000014 	.word	0x20000014
 8008878:	10624dd3 	.word	0x10624dd3
 800887c:	e000e014 	.word	0xe000e014

08008880 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	@ 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008888:	2300      	movs	r3, #0
 800888a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800888c:	f7ff fb34 	bl	8007ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008890:	4b5a      	ldr	r3, [pc, #360]	@ (80089fc <pvPortMalloc+0x17c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008898:	f000 f916 	bl	8008ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800889c:	4b58      	ldr	r3, [pc, #352]	@ (8008a00 <pvPortMalloc+0x180>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 8090 	bne.w	80089ca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01e      	beq.n	80088ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088b0:	2208      	movs	r2, #8
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4413      	add	r3, r2
 80088b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d015      	beq.n	80088ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f023 0307 	bic.w	r3, r3, #7
 80088c8:	3308      	adds	r3, #8
 80088ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <pvPortMalloc+0x6e>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	617b      	str	r3, [r7, #20]
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d06a      	beq.n	80089ca <pvPortMalloc+0x14a>
 80088f4:	4b43      	ldr	r3, [pc, #268]	@ (8008a04 <pvPortMalloc+0x184>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d865      	bhi.n	80089ca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088fe:	4b42      	ldr	r3, [pc, #264]	@ (8008a08 <pvPortMalloc+0x188>)
 8008900:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008902:	4b41      	ldr	r3, [pc, #260]	@ (8008a08 <pvPortMalloc+0x188>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008908:	e004      	b.n	8008914 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d903      	bls.n	8008926 <pvPortMalloc+0xa6>
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f1      	bne.n	800890a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008926:	4b35      	ldr	r3, [pc, #212]	@ (80089fc <pvPortMalloc+0x17c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800892c:	429a      	cmp	r2, r3
 800892e:	d04c      	beq.n	80089ca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	4413      	add	r3, r2
 8008938:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	1ad2      	subs	r2, r2, r3
 800894a:	2308      	movs	r3, #8
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	429a      	cmp	r2, r3
 8008950:	d920      	bls.n	8008994 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <pvPortMalloc+0xfc>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	613b      	str	r3, [r7, #16]
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	1ad2      	subs	r2, r2, r3
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800898e:	69b8      	ldr	r0, [r7, #24]
 8008990:	f000 f8fc 	bl	8008b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008994:	4b1b      	ldr	r3, [pc, #108]	@ (8008a04 <pvPortMalloc+0x184>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	4a19      	ldr	r2, [pc, #100]	@ (8008a04 <pvPortMalloc+0x184>)
 80089a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089a2:	4b18      	ldr	r3, [pc, #96]	@ (8008a04 <pvPortMalloc+0x184>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b19      	ldr	r3, [pc, #100]	@ (8008a0c <pvPortMalloc+0x18c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d203      	bcs.n	80089b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089ae:	4b15      	ldr	r3, [pc, #84]	@ (8008a04 <pvPortMalloc+0x184>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a16      	ldr	r2, [pc, #88]	@ (8008a0c <pvPortMalloc+0x18c>)
 80089b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <pvPortMalloc+0x180>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	431a      	orrs	r2, r3
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089ca:	f7ff faa3 	bl	8007f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <pvPortMalloc+0x170>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	60fb      	str	r3, [r7, #12]
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	e7fd      	b.n	80089ec <pvPortMalloc+0x16c>
	return pvReturn;
 80089f0:	69fb      	ldr	r3, [r7, #28]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3728      	adds	r7, #40	@ 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20001530 	.word	0x20001530
 8008a00:	2000153c 	.word	0x2000153c
 8008a04:	20001534 	.word	0x20001534
 8008a08:	20001528 	.word	0x20001528
 8008a0c:	20001538 	.word	0x20001538

08008a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d04a      	beq.n	8008ab8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a22:	2308      	movs	r3, #8
 8008a24:	425b      	negs	r3, r3
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4413      	add	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	4b22      	ldr	r3, [pc, #136]	@ (8008ac0 <vPortFree+0xb0>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10b      	bne.n	8008a56 <vPortFree+0x46>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60fb      	str	r3, [r7, #12]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00b      	beq.n	8008a76 <vPortFree+0x66>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	60bb      	str	r3, [r7, #8]
}
 8008a70:	bf00      	nop
 8008a72:	bf00      	nop
 8008a74:	e7fd      	b.n	8008a72 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <vPortFree+0xb0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d019      	beq.n	8008ab8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d115      	bne.n	8008ab8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <vPortFree+0xb0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	43db      	mvns	r3, r3
 8008a96:	401a      	ands	r2, r3
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a9c:	f7ff fa2c 	bl	8007ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	4b07      	ldr	r3, [pc, #28]	@ (8008ac4 <vPortFree+0xb4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4a06      	ldr	r2, [pc, #24]	@ (8008ac4 <vPortFree+0xb4>)
 8008aac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aae:	6938      	ldr	r0, [r7, #16]
 8008ab0:	f000 f86c 	bl	8008b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ab4:	f7ff fa2e 	bl	8007f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ab8:	bf00      	nop
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	2000153c 	.word	0x2000153c
 8008ac4:	20001534 	.word	0x20001534

08008ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ace:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ad4:	4b27      	ldr	r3, [pc, #156]	@ (8008b74 <prvHeapInit+0xac>)
 8008ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00c      	beq.n	8008afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3307      	adds	r3, #7
 8008ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0307 	bic.w	r3, r3, #7
 8008aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	4a1f      	ldr	r2, [pc, #124]	@ (8008b74 <prvHeapInit+0xac>)
 8008af8:	4413      	add	r3, r2
 8008afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b00:	4a1d      	ldr	r2, [pc, #116]	@ (8008b78 <prvHeapInit+0xb0>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b06:	4b1c      	ldr	r3, [pc, #112]	@ (8008b78 <prvHeapInit+0xb0>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b14:	2208      	movs	r2, #8
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f023 0307 	bic.w	r3, r3, #7
 8008b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <prvHeapInit+0xb4>)
 8008b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b2a:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <prvHeapInit+0xb4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b32:	4b12      	ldr	r3, [pc, #72]	@ (8008b7c <prvHeapInit+0xb4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	1ad2      	subs	r2, r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b48:	4b0c      	ldr	r3, [pc, #48]	@ (8008b7c <prvHeapInit+0xb4>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	4a0a      	ldr	r2, [pc, #40]	@ (8008b80 <prvHeapInit+0xb8>)
 8008b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	4a09      	ldr	r2, [pc, #36]	@ (8008b84 <prvHeapInit+0xbc>)
 8008b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b60:	4b09      	ldr	r3, [pc, #36]	@ (8008b88 <prvHeapInit+0xc0>)
 8008b62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b66:	601a      	str	r2, [r3, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20000928 	.word	0x20000928
 8008b78:	20001528 	.word	0x20001528
 8008b7c:	20001530 	.word	0x20001530
 8008b80:	20001538 	.word	0x20001538
 8008b84:	20001534 	.word	0x20001534
 8008b88:	2000153c 	.word	0x2000153c

08008b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b94:	4b27      	ldr	r3, [pc, #156]	@ (8008c34 <prvInsertBlockIntoFreeList+0xa8>)
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	e002      	b.n	8008ba0 <prvInsertBlockIntoFreeList+0x14>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d8f7      	bhi.n	8008b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d108      	bne.n	8008bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	441a      	add	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d118      	bne.n	8008c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b14      	ldr	r3, [pc, #80]	@ (8008c38 <prvInsertBlockIntoFreeList+0xac>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d00d      	beq.n	8008c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	441a      	add	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	e008      	b.n	8008c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <prvInsertBlockIntoFreeList+0xac>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	e003      	b.n	8008c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d002      	beq.n	8008c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr
 8008c34:	20001528 	.word	0x20001528
 8008c38:	20001530 	.word	0x20001530

08008c3c <__cvt>:
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c42:	461d      	mov	r5, r3
 8008c44:	bfbb      	ittet	lt
 8008c46:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008c4a:	461d      	movlt	r5, r3
 8008c4c:	2300      	movge	r3, #0
 8008c4e:	232d      	movlt	r3, #45	@ 0x2d
 8008c50:	b088      	sub	sp, #32
 8008c52:	4614      	mov	r4, r2
 8008c54:	bfb8      	it	lt
 8008c56:	4614      	movlt	r4, r2
 8008c58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c5a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008c5c:	7013      	strb	r3, [r2, #0]
 8008c5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c60:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008c64:	f023 0820 	bic.w	r8, r3, #32
 8008c68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c6c:	d005      	beq.n	8008c7a <__cvt+0x3e>
 8008c6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c72:	d100      	bne.n	8008c76 <__cvt+0x3a>
 8008c74:	3601      	adds	r6, #1
 8008c76:	2302      	movs	r3, #2
 8008c78:	e000      	b.n	8008c7c <__cvt+0x40>
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	aa07      	add	r2, sp, #28
 8008c7e:	9204      	str	r2, [sp, #16]
 8008c80:	aa06      	add	r2, sp, #24
 8008c82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c86:	e9cd 3600 	strd	r3, r6, [sp]
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	f000 fed3 	bl	8009a38 <_dtoa_r>
 8008c92:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c96:	4607      	mov	r7, r0
 8008c98:	d119      	bne.n	8008cce <__cvt+0x92>
 8008c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c9c:	07db      	lsls	r3, r3, #31
 8008c9e:	d50e      	bpl.n	8008cbe <__cvt+0x82>
 8008ca0:	eb00 0906 	add.w	r9, r0, r6
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 ff30 	bl	8000b10 <__aeabi_dcmpeq>
 8008cb0:	b108      	cbz	r0, 8008cb6 <__cvt+0x7a>
 8008cb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cb6:	2230      	movs	r2, #48	@ 0x30
 8008cb8:	9b07      	ldr	r3, [sp, #28]
 8008cba:	454b      	cmp	r3, r9
 8008cbc:	d31e      	bcc.n	8008cfc <__cvt+0xc0>
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008cc4:	1bdb      	subs	r3, r3, r7
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	b008      	add	sp, #32
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cd2:	eb00 0906 	add.w	r9, r0, r6
 8008cd6:	d1e5      	bne.n	8008ca4 <__cvt+0x68>
 8008cd8:	7803      	ldrb	r3, [r0, #0]
 8008cda:	2b30      	cmp	r3, #48	@ 0x30
 8008cdc:	d10a      	bne.n	8008cf4 <__cvt+0xb8>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 ff13 	bl	8000b10 <__aeabi_dcmpeq>
 8008cea:	b918      	cbnz	r0, 8008cf4 <__cvt+0xb8>
 8008cec:	f1c6 0601 	rsb	r6, r6, #1
 8008cf0:	f8ca 6000 	str.w	r6, [sl]
 8008cf4:	f8da 3000 	ldr.w	r3, [sl]
 8008cf8:	4499      	add	r9, r3
 8008cfa:	e7d3      	b.n	8008ca4 <__cvt+0x68>
 8008cfc:	1c59      	adds	r1, r3, #1
 8008cfe:	9107      	str	r1, [sp, #28]
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e7d9      	b.n	8008cb8 <__cvt+0x7c>

08008d04 <__exponent>:
 8008d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d06:	2900      	cmp	r1, #0
 8008d08:	bfb6      	itet	lt
 8008d0a:	232d      	movlt	r3, #45	@ 0x2d
 8008d0c:	232b      	movge	r3, #43	@ 0x2b
 8008d0e:	4249      	neglt	r1, r1
 8008d10:	2909      	cmp	r1, #9
 8008d12:	7002      	strb	r2, [r0, #0]
 8008d14:	7043      	strb	r3, [r0, #1]
 8008d16:	dd29      	ble.n	8008d6c <__exponent+0x68>
 8008d18:	f10d 0307 	add.w	r3, sp, #7
 8008d1c:	461d      	mov	r5, r3
 8008d1e:	270a      	movs	r7, #10
 8008d20:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d24:	461a      	mov	r2, r3
 8008d26:	fb07 1416 	mls	r4, r7, r6, r1
 8008d2a:	3430      	adds	r4, #48	@ 0x30
 8008d2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d30:	460c      	mov	r4, r1
 8008d32:	2c63      	cmp	r4, #99	@ 0x63
 8008d34:	4631      	mov	r1, r6
 8008d36:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d3a:	dcf1      	bgt.n	8008d20 <__exponent+0x1c>
 8008d3c:	3130      	adds	r1, #48	@ 0x30
 8008d3e:	1e94      	subs	r4, r2, #2
 8008d40:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d44:	4623      	mov	r3, r4
 8008d46:	1c41      	adds	r1, r0, #1
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	d30a      	bcc.n	8008d62 <__exponent+0x5e>
 8008d4c:	f10d 0309 	add.w	r3, sp, #9
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	42ac      	cmp	r4, r5
 8008d54:	bf88      	it	hi
 8008d56:	2300      	movhi	r3, #0
 8008d58:	3302      	adds	r3, #2
 8008d5a:	4403      	add	r3, r0
 8008d5c:	1a18      	subs	r0, r3, r0
 8008d5e:	b003      	add	sp, #12
 8008d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d66:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d6a:	e7ed      	b.n	8008d48 <__exponent+0x44>
 8008d6c:	2330      	movs	r3, #48	@ 0x30
 8008d6e:	3130      	adds	r1, #48	@ 0x30
 8008d70:	7083      	strb	r3, [r0, #2]
 8008d72:	70c1      	strb	r1, [r0, #3]
 8008d74:	1d03      	adds	r3, r0, #4
 8008d76:	e7f1      	b.n	8008d5c <__exponent+0x58>

08008d78 <_printf_float>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	b091      	sub	sp, #68	@ 0x44
 8008d7e:	460c      	mov	r4, r1
 8008d80:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008d84:	4616      	mov	r6, r2
 8008d86:	461f      	mov	r7, r3
 8008d88:	4605      	mov	r5, r0
 8008d8a:	f000 fce1 	bl	8009750 <_localeconv_r>
 8008d8e:	6803      	ldr	r3, [r0, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	9308      	str	r3, [sp, #32]
 8008d94:	f7f7 f9dc 	bl	8000150 <strlen>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008da0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008da2:	3307      	adds	r3, #7
 8008da4:	f023 0307 	bic.w	r3, r3, #7
 8008da8:	f103 0208 	add.w	r2, r3, #8
 8008dac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008db0:	f8d4 b000 	ldr.w	fp, [r4]
 8008db4:	f8c8 2000 	str.w	r2, [r8]
 8008db8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dc2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8009044 <_printf_float+0x2cc>)
 8008dd4:	f7f7 fece 	bl	8000b74 <__aeabi_dcmpun>
 8008dd8:	bb70      	cbnz	r0, 8008e38 <_printf_float+0xc0>
 8008dda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	4b98      	ldr	r3, [pc, #608]	@ (8009044 <_printf_float+0x2cc>)
 8008de4:	f7f7 fea8 	bl	8000b38 <__aeabi_dcmple>
 8008de8:	bb30      	cbnz	r0, 8008e38 <_printf_float+0xc0>
 8008dea:	2200      	movs	r2, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	4640      	mov	r0, r8
 8008df0:	4649      	mov	r1, r9
 8008df2:	f7f7 fe97 	bl	8000b24 <__aeabi_dcmplt>
 8008df6:	b110      	cbz	r0, 8008dfe <_printf_float+0x86>
 8008df8:	232d      	movs	r3, #45	@ 0x2d
 8008dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dfe:	4a92      	ldr	r2, [pc, #584]	@ (8009048 <_printf_float+0x2d0>)
 8008e00:	4b92      	ldr	r3, [pc, #584]	@ (800904c <_printf_float+0x2d4>)
 8008e02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e06:	bf94      	ite	ls
 8008e08:	4690      	movls	r8, r2
 8008e0a:	4698      	movhi	r8, r3
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	f04f 0900 	mov.w	r9, #0
 8008e12:	6123      	str	r3, [r4, #16]
 8008e14:	f02b 0304 	bic.w	r3, fp, #4
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	4633      	mov	r3, r6
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	9700      	str	r7, [sp, #0]
 8008e22:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008e24:	f000 f9d4 	bl	80091d0 <_printf_common>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f040 8090 	bne.w	8008f4e <_printf_float+0x1d6>
 8008e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e32:	b011      	add	sp, #68	@ 0x44
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	4642      	mov	r2, r8
 8008e3a:	464b      	mov	r3, r9
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f7f7 fe98 	bl	8000b74 <__aeabi_dcmpun>
 8008e44:	b148      	cbz	r0, 8008e5a <_printf_float+0xe2>
 8008e46:	464b      	mov	r3, r9
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bfb8      	it	lt
 8008e4c:	232d      	movlt	r3, #45	@ 0x2d
 8008e4e:	4a80      	ldr	r2, [pc, #512]	@ (8009050 <_printf_float+0x2d8>)
 8008e50:	bfb8      	it	lt
 8008e52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e56:	4b7f      	ldr	r3, [pc, #508]	@ (8009054 <_printf_float+0x2dc>)
 8008e58:	e7d3      	b.n	8008e02 <_printf_float+0x8a>
 8008e5a:	6863      	ldr	r3, [r4, #4]
 8008e5c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	d13f      	bne.n	8008ee4 <_printf_float+0x16c>
 8008e64:	2306      	movs	r3, #6
 8008e66:	6063      	str	r3, [r4, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	9206      	str	r2, [sp, #24]
 8008e72:	aa0e      	add	r2, sp, #56	@ 0x38
 8008e74:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008e78:	aa0d      	add	r2, sp, #52	@ 0x34
 8008e7a:	9203      	str	r2, [sp, #12]
 8008e7c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008e80:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	4642      	mov	r2, r8
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e90:	f7ff fed4 	bl	8008c3c <__cvt>
 8008e94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e96:	4680      	mov	r8, r0
 8008e98:	2947      	cmp	r1, #71	@ 0x47
 8008e9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008e9c:	d128      	bne.n	8008ef0 <_printf_float+0x178>
 8008e9e:	1cc8      	adds	r0, r1, #3
 8008ea0:	db02      	blt.n	8008ea8 <_printf_float+0x130>
 8008ea2:	6863      	ldr	r3, [r4, #4]
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	dd40      	ble.n	8008f2a <_printf_float+0x1b2>
 8008ea8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008eac:	fa5f fa8a 	uxtb.w	sl, sl
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	3901      	subs	r1, #1
 8008eb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008eb8:	910d      	str	r1, [sp, #52]	@ 0x34
 8008eba:	f7ff ff23 	bl	8008d04 <__exponent>
 8008ebe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	1813      	adds	r3, r2, r0
 8008ec4:	2a01      	cmp	r2, #1
 8008ec6:	6123      	str	r3, [r4, #16]
 8008ec8:	dc02      	bgt.n	8008ed0 <_printf_float+0x158>
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	07d2      	lsls	r2, r2, #31
 8008ece:	d501      	bpl.n	8008ed4 <_printf_float+0x15c>
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d09e      	beq.n	8008e1a <_printf_float+0xa2>
 8008edc:	232d      	movs	r3, #45	@ 0x2d
 8008ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee2:	e79a      	b.n	8008e1a <_printf_float+0xa2>
 8008ee4:	2947      	cmp	r1, #71	@ 0x47
 8008ee6:	d1bf      	bne.n	8008e68 <_printf_float+0xf0>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1bd      	bne.n	8008e68 <_printf_float+0xf0>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e7ba      	b.n	8008e66 <_printf_float+0xee>
 8008ef0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ef4:	d9dc      	bls.n	8008eb0 <_printf_float+0x138>
 8008ef6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008efa:	d118      	bne.n	8008f2e <_printf_float+0x1b6>
 8008efc:	2900      	cmp	r1, #0
 8008efe:	6863      	ldr	r3, [r4, #4]
 8008f00:	dd0b      	ble.n	8008f1a <_printf_float+0x1a2>
 8008f02:	6121      	str	r1, [r4, #16]
 8008f04:	b913      	cbnz	r3, 8008f0c <_printf_float+0x194>
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	07d0      	lsls	r0, r2, #31
 8008f0a:	d502      	bpl.n	8008f12 <_printf_float+0x19a>
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	440b      	add	r3, r1
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	f04f 0900 	mov.w	r9, #0
 8008f16:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f18:	e7dc      	b.n	8008ed4 <_printf_float+0x15c>
 8008f1a:	b913      	cbnz	r3, 8008f22 <_printf_float+0x1aa>
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	07d2      	lsls	r2, r2, #31
 8008f20:	d501      	bpl.n	8008f26 <_printf_float+0x1ae>
 8008f22:	3302      	adds	r3, #2
 8008f24:	e7f4      	b.n	8008f10 <_printf_float+0x198>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e7f2      	b.n	8008f10 <_printf_float+0x198>
 8008f2a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f30:	4299      	cmp	r1, r3
 8008f32:	db05      	blt.n	8008f40 <_printf_float+0x1c8>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	6121      	str	r1, [r4, #16]
 8008f38:	07d8      	lsls	r0, r3, #31
 8008f3a:	d5ea      	bpl.n	8008f12 <_printf_float+0x19a>
 8008f3c:	1c4b      	adds	r3, r1, #1
 8008f3e:	e7e7      	b.n	8008f10 <_printf_float+0x198>
 8008f40:	2900      	cmp	r1, #0
 8008f42:	bfcc      	ite	gt
 8008f44:	2201      	movgt	r2, #1
 8008f46:	f1c1 0202 	rsble	r2, r1, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	e7e0      	b.n	8008f10 <_printf_float+0x198>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	055a      	lsls	r2, r3, #21
 8008f52:	d407      	bmi.n	8008f64 <_printf_float+0x1ec>
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	4642      	mov	r2, r8
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d12b      	bne.n	8008fba <_printf_float+0x242>
 8008f62:	e764      	b.n	8008e2e <_printf_float+0xb6>
 8008f64:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f68:	f240 80dc 	bls.w	8009124 <_printf_float+0x3ac>
 8008f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	f7f7 fdcc 	bl	8000b10 <__aeabi_dcmpeq>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d033      	beq.n	8008fe4 <_printf_float+0x26c>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	4a35      	ldr	r2, [pc, #212]	@ (8009058 <_printf_float+0x2e0>)
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f af51 	beq.w	8008e2e <_printf_float+0xb6>
 8008f8c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008f90:	4543      	cmp	r3, r8
 8008f92:	db02      	blt.n	8008f9a <_printf_float+0x222>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	07d8      	lsls	r0, r3, #31
 8008f98:	d50f      	bpl.n	8008fba <_printf_float+0x242>
 8008f9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f af42 	beq.w	8008e2e <_printf_float+0xb6>
 8008faa:	f04f 0900 	mov.w	r9, #0
 8008fae:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fb2:	f104 0a1a 	add.w	sl, r4, #26
 8008fb6:	45c8      	cmp	r8, r9
 8008fb8:	dc09      	bgt.n	8008fce <_printf_float+0x256>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	079b      	lsls	r3, r3, #30
 8008fbe:	f100 8102 	bmi.w	80091c6 <_printf_float+0x44e>
 8008fc2:	68e0      	ldr	r0, [r4, #12]
 8008fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fc6:	4298      	cmp	r0, r3
 8008fc8:	bfb8      	it	lt
 8008fca:	4618      	movlt	r0, r3
 8008fcc:	e731      	b.n	8008e32 <_printf_float+0xba>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f43f af28 	beq.w	8008e2e <_printf_float+0xb6>
 8008fde:	f109 0901 	add.w	r9, r9, #1
 8008fe2:	e7e8      	b.n	8008fb6 <_printf_float+0x23e>
 8008fe4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dc38      	bgt.n	800905c <_printf_float+0x2e4>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	4a19      	ldr	r2, [pc, #100]	@ (8009058 <_printf_float+0x2e0>)
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f af1a 	beq.w	8008e2e <_printf_float+0xb6>
 8008ffa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008ffe:	ea59 0303 	orrs.w	r3, r9, r3
 8009002:	d102      	bne.n	800900a <_printf_float+0x292>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d5d7      	bpl.n	8008fba <_printf_float+0x242>
 800900a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	f43f af0a 	beq.w	8008e2e <_printf_float+0xb6>
 800901a:	f04f 0a00 	mov.w	sl, #0
 800901e:	f104 0b1a 	add.w	fp, r4, #26
 8009022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009024:	425b      	negs	r3, r3
 8009026:	4553      	cmp	r3, sl
 8009028:	dc01      	bgt.n	800902e <_printf_float+0x2b6>
 800902a:	464b      	mov	r3, r9
 800902c:	e793      	b.n	8008f56 <_printf_float+0x1de>
 800902e:	2301      	movs	r3, #1
 8009030:	465a      	mov	r2, fp
 8009032:	4631      	mov	r1, r6
 8009034:	4628      	mov	r0, r5
 8009036:	47b8      	blx	r7
 8009038:	3001      	adds	r0, #1
 800903a:	f43f aef8 	beq.w	8008e2e <_printf_float+0xb6>
 800903e:	f10a 0a01 	add.w	sl, sl, #1
 8009042:	e7ee      	b.n	8009022 <_printf_float+0x2aa>
 8009044:	7fefffff 	.word	0x7fefffff
 8009048:	0800ca2a 	.word	0x0800ca2a
 800904c:	0800ca2e 	.word	0x0800ca2e
 8009050:	0800ca32 	.word	0x0800ca32
 8009054:	0800ca36 	.word	0x0800ca36
 8009058:	0800ca3a 	.word	0x0800ca3a
 800905c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800905e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009062:	4553      	cmp	r3, sl
 8009064:	bfa8      	it	ge
 8009066:	4653      	movge	r3, sl
 8009068:	2b00      	cmp	r3, #0
 800906a:	4699      	mov	r9, r3
 800906c:	dc36      	bgt.n	80090dc <_printf_float+0x364>
 800906e:	f04f 0b00 	mov.w	fp, #0
 8009072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009076:	f104 021a 	add.w	r2, r4, #26
 800907a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800907c:	930a      	str	r3, [sp, #40]	@ 0x28
 800907e:	eba3 0309 	sub.w	r3, r3, r9
 8009082:	455b      	cmp	r3, fp
 8009084:	dc31      	bgt.n	80090ea <_printf_float+0x372>
 8009086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009088:	459a      	cmp	sl, r3
 800908a:	dc3a      	bgt.n	8009102 <_printf_float+0x38a>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	07da      	lsls	r2, r3, #31
 8009090:	d437      	bmi.n	8009102 <_printf_float+0x38a>
 8009092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009094:	ebaa 0903 	sub.w	r9, sl, r3
 8009098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800909a:	ebaa 0303 	sub.w	r3, sl, r3
 800909e:	4599      	cmp	r9, r3
 80090a0:	bfa8      	it	ge
 80090a2:	4699      	movge	r9, r3
 80090a4:	f1b9 0f00 	cmp.w	r9, #0
 80090a8:	dc33      	bgt.n	8009112 <_printf_float+0x39a>
 80090aa:	f04f 0800 	mov.w	r8, #0
 80090ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090b2:	f104 0b1a 	add.w	fp, r4, #26
 80090b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b8:	ebaa 0303 	sub.w	r3, sl, r3
 80090bc:	eba3 0309 	sub.w	r3, r3, r9
 80090c0:	4543      	cmp	r3, r8
 80090c2:	f77f af7a 	ble.w	8008fba <_printf_float+0x242>
 80090c6:	2301      	movs	r3, #1
 80090c8:	465a      	mov	r2, fp
 80090ca:	4631      	mov	r1, r6
 80090cc:	4628      	mov	r0, r5
 80090ce:	47b8      	blx	r7
 80090d0:	3001      	adds	r0, #1
 80090d2:	f43f aeac 	beq.w	8008e2e <_printf_float+0xb6>
 80090d6:	f108 0801 	add.w	r8, r8, #1
 80090da:	e7ec      	b.n	80090b6 <_printf_float+0x33e>
 80090dc:	4642      	mov	r2, r8
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	d1c2      	bne.n	800906e <_printf_float+0x2f6>
 80090e8:	e6a1      	b.n	8008e2e <_printf_float+0xb6>
 80090ea:	2301      	movs	r3, #1
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80090f2:	47b8      	blx	r7
 80090f4:	3001      	adds	r0, #1
 80090f6:	f43f ae9a 	beq.w	8008e2e <_printf_float+0xb6>
 80090fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090fc:	f10b 0b01 	add.w	fp, fp, #1
 8009100:	e7bb      	b.n	800907a <_printf_float+0x302>
 8009102:	4631      	mov	r1, r6
 8009104:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	d1c0      	bne.n	8009092 <_printf_float+0x31a>
 8009110:	e68d      	b.n	8008e2e <_printf_float+0xb6>
 8009112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009114:	464b      	mov	r3, r9
 8009116:	4631      	mov	r1, r6
 8009118:	4628      	mov	r0, r5
 800911a:	4442      	add	r2, r8
 800911c:	47b8      	blx	r7
 800911e:	3001      	adds	r0, #1
 8009120:	d1c3      	bne.n	80090aa <_printf_float+0x332>
 8009122:	e684      	b.n	8008e2e <_printf_float+0xb6>
 8009124:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009128:	f1ba 0f01 	cmp.w	sl, #1
 800912c:	dc01      	bgt.n	8009132 <_printf_float+0x3ba>
 800912e:	07db      	lsls	r3, r3, #31
 8009130:	d536      	bpl.n	80091a0 <_printf_float+0x428>
 8009132:	2301      	movs	r3, #1
 8009134:	4642      	mov	r2, r8
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	f43f ae76 	beq.w	8008e2e <_printf_float+0xb6>
 8009142:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	47b8      	blx	r7
 800914c:	3001      	adds	r0, #1
 800914e:	f43f ae6e 	beq.w	8008e2e <_printf_float+0xb6>
 8009152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009156:	2200      	movs	r2, #0
 8009158:	2300      	movs	r3, #0
 800915a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800915e:	f7f7 fcd7 	bl	8000b10 <__aeabi_dcmpeq>
 8009162:	b9c0      	cbnz	r0, 8009196 <_printf_float+0x41e>
 8009164:	4653      	mov	r3, sl
 8009166:	f108 0201 	add.w	r2, r8, #1
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	d10c      	bne.n	800918e <_printf_float+0x416>
 8009174:	e65b      	b.n	8008e2e <_printf_float+0xb6>
 8009176:	2301      	movs	r3, #1
 8009178:	465a      	mov	r2, fp
 800917a:	4631      	mov	r1, r6
 800917c:	4628      	mov	r0, r5
 800917e:	47b8      	blx	r7
 8009180:	3001      	adds	r0, #1
 8009182:	f43f ae54 	beq.w	8008e2e <_printf_float+0xb6>
 8009186:	f108 0801 	add.w	r8, r8, #1
 800918a:	45d0      	cmp	r8, sl
 800918c:	dbf3      	blt.n	8009176 <_printf_float+0x3fe>
 800918e:	464b      	mov	r3, r9
 8009190:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009194:	e6e0      	b.n	8008f58 <_printf_float+0x1e0>
 8009196:	f04f 0800 	mov.w	r8, #0
 800919a:	f104 0b1a 	add.w	fp, r4, #26
 800919e:	e7f4      	b.n	800918a <_printf_float+0x412>
 80091a0:	2301      	movs	r3, #1
 80091a2:	4642      	mov	r2, r8
 80091a4:	e7e1      	b.n	800916a <_printf_float+0x3f2>
 80091a6:	2301      	movs	r3, #1
 80091a8:	464a      	mov	r2, r9
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f ae3c 	beq.w	8008e2e <_printf_float+0xb6>
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	68e3      	ldr	r3, [r4, #12]
 80091bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091be:	1a5b      	subs	r3, r3, r1
 80091c0:	4543      	cmp	r3, r8
 80091c2:	dcf0      	bgt.n	80091a6 <_printf_float+0x42e>
 80091c4:	e6fd      	b.n	8008fc2 <_printf_float+0x24a>
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	f104 0919 	add.w	r9, r4, #25
 80091ce:	e7f4      	b.n	80091ba <_printf_float+0x442>

080091d0 <_printf_common>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	4616      	mov	r6, r2
 80091d6:	4698      	mov	r8, r3
 80091d8:	688a      	ldr	r2, [r1, #8]
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	4607      	mov	r7, r0
 80091de:	4293      	cmp	r3, r2
 80091e0:	bfb8      	it	lt
 80091e2:	4613      	movlt	r3, r2
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091ea:	460c      	mov	r4, r1
 80091ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091f0:	b10a      	cbz	r2, 80091f6 <_printf_common+0x26>
 80091f2:	3301      	adds	r3, #1
 80091f4:	6033      	str	r3, [r6, #0]
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	0699      	lsls	r1, r3, #26
 80091fa:	bf42      	ittt	mi
 80091fc:	6833      	ldrmi	r3, [r6, #0]
 80091fe:	3302      	addmi	r3, #2
 8009200:	6033      	strmi	r3, [r6, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	f015 0506 	ands.w	r5, r5, #6
 8009208:	d106      	bne.n	8009218 <_printf_common+0x48>
 800920a:	f104 0a19 	add.w	sl, r4, #25
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	6832      	ldr	r2, [r6, #0]
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	42ab      	cmp	r3, r5
 8009216:	dc2b      	bgt.n	8009270 <_printf_common+0xa0>
 8009218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	3b00      	subs	r3, #0
 8009220:	bf18      	it	ne
 8009222:	2301      	movne	r3, #1
 8009224:	0692      	lsls	r2, r2, #26
 8009226:	d430      	bmi.n	800928a <_printf_common+0xba>
 8009228:	4641      	mov	r1, r8
 800922a:	4638      	mov	r0, r7
 800922c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009230:	47c8      	blx	r9
 8009232:	3001      	adds	r0, #1
 8009234:	d023      	beq.n	800927e <_printf_common+0xae>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	f003 0306 	and.w	r3, r3, #6
 800923e:	2b04      	cmp	r3, #4
 8009240:	bf14      	ite	ne
 8009242:	2500      	movne	r5, #0
 8009244:	6833      	ldreq	r3, [r6, #0]
 8009246:	f04f 0600 	mov.w	r6, #0
 800924a:	bf08      	it	eq
 800924c:	68e5      	ldreq	r5, [r4, #12]
 800924e:	f104 041a 	add.w	r4, r4, #26
 8009252:	bf08      	it	eq
 8009254:	1aed      	subeq	r5, r5, r3
 8009256:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800925a:	bf08      	it	eq
 800925c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009260:	4293      	cmp	r3, r2
 8009262:	bfc4      	itt	gt
 8009264:	1a9b      	subgt	r3, r3, r2
 8009266:	18ed      	addgt	r5, r5, r3
 8009268:	42b5      	cmp	r5, r6
 800926a:	d11a      	bne.n	80092a2 <_printf_common+0xd2>
 800926c:	2000      	movs	r0, #0
 800926e:	e008      	b.n	8009282 <_printf_common+0xb2>
 8009270:	2301      	movs	r3, #1
 8009272:	4652      	mov	r2, sl
 8009274:	4641      	mov	r1, r8
 8009276:	4638      	mov	r0, r7
 8009278:	47c8      	blx	r9
 800927a:	3001      	adds	r0, #1
 800927c:	d103      	bne.n	8009286 <_printf_common+0xb6>
 800927e:	f04f 30ff 	mov.w	r0, #4294967295
 8009282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009286:	3501      	adds	r5, #1
 8009288:	e7c1      	b.n	800920e <_printf_common+0x3e>
 800928a:	2030      	movs	r0, #48	@ 0x30
 800928c:	18e1      	adds	r1, r4, r3
 800928e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009298:	4422      	add	r2, r4
 800929a:	3302      	adds	r3, #2
 800929c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092a0:	e7c2      	b.n	8009228 <_printf_common+0x58>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4622      	mov	r2, r4
 80092a6:	4641      	mov	r1, r8
 80092a8:	4638      	mov	r0, r7
 80092aa:	47c8      	blx	r9
 80092ac:	3001      	adds	r0, #1
 80092ae:	d0e6      	beq.n	800927e <_printf_common+0xae>
 80092b0:	3601      	adds	r6, #1
 80092b2:	e7d9      	b.n	8009268 <_printf_common+0x98>

080092b4 <_printf_i>:
 80092b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	7e0f      	ldrb	r7, [r1, #24]
 80092ba:	4691      	mov	r9, r2
 80092bc:	2f78      	cmp	r7, #120	@ 0x78
 80092be:	4680      	mov	r8, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	469a      	mov	sl, r3
 80092c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ca:	d807      	bhi.n	80092dc <_printf_i+0x28>
 80092cc:	2f62      	cmp	r7, #98	@ 0x62
 80092ce:	d80a      	bhi.n	80092e6 <_printf_i+0x32>
 80092d0:	2f00      	cmp	r7, #0
 80092d2:	f000 80d3 	beq.w	800947c <_printf_i+0x1c8>
 80092d6:	2f58      	cmp	r7, #88	@ 0x58
 80092d8:	f000 80ba 	beq.w	8009450 <_printf_i+0x19c>
 80092dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092e4:	e03a      	b.n	800935c <_printf_i+0xa8>
 80092e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ea:	2b15      	cmp	r3, #21
 80092ec:	d8f6      	bhi.n	80092dc <_printf_i+0x28>
 80092ee:	a101      	add	r1, pc, #4	@ (adr r1, 80092f4 <_printf_i+0x40>)
 80092f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	08009361 	.word	0x08009361
 80092fc:	080092dd 	.word	0x080092dd
 8009300:	080092dd 	.word	0x080092dd
 8009304:	080092dd 	.word	0x080092dd
 8009308:	080092dd 	.word	0x080092dd
 800930c:	08009361 	.word	0x08009361
 8009310:	080092dd 	.word	0x080092dd
 8009314:	080092dd 	.word	0x080092dd
 8009318:	080092dd 	.word	0x080092dd
 800931c:	080092dd 	.word	0x080092dd
 8009320:	08009463 	.word	0x08009463
 8009324:	0800938b 	.word	0x0800938b
 8009328:	0800941d 	.word	0x0800941d
 800932c:	080092dd 	.word	0x080092dd
 8009330:	080092dd 	.word	0x080092dd
 8009334:	08009485 	.word	0x08009485
 8009338:	080092dd 	.word	0x080092dd
 800933c:	0800938b 	.word	0x0800938b
 8009340:	080092dd 	.word	0x080092dd
 8009344:	080092dd 	.word	0x080092dd
 8009348:	08009425 	.word	0x08009425
 800934c:	6833      	ldr	r3, [r6, #0]
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6032      	str	r2, [r6, #0]
 8009354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800935c:	2301      	movs	r3, #1
 800935e:	e09e      	b.n	800949e <_printf_i+0x1ea>
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	6820      	ldr	r0, [r4, #0]
 8009364:	1d19      	adds	r1, r3, #4
 8009366:	6031      	str	r1, [r6, #0]
 8009368:	0606      	lsls	r6, r0, #24
 800936a:	d501      	bpl.n	8009370 <_printf_i+0xbc>
 800936c:	681d      	ldr	r5, [r3, #0]
 800936e:	e003      	b.n	8009378 <_printf_i+0xc4>
 8009370:	0645      	lsls	r5, r0, #25
 8009372:	d5fb      	bpl.n	800936c <_printf_i+0xb8>
 8009374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009378:	2d00      	cmp	r5, #0
 800937a:	da03      	bge.n	8009384 <_printf_i+0xd0>
 800937c:	232d      	movs	r3, #45	@ 0x2d
 800937e:	426d      	negs	r5, r5
 8009380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009384:	230a      	movs	r3, #10
 8009386:	4859      	ldr	r0, [pc, #356]	@ (80094ec <_printf_i+0x238>)
 8009388:	e011      	b.n	80093ae <_printf_i+0xfa>
 800938a:	6821      	ldr	r1, [r4, #0]
 800938c:	6833      	ldr	r3, [r6, #0]
 800938e:	0608      	lsls	r0, r1, #24
 8009390:	f853 5b04 	ldr.w	r5, [r3], #4
 8009394:	d402      	bmi.n	800939c <_printf_i+0xe8>
 8009396:	0649      	lsls	r1, r1, #25
 8009398:	bf48      	it	mi
 800939a:	b2ad      	uxthmi	r5, r5
 800939c:	2f6f      	cmp	r7, #111	@ 0x6f
 800939e:	6033      	str	r3, [r6, #0]
 80093a0:	bf14      	ite	ne
 80093a2:	230a      	movne	r3, #10
 80093a4:	2308      	moveq	r3, #8
 80093a6:	4851      	ldr	r0, [pc, #324]	@ (80094ec <_printf_i+0x238>)
 80093a8:	2100      	movs	r1, #0
 80093aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093ae:	6866      	ldr	r6, [r4, #4]
 80093b0:	2e00      	cmp	r6, #0
 80093b2:	bfa8      	it	ge
 80093b4:	6821      	ldrge	r1, [r4, #0]
 80093b6:	60a6      	str	r6, [r4, #8]
 80093b8:	bfa4      	itt	ge
 80093ba:	f021 0104 	bicge.w	r1, r1, #4
 80093be:	6021      	strge	r1, [r4, #0]
 80093c0:	b90d      	cbnz	r5, 80093c6 <_printf_i+0x112>
 80093c2:	2e00      	cmp	r6, #0
 80093c4:	d04b      	beq.n	800945e <_printf_i+0x1aa>
 80093c6:	4616      	mov	r6, r2
 80093c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80093cc:	fb03 5711 	mls	r7, r3, r1, r5
 80093d0:	5dc7      	ldrb	r7, [r0, r7]
 80093d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093d6:	462f      	mov	r7, r5
 80093d8:	42bb      	cmp	r3, r7
 80093da:	460d      	mov	r5, r1
 80093dc:	d9f4      	bls.n	80093c8 <_printf_i+0x114>
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d10b      	bne.n	80093fa <_printf_i+0x146>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	07df      	lsls	r7, r3, #31
 80093e6:	d508      	bpl.n	80093fa <_printf_i+0x146>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	6861      	ldr	r1, [r4, #4]
 80093ec:	4299      	cmp	r1, r3
 80093ee:	bfde      	ittt	le
 80093f0:	2330      	movle	r3, #48	@ 0x30
 80093f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093fa:	1b92      	subs	r2, r2, r6
 80093fc:	6122      	str	r2, [r4, #16]
 80093fe:	464b      	mov	r3, r9
 8009400:	4621      	mov	r1, r4
 8009402:	4640      	mov	r0, r8
 8009404:	f8cd a000 	str.w	sl, [sp]
 8009408:	aa03      	add	r2, sp, #12
 800940a:	f7ff fee1 	bl	80091d0 <_printf_common>
 800940e:	3001      	adds	r0, #1
 8009410:	d14a      	bne.n	80094a8 <_printf_i+0x1f4>
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	b004      	add	sp, #16
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	f043 0320 	orr.w	r3, r3, #32
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	2778      	movs	r7, #120	@ 0x78
 8009426:	4832      	ldr	r0, [pc, #200]	@ (80094f0 <_printf_i+0x23c>)
 8009428:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	6831      	ldr	r1, [r6, #0]
 8009430:	061f      	lsls	r7, r3, #24
 8009432:	f851 5b04 	ldr.w	r5, [r1], #4
 8009436:	d402      	bmi.n	800943e <_printf_i+0x18a>
 8009438:	065f      	lsls	r7, r3, #25
 800943a:	bf48      	it	mi
 800943c:	b2ad      	uxthmi	r5, r5
 800943e:	6031      	str	r1, [r6, #0]
 8009440:	07d9      	lsls	r1, r3, #31
 8009442:	bf44      	itt	mi
 8009444:	f043 0320 	orrmi.w	r3, r3, #32
 8009448:	6023      	strmi	r3, [r4, #0]
 800944a:	b11d      	cbz	r5, 8009454 <_printf_i+0x1a0>
 800944c:	2310      	movs	r3, #16
 800944e:	e7ab      	b.n	80093a8 <_printf_i+0xf4>
 8009450:	4826      	ldr	r0, [pc, #152]	@ (80094ec <_printf_i+0x238>)
 8009452:	e7e9      	b.n	8009428 <_printf_i+0x174>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	f023 0320 	bic.w	r3, r3, #32
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	e7f6      	b.n	800944c <_printf_i+0x198>
 800945e:	4616      	mov	r6, r2
 8009460:	e7bd      	b.n	80093de <_printf_i+0x12a>
 8009462:	6833      	ldr	r3, [r6, #0]
 8009464:	6825      	ldr	r5, [r4, #0]
 8009466:	1d18      	adds	r0, r3, #4
 8009468:	6961      	ldr	r1, [r4, #20]
 800946a:	6030      	str	r0, [r6, #0]
 800946c:	062e      	lsls	r6, r5, #24
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	d501      	bpl.n	8009476 <_printf_i+0x1c2>
 8009472:	6019      	str	r1, [r3, #0]
 8009474:	e002      	b.n	800947c <_printf_i+0x1c8>
 8009476:	0668      	lsls	r0, r5, #25
 8009478:	d5fb      	bpl.n	8009472 <_printf_i+0x1be>
 800947a:	8019      	strh	r1, [r3, #0]
 800947c:	2300      	movs	r3, #0
 800947e:	4616      	mov	r6, r2
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	e7bc      	b.n	80093fe <_printf_i+0x14a>
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	2100      	movs	r1, #0
 8009488:	1d1a      	adds	r2, r3, #4
 800948a:	6032      	str	r2, [r6, #0]
 800948c:	681e      	ldr	r6, [r3, #0]
 800948e:	6862      	ldr	r2, [r4, #4]
 8009490:	4630      	mov	r0, r6
 8009492:	f000 fa2a 	bl	80098ea <memchr>
 8009496:	b108      	cbz	r0, 800949c <_printf_i+0x1e8>
 8009498:	1b80      	subs	r0, r0, r6
 800949a:	6060      	str	r0, [r4, #4]
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	6123      	str	r3, [r4, #16]
 80094a0:	2300      	movs	r3, #0
 80094a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a6:	e7aa      	b.n	80093fe <_printf_i+0x14a>
 80094a8:	4632      	mov	r2, r6
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	47d0      	blx	sl
 80094b2:	3001      	adds	r0, #1
 80094b4:	d0ad      	beq.n	8009412 <_printf_i+0x15e>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	079b      	lsls	r3, r3, #30
 80094ba:	d413      	bmi.n	80094e4 <_printf_i+0x230>
 80094bc:	68e0      	ldr	r0, [r4, #12]
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	4298      	cmp	r0, r3
 80094c2:	bfb8      	it	lt
 80094c4:	4618      	movlt	r0, r3
 80094c6:	e7a6      	b.n	8009416 <_printf_i+0x162>
 80094c8:	2301      	movs	r3, #1
 80094ca:	4632      	mov	r2, r6
 80094cc:	4649      	mov	r1, r9
 80094ce:	4640      	mov	r0, r8
 80094d0:	47d0      	blx	sl
 80094d2:	3001      	adds	r0, #1
 80094d4:	d09d      	beq.n	8009412 <_printf_i+0x15e>
 80094d6:	3501      	adds	r5, #1
 80094d8:	68e3      	ldr	r3, [r4, #12]
 80094da:	9903      	ldr	r1, [sp, #12]
 80094dc:	1a5b      	subs	r3, r3, r1
 80094de:	42ab      	cmp	r3, r5
 80094e0:	dcf2      	bgt.n	80094c8 <_printf_i+0x214>
 80094e2:	e7eb      	b.n	80094bc <_printf_i+0x208>
 80094e4:	2500      	movs	r5, #0
 80094e6:	f104 0619 	add.w	r6, r4, #25
 80094ea:	e7f5      	b.n	80094d8 <_printf_i+0x224>
 80094ec:	0800ca3c 	.word	0x0800ca3c
 80094f0:	0800ca4d 	.word	0x0800ca4d

080094f4 <std>:
 80094f4:	2300      	movs	r3, #0
 80094f6:	b510      	push	{r4, lr}
 80094f8:	4604      	mov	r4, r0
 80094fa:	e9c0 3300 	strd	r3, r3, [r0]
 80094fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009502:	6083      	str	r3, [r0, #8]
 8009504:	8181      	strh	r1, [r0, #12]
 8009506:	6643      	str	r3, [r0, #100]	@ 0x64
 8009508:	81c2      	strh	r2, [r0, #14]
 800950a:	6183      	str	r3, [r0, #24]
 800950c:	4619      	mov	r1, r3
 800950e:	2208      	movs	r2, #8
 8009510:	305c      	adds	r0, #92	@ 0x5c
 8009512:	f000 f914 	bl	800973e <memset>
 8009516:	4b0d      	ldr	r3, [pc, #52]	@ (800954c <std+0x58>)
 8009518:	6224      	str	r4, [r4, #32]
 800951a:	6263      	str	r3, [r4, #36]	@ 0x24
 800951c:	4b0c      	ldr	r3, [pc, #48]	@ (8009550 <std+0x5c>)
 800951e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009520:	4b0c      	ldr	r3, [pc, #48]	@ (8009554 <std+0x60>)
 8009522:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009524:	4b0c      	ldr	r3, [pc, #48]	@ (8009558 <std+0x64>)
 8009526:	6323      	str	r3, [r4, #48]	@ 0x30
 8009528:	4b0c      	ldr	r3, [pc, #48]	@ (800955c <std+0x68>)
 800952a:	429c      	cmp	r4, r3
 800952c:	d006      	beq.n	800953c <std+0x48>
 800952e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009532:	4294      	cmp	r4, r2
 8009534:	d002      	beq.n	800953c <std+0x48>
 8009536:	33d0      	adds	r3, #208	@ 0xd0
 8009538:	429c      	cmp	r4, r3
 800953a:	d105      	bne.n	8009548 <std+0x54>
 800953c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009544:	f000 b9ce 	b.w	80098e4 <__retarget_lock_init_recursive>
 8009548:	bd10      	pop	{r4, pc}
 800954a:	bf00      	nop
 800954c:	080096b9 	.word	0x080096b9
 8009550:	080096db 	.word	0x080096db
 8009554:	08009713 	.word	0x08009713
 8009558:	08009737 	.word	0x08009737
 800955c:	20001540 	.word	0x20001540

08009560 <stdio_exit_handler>:
 8009560:	4a02      	ldr	r2, [pc, #8]	@ (800956c <stdio_exit_handler+0xc>)
 8009562:	4903      	ldr	r1, [pc, #12]	@ (8009570 <stdio_exit_handler+0x10>)
 8009564:	4803      	ldr	r0, [pc, #12]	@ (8009574 <stdio_exit_handler+0x14>)
 8009566:	f000 b869 	b.w	800963c <_fwalk_sglue>
 800956a:	bf00      	nop
 800956c:	20000024 	.word	0x20000024
 8009570:	0800b275 	.word	0x0800b275
 8009574:	20000034 	.word	0x20000034

08009578 <cleanup_stdio>:
 8009578:	6841      	ldr	r1, [r0, #4]
 800957a:	4b0c      	ldr	r3, [pc, #48]	@ (80095ac <cleanup_stdio+0x34>)
 800957c:	b510      	push	{r4, lr}
 800957e:	4299      	cmp	r1, r3
 8009580:	4604      	mov	r4, r0
 8009582:	d001      	beq.n	8009588 <cleanup_stdio+0x10>
 8009584:	f001 fe76 	bl	800b274 <_fflush_r>
 8009588:	68a1      	ldr	r1, [r4, #8]
 800958a:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <cleanup_stdio+0x38>)
 800958c:	4299      	cmp	r1, r3
 800958e:	d002      	beq.n	8009596 <cleanup_stdio+0x1e>
 8009590:	4620      	mov	r0, r4
 8009592:	f001 fe6f 	bl	800b274 <_fflush_r>
 8009596:	68e1      	ldr	r1, [r4, #12]
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <cleanup_stdio+0x3c>)
 800959a:	4299      	cmp	r1, r3
 800959c:	d004      	beq.n	80095a8 <cleanup_stdio+0x30>
 800959e:	4620      	mov	r0, r4
 80095a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a4:	f001 be66 	b.w	800b274 <_fflush_r>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	bf00      	nop
 80095ac:	20001540 	.word	0x20001540
 80095b0:	200015a8 	.word	0x200015a8
 80095b4:	20001610 	.word	0x20001610

080095b8 <global_stdio_init.part.0>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	4b0b      	ldr	r3, [pc, #44]	@ (80095e8 <global_stdio_init.part.0+0x30>)
 80095bc:	4c0b      	ldr	r4, [pc, #44]	@ (80095ec <global_stdio_init.part.0+0x34>)
 80095be:	4a0c      	ldr	r2, [pc, #48]	@ (80095f0 <global_stdio_init.part.0+0x38>)
 80095c0:	4620      	mov	r0, r4
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	2104      	movs	r1, #4
 80095c6:	2200      	movs	r2, #0
 80095c8:	f7ff ff94 	bl	80094f4 <std>
 80095cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095d0:	2201      	movs	r2, #1
 80095d2:	2109      	movs	r1, #9
 80095d4:	f7ff ff8e 	bl	80094f4 <std>
 80095d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095dc:	2202      	movs	r2, #2
 80095de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e2:	2112      	movs	r1, #18
 80095e4:	f7ff bf86 	b.w	80094f4 <std>
 80095e8:	20001678 	.word	0x20001678
 80095ec:	20001540 	.word	0x20001540
 80095f0:	08009561 	.word	0x08009561

080095f4 <__sfp_lock_acquire>:
 80095f4:	4801      	ldr	r0, [pc, #4]	@ (80095fc <__sfp_lock_acquire+0x8>)
 80095f6:	f000 b976 	b.w	80098e6 <__retarget_lock_acquire_recursive>
 80095fa:	bf00      	nop
 80095fc:	20001681 	.word	0x20001681

08009600 <__sfp_lock_release>:
 8009600:	4801      	ldr	r0, [pc, #4]	@ (8009608 <__sfp_lock_release+0x8>)
 8009602:	f000 b971 	b.w	80098e8 <__retarget_lock_release_recursive>
 8009606:	bf00      	nop
 8009608:	20001681 	.word	0x20001681

0800960c <__sinit>:
 800960c:	b510      	push	{r4, lr}
 800960e:	4604      	mov	r4, r0
 8009610:	f7ff fff0 	bl	80095f4 <__sfp_lock_acquire>
 8009614:	6a23      	ldr	r3, [r4, #32]
 8009616:	b11b      	cbz	r3, 8009620 <__sinit+0x14>
 8009618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961c:	f7ff bff0 	b.w	8009600 <__sfp_lock_release>
 8009620:	4b04      	ldr	r3, [pc, #16]	@ (8009634 <__sinit+0x28>)
 8009622:	6223      	str	r3, [r4, #32]
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <__sinit+0x2c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1f5      	bne.n	8009618 <__sinit+0xc>
 800962c:	f7ff ffc4 	bl	80095b8 <global_stdio_init.part.0>
 8009630:	e7f2      	b.n	8009618 <__sinit+0xc>
 8009632:	bf00      	nop
 8009634:	08009579 	.word	0x08009579
 8009638:	20001678 	.word	0x20001678

0800963c <_fwalk_sglue>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	4607      	mov	r7, r0
 8009642:	4688      	mov	r8, r1
 8009644:	4614      	mov	r4, r2
 8009646:	2600      	movs	r6, #0
 8009648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800964c:	f1b9 0901 	subs.w	r9, r9, #1
 8009650:	d505      	bpl.n	800965e <_fwalk_sglue+0x22>
 8009652:	6824      	ldr	r4, [r4, #0]
 8009654:	2c00      	cmp	r4, #0
 8009656:	d1f7      	bne.n	8009648 <_fwalk_sglue+0xc>
 8009658:	4630      	mov	r0, r6
 800965a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965e:	89ab      	ldrh	r3, [r5, #12]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d907      	bls.n	8009674 <_fwalk_sglue+0x38>
 8009664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009668:	3301      	adds	r3, #1
 800966a:	d003      	beq.n	8009674 <_fwalk_sglue+0x38>
 800966c:	4629      	mov	r1, r5
 800966e:	4638      	mov	r0, r7
 8009670:	47c0      	blx	r8
 8009672:	4306      	orrs	r6, r0
 8009674:	3568      	adds	r5, #104	@ 0x68
 8009676:	e7e9      	b.n	800964c <_fwalk_sglue+0x10>

08009678 <siprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800967e:	b500      	push	{lr}
 8009680:	b09c      	sub	sp, #112	@ 0x70
 8009682:	ab1d      	add	r3, sp, #116	@ 0x74
 8009684:	9002      	str	r0, [sp, #8]
 8009686:	9006      	str	r0, [sp, #24]
 8009688:	9107      	str	r1, [sp, #28]
 800968a:	9104      	str	r1, [sp, #16]
 800968c:	4808      	ldr	r0, [pc, #32]	@ (80096b0 <siprintf+0x38>)
 800968e:	4909      	ldr	r1, [pc, #36]	@ (80096b4 <siprintf+0x3c>)
 8009690:	f853 2b04 	ldr.w	r2, [r3], #4
 8009694:	9105      	str	r1, [sp, #20]
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	a902      	add	r1, sp, #8
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	f001 fc6e 	bl	800af7c <_svfiprintf_r>
 80096a0:	2200      	movs	r2, #0
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	b01c      	add	sp, #112	@ 0x70
 80096a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ac:	b003      	add	sp, #12
 80096ae:	4770      	bx	lr
 80096b0:	20000030 	.word	0x20000030
 80096b4:	ffff0208 	.word	0xffff0208

080096b8 <__sread>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	460c      	mov	r4, r1
 80096bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c0:	f000 f8c2 	bl	8009848 <_read_r>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	bfab      	itete	ge
 80096c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096ca:	89a3      	ldrhlt	r3, [r4, #12]
 80096cc:	181b      	addge	r3, r3, r0
 80096ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096d2:	bfac      	ite	ge
 80096d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096d6:	81a3      	strhlt	r3, [r4, #12]
 80096d8:	bd10      	pop	{r4, pc}

080096da <__swrite>:
 80096da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096de:	461f      	mov	r7, r3
 80096e0:	898b      	ldrh	r3, [r1, #12]
 80096e2:	4605      	mov	r5, r0
 80096e4:	05db      	lsls	r3, r3, #23
 80096e6:	460c      	mov	r4, r1
 80096e8:	4616      	mov	r6, r2
 80096ea:	d505      	bpl.n	80096f8 <__swrite+0x1e>
 80096ec:	2302      	movs	r3, #2
 80096ee:	2200      	movs	r2, #0
 80096f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f4:	f000 f896 	bl	8009824 <_lseek_r>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	4632      	mov	r2, r6
 80096fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	4628      	mov	r0, r5
 8009704:	463b      	mov	r3, r7
 8009706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800970a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	f000 b8ad 	b.w	800986c <_write_r>

08009712 <__sseek>:
 8009712:	b510      	push	{r4, lr}
 8009714:	460c      	mov	r4, r1
 8009716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971a:	f000 f883 	bl	8009824 <_lseek_r>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	bf15      	itete	ne
 8009724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800972a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800972e:	81a3      	strheq	r3, [r4, #12]
 8009730:	bf18      	it	ne
 8009732:	81a3      	strhne	r3, [r4, #12]
 8009734:	bd10      	pop	{r4, pc}

08009736 <__sclose>:
 8009736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973a:	f000 b80d 	b.w	8009758 <_close_r>

0800973e <memset>:
 800973e:	4603      	mov	r3, r0
 8009740:	4402      	add	r2, r0
 8009742:	4293      	cmp	r3, r2
 8009744:	d100      	bne.n	8009748 <memset+0xa>
 8009746:	4770      	bx	lr
 8009748:	f803 1b01 	strb.w	r1, [r3], #1
 800974c:	e7f9      	b.n	8009742 <memset+0x4>
	...

08009750 <_localeconv_r>:
 8009750:	4800      	ldr	r0, [pc, #0]	@ (8009754 <_localeconv_r+0x4>)
 8009752:	4770      	bx	lr
 8009754:	20000170 	.word	0x20000170

08009758 <_close_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	2300      	movs	r3, #0
 800975c:	4d05      	ldr	r5, [pc, #20]	@ (8009774 <_close_r+0x1c>)
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f9 fc55 	bl	8003012 <_close>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_close_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_close_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	2000167c 	.word	0x2000167c

08009778 <_reclaim_reent>:
 8009778:	4b29      	ldr	r3, [pc, #164]	@ (8009820 <_reclaim_reent+0xa8>)
 800977a:	b570      	push	{r4, r5, r6, lr}
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4604      	mov	r4, r0
 8009780:	4283      	cmp	r3, r0
 8009782:	d04b      	beq.n	800981c <_reclaim_reent+0xa4>
 8009784:	69c3      	ldr	r3, [r0, #28]
 8009786:	b1ab      	cbz	r3, 80097b4 <_reclaim_reent+0x3c>
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	b16b      	cbz	r3, 80097a8 <_reclaim_reent+0x30>
 800978c:	2500      	movs	r5, #0
 800978e:	69e3      	ldr	r3, [r4, #28]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	5959      	ldr	r1, [r3, r5]
 8009794:	2900      	cmp	r1, #0
 8009796:	d13b      	bne.n	8009810 <_reclaim_reent+0x98>
 8009798:	3504      	adds	r5, #4
 800979a:	2d80      	cmp	r5, #128	@ 0x80
 800979c:	d1f7      	bne.n	800978e <_reclaim_reent+0x16>
 800979e:	69e3      	ldr	r3, [r4, #28]
 80097a0:	4620      	mov	r0, r4
 80097a2:	68d9      	ldr	r1, [r3, #12]
 80097a4:	f000 ff10 	bl	800a5c8 <_free_r>
 80097a8:	69e3      	ldr	r3, [r4, #28]
 80097aa:	6819      	ldr	r1, [r3, #0]
 80097ac:	b111      	cbz	r1, 80097b4 <_reclaim_reent+0x3c>
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 ff0a 	bl	800a5c8 <_free_r>
 80097b4:	6961      	ldr	r1, [r4, #20]
 80097b6:	b111      	cbz	r1, 80097be <_reclaim_reent+0x46>
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 ff05 	bl	800a5c8 <_free_r>
 80097be:	69e1      	ldr	r1, [r4, #28]
 80097c0:	b111      	cbz	r1, 80097c8 <_reclaim_reent+0x50>
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 ff00 	bl	800a5c8 <_free_r>
 80097c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097ca:	b111      	cbz	r1, 80097d2 <_reclaim_reent+0x5a>
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 fefb 	bl	800a5c8 <_free_r>
 80097d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097d4:	b111      	cbz	r1, 80097dc <_reclaim_reent+0x64>
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 fef6 	bl	800a5c8 <_free_r>
 80097dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80097de:	b111      	cbz	r1, 80097e6 <_reclaim_reent+0x6e>
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fef1 	bl	800a5c8 <_free_r>
 80097e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80097e8:	b111      	cbz	r1, 80097f0 <_reclaim_reent+0x78>
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 feec 	bl	800a5c8 <_free_r>
 80097f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80097f2:	b111      	cbz	r1, 80097fa <_reclaim_reent+0x82>
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 fee7 	bl	800a5c8 <_free_r>
 80097fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80097fc:	b111      	cbz	r1, 8009804 <_reclaim_reent+0x8c>
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 fee2 	bl	800a5c8 <_free_r>
 8009804:	6a23      	ldr	r3, [r4, #32]
 8009806:	b14b      	cbz	r3, 800981c <_reclaim_reent+0xa4>
 8009808:	4620      	mov	r0, r4
 800980a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800980e:	4718      	bx	r3
 8009810:	680e      	ldr	r6, [r1, #0]
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fed8 	bl	800a5c8 <_free_r>
 8009818:	4631      	mov	r1, r6
 800981a:	e7bb      	b.n	8009794 <_reclaim_reent+0x1c>
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	bf00      	nop
 8009820:	20000030 	.word	0x20000030

08009824 <_lseek_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	4611      	mov	r1, r2
 800982c:	2200      	movs	r2, #0
 800982e:	4d05      	ldr	r5, [pc, #20]	@ (8009844 <_lseek_r+0x20>)
 8009830:	602a      	str	r2, [r5, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	f7f9 fc11 	bl	800305a <_lseek>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_lseek_r+0x1e>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_lseek_r+0x1e>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	2000167c 	.word	0x2000167c

08009848 <_read_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	4611      	mov	r1, r2
 8009850:	2200      	movs	r2, #0
 8009852:	4d05      	ldr	r5, [pc, #20]	@ (8009868 <_read_r+0x20>)
 8009854:	602a      	str	r2, [r5, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	f7f9 fba2 	bl	8002fa0 <_read>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <_read_r+0x1e>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	b103      	cbz	r3, 8009866 <_read_r+0x1e>
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	2000167c 	.word	0x2000167c

0800986c <_write_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	2200      	movs	r2, #0
 8009876:	4d05      	ldr	r5, [pc, #20]	@ (800988c <_write_r+0x20>)
 8009878:	602a      	str	r2, [r5, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	f7f9 fbad 	bl	8002fda <_write>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_write_r+0x1e>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_write_r+0x1e>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	2000167c 	.word	0x2000167c

08009890 <__errno>:
 8009890:	4b01      	ldr	r3, [pc, #4]	@ (8009898 <__errno+0x8>)
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	20000030 	.word	0x20000030

0800989c <__libc_init_array>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	2600      	movs	r6, #0
 80098a0:	4d0c      	ldr	r5, [pc, #48]	@ (80098d4 <__libc_init_array+0x38>)
 80098a2:	4c0d      	ldr	r4, [pc, #52]	@ (80098d8 <__libc_init_array+0x3c>)
 80098a4:	1b64      	subs	r4, r4, r5
 80098a6:	10a4      	asrs	r4, r4, #2
 80098a8:	42a6      	cmp	r6, r4
 80098aa:	d109      	bne.n	80098c0 <__libc_init_array+0x24>
 80098ac:	f002 ff80 	bl	800c7b0 <_init>
 80098b0:	2600      	movs	r6, #0
 80098b2:	4d0a      	ldr	r5, [pc, #40]	@ (80098dc <__libc_init_array+0x40>)
 80098b4:	4c0a      	ldr	r4, [pc, #40]	@ (80098e0 <__libc_init_array+0x44>)
 80098b6:	1b64      	subs	r4, r4, r5
 80098b8:	10a4      	asrs	r4, r4, #2
 80098ba:	42a6      	cmp	r6, r4
 80098bc:	d105      	bne.n	80098ca <__libc_init_array+0x2e>
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c4:	4798      	blx	r3
 80098c6:	3601      	adds	r6, #1
 80098c8:	e7ee      	b.n	80098a8 <__libc_init_array+0xc>
 80098ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ce:	4798      	blx	r3
 80098d0:	3601      	adds	r6, #1
 80098d2:	e7f2      	b.n	80098ba <__libc_init_array+0x1e>
 80098d4:	0800cdd0 	.word	0x0800cdd0
 80098d8:	0800cdd0 	.word	0x0800cdd0
 80098dc:	0800cdd0 	.word	0x0800cdd0
 80098e0:	0800cdd4 	.word	0x0800cdd4

080098e4 <__retarget_lock_init_recursive>:
 80098e4:	4770      	bx	lr

080098e6 <__retarget_lock_acquire_recursive>:
 80098e6:	4770      	bx	lr

080098e8 <__retarget_lock_release_recursive>:
 80098e8:	4770      	bx	lr

080098ea <memchr>:
 80098ea:	4603      	mov	r3, r0
 80098ec:	b510      	push	{r4, lr}
 80098ee:	b2c9      	uxtb	r1, r1
 80098f0:	4402      	add	r2, r0
 80098f2:	4293      	cmp	r3, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	d101      	bne.n	80098fc <memchr+0x12>
 80098f8:	2000      	movs	r0, #0
 80098fa:	e003      	b.n	8009904 <memchr+0x1a>
 80098fc:	7804      	ldrb	r4, [r0, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	428c      	cmp	r4, r1
 8009902:	d1f6      	bne.n	80098f2 <memchr+0x8>
 8009904:	bd10      	pop	{r4, pc}

08009906 <memcpy>:
 8009906:	440a      	add	r2, r1
 8009908:	4291      	cmp	r1, r2
 800990a:	f100 33ff 	add.w	r3, r0, #4294967295
 800990e:	d100      	bne.n	8009912 <memcpy+0xc>
 8009910:	4770      	bx	lr
 8009912:	b510      	push	{r4, lr}
 8009914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009918:	4291      	cmp	r1, r2
 800991a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800991e:	d1f9      	bne.n	8009914 <memcpy+0xe>
 8009920:	bd10      	pop	{r4, pc}

08009922 <quorem>:
 8009922:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009926:	6903      	ldr	r3, [r0, #16]
 8009928:	690c      	ldr	r4, [r1, #16]
 800992a:	4607      	mov	r7, r0
 800992c:	42a3      	cmp	r3, r4
 800992e:	db7e      	blt.n	8009a2e <quorem+0x10c>
 8009930:	3c01      	subs	r4, #1
 8009932:	00a3      	lsls	r3, r4, #2
 8009934:	f100 0514 	add.w	r5, r0, #20
 8009938:	f101 0814 	add.w	r8, r1, #20
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800994c:	3301      	adds	r3, #1
 800994e:	429a      	cmp	r2, r3
 8009950:	fbb2 f6f3 	udiv	r6, r2, r3
 8009954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009958:	d32e      	bcc.n	80099b8 <quorem+0x96>
 800995a:	f04f 0a00 	mov.w	sl, #0
 800995e:	46c4      	mov	ip, r8
 8009960:	46ae      	mov	lr, r5
 8009962:	46d3      	mov	fp, sl
 8009964:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009968:	b298      	uxth	r0, r3
 800996a:	fb06 a000 	mla	r0, r6, r0, sl
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	0c02      	lsrs	r2, r0, #16
 8009972:	fb06 2303 	mla	r3, r6, r3, r2
 8009976:	f8de 2000 	ldr.w	r2, [lr]
 800997a:	b280      	uxth	r0, r0
 800997c:	b292      	uxth	r2, r2
 800997e:	1a12      	subs	r2, r2, r0
 8009980:	445a      	add	r2, fp
 8009982:	f8de 0000 	ldr.w	r0, [lr]
 8009986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800998a:	b29b      	uxth	r3, r3
 800998c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009990:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009994:	b292      	uxth	r2, r2
 8009996:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800999a:	45e1      	cmp	r9, ip
 800999c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80099a0:	f84e 2b04 	str.w	r2, [lr], #4
 80099a4:	d2de      	bcs.n	8009964 <quorem+0x42>
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	58eb      	ldr	r3, [r5, r3]
 80099aa:	b92b      	cbnz	r3, 80099b8 <quorem+0x96>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	3b04      	subs	r3, #4
 80099b0:	429d      	cmp	r5, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	d32f      	bcc.n	8009a16 <quorem+0xf4>
 80099b6:	613c      	str	r4, [r7, #16]
 80099b8:	4638      	mov	r0, r7
 80099ba:	f001 f97b 	bl	800acb4 <__mcmp>
 80099be:	2800      	cmp	r0, #0
 80099c0:	db25      	blt.n	8009a0e <quorem+0xec>
 80099c2:	4629      	mov	r1, r5
 80099c4:	2000      	movs	r0, #0
 80099c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80099ca:	f8d1 c000 	ldr.w	ip, [r1]
 80099ce:	fa1f fe82 	uxth.w	lr, r2
 80099d2:	fa1f f38c 	uxth.w	r3, ip
 80099d6:	eba3 030e 	sub.w	r3, r3, lr
 80099da:	4403      	add	r3, r0
 80099dc:	0c12      	lsrs	r2, r2, #16
 80099de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ec:	45c1      	cmp	r9, r8
 80099ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099f2:	f841 3b04 	str.w	r3, [r1], #4
 80099f6:	d2e6      	bcs.n	80099c6 <quorem+0xa4>
 80099f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a00:	b922      	cbnz	r2, 8009a0c <quorem+0xea>
 8009a02:	3b04      	subs	r3, #4
 8009a04:	429d      	cmp	r5, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	d30b      	bcc.n	8009a22 <quorem+0x100>
 8009a0a:	613c      	str	r4, [r7, #16]
 8009a0c:	3601      	adds	r6, #1
 8009a0e:	4630      	mov	r0, r6
 8009a10:	b003      	add	sp, #12
 8009a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a16:	6812      	ldr	r2, [r2, #0]
 8009a18:	3b04      	subs	r3, #4
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	d1cb      	bne.n	80099b6 <quorem+0x94>
 8009a1e:	3c01      	subs	r4, #1
 8009a20:	e7c6      	b.n	80099b0 <quorem+0x8e>
 8009a22:	6812      	ldr	r2, [r2, #0]
 8009a24:	3b04      	subs	r3, #4
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	d1ef      	bne.n	8009a0a <quorem+0xe8>
 8009a2a:	3c01      	subs	r4, #1
 8009a2c:	e7ea      	b.n	8009a04 <quorem+0xe2>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e7ee      	b.n	8009a10 <quorem+0xee>
 8009a32:	0000      	movs	r0, r0
 8009a34:	0000      	movs	r0, r0
	...

08009a38 <_dtoa_r>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	461d      	mov	r5, r3
 8009a40:	69c7      	ldr	r7, [r0, #28]
 8009a42:	b097      	sub	sp, #92	@ 0x5c
 8009a44:	4683      	mov	fp, r0
 8009a46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a4a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009a4c:	b97f      	cbnz	r7, 8009a6e <_dtoa_r+0x36>
 8009a4e:	2010      	movs	r0, #16
 8009a50:	f000 fe02 	bl	800a658 <malloc>
 8009a54:	4602      	mov	r2, r0
 8009a56:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a5a:	b920      	cbnz	r0, 8009a66 <_dtoa_r+0x2e>
 8009a5c:	21ef      	movs	r1, #239	@ 0xef
 8009a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8009d00 <_dtoa_r+0x2c8>)
 8009a60:	48a8      	ldr	r0, [pc, #672]	@ (8009d04 <_dtoa_r+0x2cc>)
 8009a62:	f001 fc59 	bl	800b318 <__assert_func>
 8009a66:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a6a:	6007      	str	r7, [r0, #0]
 8009a6c:	60c7      	str	r7, [r0, #12]
 8009a6e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a72:	6819      	ldr	r1, [r3, #0]
 8009a74:	b159      	cbz	r1, 8009a8e <_dtoa_r+0x56>
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4093      	lsls	r3, r2
 8009a7c:	604a      	str	r2, [r1, #4]
 8009a7e:	608b      	str	r3, [r1, #8]
 8009a80:	4658      	mov	r0, fp
 8009a82:	f000 fedf 	bl	800a844 <_Bfree>
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	1e2b      	subs	r3, r5, #0
 8009a90:	bfaf      	iteee	ge
 8009a92:	2300      	movge	r3, #0
 8009a94:	2201      	movlt	r2, #1
 8009a96:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a9a:	9303      	strlt	r3, [sp, #12]
 8009a9c:	bfa8      	it	ge
 8009a9e:	6033      	strge	r3, [r6, #0]
 8009aa0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009aa4:	4b98      	ldr	r3, [pc, #608]	@ (8009d08 <_dtoa_r+0x2d0>)
 8009aa6:	bfb8      	it	lt
 8009aa8:	6032      	strlt	r2, [r6, #0]
 8009aaa:	ea33 0308 	bics.w	r3, r3, r8
 8009aae:	d112      	bne.n	8009ad6 <_dtoa_r+0x9e>
 8009ab0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ab4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009abc:	4323      	orrs	r3, r4
 8009abe:	f000 8550 	beq.w	800a562 <_dtoa_r+0xb2a>
 8009ac2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ac4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009d0c <_dtoa_r+0x2d4>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8552 	beq.w	800a572 <_dtoa_r+0xb3a>
 8009ace:	f10a 0303 	add.w	r3, sl, #3
 8009ad2:	f000 bd4c 	b.w	800a56e <_dtoa_r+0xb36>
 8009ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ada:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f7f7 f813 	bl	8000b10 <__aeabi_dcmpeq>
 8009aea:	4607      	mov	r7, r0
 8009aec:	b158      	cbz	r0, 8009b06 <_dtoa_r+0xce>
 8009aee:	2301      	movs	r3, #1
 8009af0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009af6:	b113      	cbz	r3, 8009afe <_dtoa_r+0xc6>
 8009af8:	4b85      	ldr	r3, [pc, #532]	@ (8009d10 <_dtoa_r+0x2d8>)
 8009afa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009d14 <_dtoa_r+0x2dc>
 8009b02:	f000 bd36 	b.w	800a572 <_dtoa_r+0xb3a>
 8009b06:	ab14      	add	r3, sp, #80	@ 0x50
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	ab15      	add	r3, sp, #84	@ 0x54
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4658      	mov	r0, fp
 8009b10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b14:	f001 f97e 	bl	800ae14 <__d2b>
 8009b18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009b1c:	4681      	mov	r9, r0
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d077      	beq.n	8009c12 <_dtoa_r+0x1da>
 8009b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b38:	9712      	str	r7, [sp, #72]	@ 0x48
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4b76      	ldr	r3, [pc, #472]	@ (8009d18 <_dtoa_r+0x2e0>)
 8009b40:	f7f6 fbc6 	bl	80002d0 <__aeabi_dsub>
 8009b44:	a368      	add	r3, pc, #416	@ (adr r3, 8009ce8 <_dtoa_r+0x2b0>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f7f6 fd79 	bl	8000640 <__aeabi_dmul>
 8009b4e:	a368      	add	r3, pc, #416	@ (adr r3, 8009cf0 <_dtoa_r+0x2b8>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fbbe 	bl	80002d4 <__adddf3>
 8009b58:	4604      	mov	r4, r0
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	f7f6 fd05 	bl	800056c <__aeabi_i2d>
 8009b62:	a365      	add	r3, pc, #404	@ (adr r3, 8009cf8 <_dtoa_r+0x2c0>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fd6a 	bl	8000640 <__aeabi_dmul>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4620      	mov	r0, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7f6 fbae 	bl	80002d4 <__adddf3>
 8009b78:	4604      	mov	r4, r0
 8009b7a:	460d      	mov	r5, r1
 8009b7c:	f7f7 f810 	bl	8000ba0 <__aeabi_d2iz>
 8009b80:	2200      	movs	r2, #0
 8009b82:	4607      	mov	r7, r0
 8009b84:	2300      	movs	r3, #0
 8009b86:	4620      	mov	r0, r4
 8009b88:	4629      	mov	r1, r5
 8009b8a:	f7f6 ffcb 	bl	8000b24 <__aeabi_dcmplt>
 8009b8e:	b140      	cbz	r0, 8009ba2 <_dtoa_r+0x16a>
 8009b90:	4638      	mov	r0, r7
 8009b92:	f7f6 fceb 	bl	800056c <__aeabi_i2d>
 8009b96:	4622      	mov	r2, r4
 8009b98:	462b      	mov	r3, r5
 8009b9a:	f7f6 ffb9 	bl	8000b10 <__aeabi_dcmpeq>
 8009b9e:	b900      	cbnz	r0, 8009ba2 <_dtoa_r+0x16a>
 8009ba0:	3f01      	subs	r7, #1
 8009ba2:	2f16      	cmp	r7, #22
 8009ba4:	d853      	bhi.n	8009c4e <_dtoa_r+0x216>
 8009ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009baa:	4b5c      	ldr	r3, [pc, #368]	@ (8009d1c <_dtoa_r+0x2e4>)
 8009bac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f7f6 ffb6 	bl	8000b24 <__aeabi_dcmplt>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d04a      	beq.n	8009c52 <_dtoa_r+0x21a>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	3f01      	subs	r7, #1
 8009bc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bc4:	1b9b      	subs	r3, r3, r6
 8009bc6:	1e5a      	subs	r2, r3, #1
 8009bc8:	bf46      	itte	mi
 8009bca:	f1c3 0801 	rsbmi	r8, r3, #1
 8009bce:	2300      	movmi	r3, #0
 8009bd0:	f04f 0800 	movpl.w	r8, #0
 8009bd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bd6:	bf48      	it	mi
 8009bd8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009bda:	2f00      	cmp	r7, #0
 8009bdc:	db3b      	blt.n	8009c56 <_dtoa_r+0x21e>
 8009bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be0:	970e      	str	r7, [sp, #56]	@ 0x38
 8009be2:	443b      	add	r3, r7
 8009be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009be6:	2300      	movs	r3, #0
 8009be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	d866      	bhi.n	8009cbe <_dtoa_r+0x286>
 8009bf0:	2b05      	cmp	r3, #5
 8009bf2:	bfc4      	itt	gt
 8009bf4:	3b04      	subgt	r3, #4
 8009bf6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009bf8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bfa:	bfc8      	it	gt
 8009bfc:	2400      	movgt	r4, #0
 8009bfe:	f1a3 0302 	sub.w	r3, r3, #2
 8009c02:	bfd8      	it	le
 8009c04:	2401      	movle	r4, #1
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d864      	bhi.n	8009cd4 <_dtoa_r+0x29c>
 8009c0a:	e8df f003 	tbb	[pc, r3]
 8009c0e:	382b      	.short	0x382b
 8009c10:	5636      	.short	0x5636
 8009c12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009c16:	441e      	add	r6, r3
 8009c18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	bfc1      	itttt	gt
 8009c20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009c24:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009c2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c30:	bfd6      	itet	le
 8009c32:	f1c3 0320 	rsble	r3, r3, #32
 8009c36:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c3a:	fa04 f003 	lslle.w	r0, r4, r3
 8009c3e:	f7f6 fc85 	bl	800054c <__aeabi_ui2d>
 8009c42:	2201      	movs	r2, #1
 8009c44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c48:	3e01      	subs	r6, #1
 8009c4a:	9212      	str	r2, [sp, #72]	@ 0x48
 8009c4c:	e775      	b.n	8009b3a <_dtoa_r+0x102>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e7b6      	b.n	8009bc0 <_dtoa_r+0x188>
 8009c52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009c54:	e7b5      	b.n	8009bc2 <_dtoa_r+0x18a>
 8009c56:	427b      	negs	r3, r7
 8009c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	eba8 0807 	sub.w	r8, r8, r7
 8009c60:	930e      	str	r3, [sp, #56]	@ 0x38
 8009c62:	e7c2      	b.n	8009bea <_dtoa_r+0x1b2>
 8009c64:	2300      	movs	r3, #0
 8009c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	dc35      	bgt.n	8009cda <_dtoa_r+0x2a2>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	461a      	mov	r2, r3
 8009c72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009c76:	9221      	str	r2, [sp, #132]	@ 0x84
 8009c78:	e00b      	b.n	8009c92 <_dtoa_r+0x25a>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e7f3      	b.n	8009c66 <_dtoa_r+0x22e>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	9308      	str	r3, [sp, #32]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	bfb8      	it	lt
 8009c90:	2301      	movlt	r3, #1
 8009c92:	2100      	movs	r1, #0
 8009c94:	2204      	movs	r2, #4
 8009c96:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c9a:	f102 0514 	add.w	r5, r2, #20
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	d91f      	bls.n	8009ce2 <_dtoa_r+0x2aa>
 8009ca2:	6041      	str	r1, [r0, #4]
 8009ca4:	4658      	mov	r0, fp
 8009ca6:	f000 fd8d 	bl	800a7c4 <_Balloc>
 8009caa:	4682      	mov	sl, r0
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d139      	bne.n	8009d24 <_dtoa_r+0x2ec>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	f240 11af 	movw	r1, #431	@ 0x1af
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d20 <_dtoa_r+0x2e8>)
 8009cb8:	e6d2      	b.n	8009a60 <_dtoa_r+0x28>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7e0      	b.n	8009c80 <_dtoa_r+0x248>
 8009cbe:	2401      	movs	r4, #1
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009cc4:	9320      	str	r3, [sp, #128]	@ 0x80
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	2200      	movs	r2, #0
 8009ccc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009cd0:	2312      	movs	r3, #18
 8009cd2:	e7d0      	b.n	8009c76 <_dtoa_r+0x23e>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cd8:	e7f5      	b.n	8009cc6 <_dtoa_r+0x28e>
 8009cda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ce0:	e7d7      	b.n	8009c92 <_dtoa_r+0x25a>
 8009ce2:	3101      	adds	r1, #1
 8009ce4:	0052      	lsls	r2, r2, #1
 8009ce6:	e7d8      	b.n	8009c9a <_dtoa_r+0x262>
 8009ce8:	636f4361 	.word	0x636f4361
 8009cec:	3fd287a7 	.word	0x3fd287a7
 8009cf0:	8b60c8b3 	.word	0x8b60c8b3
 8009cf4:	3fc68a28 	.word	0x3fc68a28
 8009cf8:	509f79fb 	.word	0x509f79fb
 8009cfc:	3fd34413 	.word	0x3fd34413
 8009d00:	0800ca6b 	.word	0x0800ca6b
 8009d04:	0800ca82 	.word	0x0800ca82
 8009d08:	7ff00000 	.word	0x7ff00000
 8009d0c:	0800ca67 	.word	0x0800ca67
 8009d10:	0800ca3b 	.word	0x0800ca3b
 8009d14:	0800ca3a 	.word	0x0800ca3a
 8009d18:	3ff80000 	.word	0x3ff80000
 8009d1c:	0800cb78 	.word	0x0800cb78
 8009d20:	0800cada 	.word	0x0800cada
 8009d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d28:	6018      	str	r0, [r3, #0]
 8009d2a:	9b07      	ldr	r3, [sp, #28]
 8009d2c:	2b0e      	cmp	r3, #14
 8009d2e:	f200 80a4 	bhi.w	8009e7a <_dtoa_r+0x442>
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	f000 80a1 	beq.w	8009e7a <_dtoa_r+0x442>
 8009d38:	2f00      	cmp	r7, #0
 8009d3a:	dd33      	ble.n	8009da4 <_dtoa_r+0x36c>
 8009d3c:	4b86      	ldr	r3, [pc, #536]	@ (8009f58 <_dtoa_r+0x520>)
 8009d3e:	f007 020f 	and.w	r2, r7, #15
 8009d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d46:	05f8      	lsls	r0, r7, #23
 8009d48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d54:	d516      	bpl.n	8009d84 <_dtoa_r+0x34c>
 8009d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d5a:	4b80      	ldr	r3, [pc, #512]	@ (8009f5c <_dtoa_r+0x524>)
 8009d5c:	2603      	movs	r6, #3
 8009d5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d62:	f7f6 fd97 	bl	8000894 <__aeabi_ddiv>
 8009d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6a:	f004 040f 	and.w	r4, r4, #15
 8009d6e:	4d7b      	ldr	r5, [pc, #492]	@ (8009f5c <_dtoa_r+0x524>)
 8009d70:	b954      	cbnz	r4, 8009d88 <_dtoa_r+0x350>
 8009d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7a:	f7f6 fd8b 	bl	8000894 <__aeabi_ddiv>
 8009d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d82:	e028      	b.n	8009dd6 <_dtoa_r+0x39e>
 8009d84:	2602      	movs	r6, #2
 8009d86:	e7f2      	b.n	8009d6e <_dtoa_r+0x336>
 8009d88:	07e1      	lsls	r1, r4, #31
 8009d8a:	d508      	bpl.n	8009d9e <_dtoa_r+0x366>
 8009d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d94:	f7f6 fc54 	bl	8000640 <__aeabi_dmul>
 8009d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d9c:	3601      	adds	r6, #1
 8009d9e:	1064      	asrs	r4, r4, #1
 8009da0:	3508      	adds	r5, #8
 8009da2:	e7e5      	b.n	8009d70 <_dtoa_r+0x338>
 8009da4:	f000 80d2 	beq.w	8009f4c <_dtoa_r+0x514>
 8009da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dac:	427c      	negs	r4, r7
 8009dae:	4b6a      	ldr	r3, [pc, #424]	@ (8009f58 <_dtoa_r+0x520>)
 8009db0:	f004 020f 	and.w	r2, r4, #15
 8009db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f7f6 fc40 	bl	8000640 <__aeabi_dmul>
 8009dc0:	2602      	movs	r6, #2
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	4d64      	ldr	r5, [pc, #400]	@ (8009f5c <_dtoa_r+0x524>)
 8009dca:	1124      	asrs	r4, r4, #4
 8009dcc:	2c00      	cmp	r4, #0
 8009dce:	f040 80b2 	bne.w	8009f36 <_dtoa_r+0x4fe>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1d3      	bne.n	8009d7e <_dtoa_r+0x346>
 8009dd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 80b7 	beq.w	8009f50 <_dtoa_r+0x518>
 8009de2:	2200      	movs	r2, #0
 8009de4:	4620      	mov	r0, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	4b5d      	ldr	r3, [pc, #372]	@ (8009f60 <_dtoa_r+0x528>)
 8009dea:	f7f6 fe9b 	bl	8000b24 <__aeabi_dcmplt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f000 80ae 	beq.w	8009f50 <_dtoa_r+0x518>
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80aa 	beq.w	8009f50 <_dtoa_r+0x518>
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dd37      	ble.n	8009e72 <_dtoa_r+0x43a>
 8009e02:	1e7b      	subs	r3, r7, #1
 8009e04:	4620      	mov	r0, r4
 8009e06:	9304      	str	r3, [sp, #16]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	4b55      	ldr	r3, [pc, #340]	@ (8009f64 <_dtoa_r+0x52c>)
 8009e0e:	f7f6 fc17 	bl	8000640 <__aeabi_dmul>
 8009e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e16:	9c08      	ldr	r4, [sp, #32]
 8009e18:	3601      	adds	r6, #1
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7f6 fba6 	bl	800056c <__aeabi_i2d>
 8009e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e24:	f7f6 fc0c 	bl	8000640 <__aeabi_dmul>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f68 <_dtoa_r+0x530>)
 8009e2c:	f7f6 fa52 	bl	80002d4 <__adddf3>
 8009e30:	4605      	mov	r5, r0
 8009e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e36:	2c00      	cmp	r4, #0
 8009e38:	f040 809a 	bne.w	8009f70 <_dtoa_r+0x538>
 8009e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e40:	2200      	movs	r2, #0
 8009e42:	4b4a      	ldr	r3, [pc, #296]	@ (8009f6c <_dtoa_r+0x534>)
 8009e44:	f7f6 fa44 	bl	80002d0 <__aeabi_dsub>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e50:	462a      	mov	r2, r5
 8009e52:	4633      	mov	r3, r6
 8009e54:	f7f6 fe84 	bl	8000b60 <__aeabi_dcmpgt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f040 828e 	bne.w	800a37a <_dtoa_r+0x942>
 8009e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e62:	462a      	mov	r2, r5
 8009e64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e68:	f7f6 fe5c 	bl	8000b24 <__aeabi_dcmplt>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f040 8127 	bne.w	800a0c0 <_dtoa_r+0x688>
 8009e72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f2c0 8163 	blt.w	800a148 <_dtoa_r+0x710>
 8009e82:	2f0e      	cmp	r7, #14
 8009e84:	f300 8160 	bgt.w	800a148 <_dtoa_r+0x710>
 8009e88:	4b33      	ldr	r3, [pc, #204]	@ (8009f58 <_dtoa_r+0x520>)
 8009e8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009e96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	da03      	bge.n	8009ea4 <_dtoa_r+0x46c>
 8009e9c:	9b07      	ldr	r3, [sp, #28]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f340 8100 	ble.w	800a0a4 <_dtoa_r+0x66c>
 8009ea4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ea8:	4656      	mov	r6, sl
 8009eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fcef 	bl	8000894 <__aeabi_ddiv>
 8009eb6:	f7f6 fe73 	bl	8000ba0 <__aeabi_d2iz>
 8009eba:	4680      	mov	r8, r0
 8009ebc:	f7f6 fb56 	bl	800056c <__aeabi_i2d>
 8009ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec4:	f7f6 fbbc 	bl	8000640 <__aeabi_dmul>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7f6 f9fe 	bl	80002d0 <__aeabi_dsub>
 8009ed4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ed8:	9d07      	ldr	r5, [sp, #28]
 8009eda:	f806 4b01 	strb.w	r4, [r6], #1
 8009ede:	eba6 040a 	sub.w	r4, r6, sl
 8009ee2:	42a5      	cmp	r5, r4
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	f040 8116 	bne.w	800a118 <_dtoa_r+0x6e0>
 8009eec:	f7f6 f9f2 	bl	80002d4 <__adddf3>
 8009ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	f7f6 fe32 	bl	8000b60 <__aeabi_dcmpgt>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f040 80f8 	bne.w	800a0f2 <_dtoa_r+0x6ba>
 8009f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f06:	4620      	mov	r0, r4
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7f6 fe01 	bl	8000b10 <__aeabi_dcmpeq>
 8009f0e:	b118      	cbz	r0, 8009f18 <_dtoa_r+0x4e0>
 8009f10:	f018 0f01 	tst.w	r8, #1
 8009f14:	f040 80ed 	bne.w	800a0f2 <_dtoa_r+0x6ba>
 8009f18:	4649      	mov	r1, r9
 8009f1a:	4658      	mov	r0, fp
 8009f1c:	f000 fc92 	bl	800a844 <_Bfree>
 8009f20:	2300      	movs	r3, #0
 8009f22:	7033      	strb	r3, [r6, #0]
 8009f24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f26:	3701      	adds	r7, #1
 8009f28:	601f      	str	r7, [r3, #0]
 8009f2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8320 	beq.w	800a572 <_dtoa_r+0xb3a>
 8009f32:	601e      	str	r6, [r3, #0]
 8009f34:	e31d      	b.n	800a572 <_dtoa_r+0xb3a>
 8009f36:	07e2      	lsls	r2, r4, #31
 8009f38:	d505      	bpl.n	8009f46 <_dtoa_r+0x50e>
 8009f3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f3e:	f7f6 fb7f 	bl	8000640 <__aeabi_dmul>
 8009f42:	2301      	movs	r3, #1
 8009f44:	3601      	adds	r6, #1
 8009f46:	1064      	asrs	r4, r4, #1
 8009f48:	3508      	adds	r5, #8
 8009f4a:	e73f      	b.n	8009dcc <_dtoa_r+0x394>
 8009f4c:	2602      	movs	r6, #2
 8009f4e:	e742      	b.n	8009dd6 <_dtoa_r+0x39e>
 8009f50:	9c07      	ldr	r4, [sp, #28]
 8009f52:	9704      	str	r7, [sp, #16]
 8009f54:	e761      	b.n	8009e1a <_dtoa_r+0x3e2>
 8009f56:	bf00      	nop
 8009f58:	0800cb78 	.word	0x0800cb78
 8009f5c:	0800cb50 	.word	0x0800cb50
 8009f60:	3ff00000 	.word	0x3ff00000
 8009f64:	40240000 	.word	0x40240000
 8009f68:	401c0000 	.word	0x401c0000
 8009f6c:	40140000 	.word	0x40140000
 8009f70:	4b70      	ldr	r3, [pc, #448]	@ (800a134 <_dtoa_r+0x6fc>)
 8009f72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f7c:	4454      	add	r4, sl
 8009f7e:	2900      	cmp	r1, #0
 8009f80:	d045      	beq.n	800a00e <_dtoa_r+0x5d6>
 8009f82:	2000      	movs	r0, #0
 8009f84:	496c      	ldr	r1, [pc, #432]	@ (800a138 <_dtoa_r+0x700>)
 8009f86:	f7f6 fc85 	bl	8000894 <__aeabi_ddiv>
 8009f8a:	4633      	mov	r3, r6
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	f7f6 f99f 	bl	80002d0 <__aeabi_dsub>
 8009f92:	4656      	mov	r6, sl
 8009f94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9c:	f7f6 fe00 	bl	8000ba0 <__aeabi_d2iz>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	f7f6 fae3 	bl	800056c <__aeabi_i2d>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fae:	f7f6 f98f 	bl	80002d0 <__aeabi_dsub>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	3530      	adds	r5, #48	@ 0x30
 8009fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fc0:	f806 5b01 	strb.w	r5, [r6], #1
 8009fc4:	f7f6 fdae 	bl	8000b24 <__aeabi_dcmplt>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d163      	bne.n	800a094 <_dtoa_r+0x65c>
 8009fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	495a      	ldr	r1, [pc, #360]	@ (800a13c <_dtoa_r+0x704>)
 8009fd4:	f7f6 f97c 	bl	80002d0 <__aeabi_dsub>
 8009fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fdc:	f7f6 fda2 	bl	8000b24 <__aeabi_dcmplt>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	f040 8087 	bne.w	800a0f4 <_dtoa_r+0x6bc>
 8009fe6:	42a6      	cmp	r6, r4
 8009fe8:	f43f af43 	beq.w	8009e72 <_dtoa_r+0x43a>
 8009fec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	4b53      	ldr	r3, [pc, #332]	@ (800a140 <_dtoa_r+0x708>)
 8009ff4:	f7f6 fb24 	bl	8000640 <__aeabi_dmul>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a002:	4b4f      	ldr	r3, [pc, #316]	@ (800a140 <_dtoa_r+0x708>)
 800a004:	f7f6 fb1c 	bl	8000640 <__aeabi_dmul>
 800a008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00c:	e7c4      	b.n	8009f98 <_dtoa_r+0x560>
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	f7f6 fb15 	bl	8000640 <__aeabi_dmul>
 800a016:	4656      	mov	r6, sl
 800a018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a01c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a022:	f7f6 fdbd 	bl	8000ba0 <__aeabi_d2iz>
 800a026:	4605      	mov	r5, r0
 800a028:	f7f6 faa0 	bl	800056c <__aeabi_i2d>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a034:	f7f6 f94c 	bl	80002d0 <__aeabi_dsub>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	3530      	adds	r5, #48	@ 0x30
 800a03e:	f806 5b01 	strb.w	r5, [r6], #1
 800a042:	42a6      	cmp	r6, r4
 800a044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	d124      	bne.n	800a098 <_dtoa_r+0x660>
 800a04e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a052:	4b39      	ldr	r3, [pc, #228]	@ (800a138 <_dtoa_r+0x700>)
 800a054:	f7f6 f93e 	bl	80002d4 <__adddf3>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a060:	f7f6 fd7e 	bl	8000b60 <__aeabi_dcmpgt>
 800a064:	2800      	cmp	r0, #0
 800a066:	d145      	bne.n	800a0f4 <_dtoa_r+0x6bc>
 800a068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a06c:	2000      	movs	r0, #0
 800a06e:	4932      	ldr	r1, [pc, #200]	@ (800a138 <_dtoa_r+0x700>)
 800a070:	f7f6 f92e 	bl	80002d0 <__aeabi_dsub>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07c:	f7f6 fd52 	bl	8000b24 <__aeabi_dcmplt>
 800a080:	2800      	cmp	r0, #0
 800a082:	f43f aef6 	beq.w	8009e72 <_dtoa_r+0x43a>
 800a086:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a088:	1e73      	subs	r3, r6, #1
 800a08a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a08c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a090:	2b30      	cmp	r3, #48	@ 0x30
 800a092:	d0f8      	beq.n	800a086 <_dtoa_r+0x64e>
 800a094:	9f04      	ldr	r7, [sp, #16]
 800a096:	e73f      	b.n	8009f18 <_dtoa_r+0x4e0>
 800a098:	4b29      	ldr	r3, [pc, #164]	@ (800a140 <_dtoa_r+0x708>)
 800a09a:	f7f6 fad1 	bl	8000640 <__aeabi_dmul>
 800a09e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a2:	e7bc      	b.n	800a01e <_dtoa_r+0x5e6>
 800a0a4:	d10c      	bne.n	800a0c0 <_dtoa_r+0x688>
 800a0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	4b25      	ldr	r3, [pc, #148]	@ (800a144 <_dtoa_r+0x70c>)
 800a0ae:	f7f6 fac7 	bl	8000640 <__aeabi_dmul>
 800a0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0b6:	f7f6 fd49 	bl	8000b4c <__aeabi_dcmpge>
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	f000 815b 	beq.w	800a376 <_dtoa_r+0x93e>
 800a0c0:	2400      	movs	r4, #0
 800a0c2:	4625      	mov	r5, r4
 800a0c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0c6:	4656      	mov	r6, sl
 800a0c8:	43db      	mvns	r3, r3
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	2700      	movs	r7, #0
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4658      	mov	r0, fp
 800a0d2:	f000 fbb7 	bl	800a844 <_Bfree>
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	d0dc      	beq.n	800a094 <_dtoa_r+0x65c>
 800a0da:	b12f      	cbz	r7, 800a0e8 <_dtoa_r+0x6b0>
 800a0dc:	42af      	cmp	r7, r5
 800a0de:	d003      	beq.n	800a0e8 <_dtoa_r+0x6b0>
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	f000 fbae 	bl	800a844 <_Bfree>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4658      	mov	r0, fp
 800a0ec:	f000 fbaa 	bl	800a844 <_Bfree>
 800a0f0:	e7d0      	b.n	800a094 <_dtoa_r+0x65c>
 800a0f2:	9704      	str	r7, [sp, #16]
 800a0f4:	4633      	mov	r3, r6
 800a0f6:	461e      	mov	r6, r3
 800a0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0fc:	2a39      	cmp	r2, #57	@ 0x39
 800a0fe:	d107      	bne.n	800a110 <_dtoa_r+0x6d8>
 800a100:	459a      	cmp	sl, r3
 800a102:	d1f8      	bne.n	800a0f6 <_dtoa_r+0x6be>
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	3201      	adds	r2, #1
 800a108:	9204      	str	r2, [sp, #16]
 800a10a:	2230      	movs	r2, #48	@ 0x30
 800a10c:	f88a 2000 	strb.w	r2, [sl]
 800a110:	781a      	ldrb	r2, [r3, #0]
 800a112:	3201      	adds	r2, #1
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e7bd      	b.n	800a094 <_dtoa_r+0x65c>
 800a118:	2200      	movs	r2, #0
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <_dtoa_r+0x708>)
 800a11c:	f7f6 fa90 	bl	8000640 <__aeabi_dmul>
 800a120:	2200      	movs	r2, #0
 800a122:	2300      	movs	r3, #0
 800a124:	4604      	mov	r4, r0
 800a126:	460d      	mov	r5, r1
 800a128:	f7f6 fcf2 	bl	8000b10 <__aeabi_dcmpeq>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	f43f aebc 	beq.w	8009eaa <_dtoa_r+0x472>
 800a132:	e6f1      	b.n	8009f18 <_dtoa_r+0x4e0>
 800a134:	0800cb78 	.word	0x0800cb78
 800a138:	3fe00000 	.word	0x3fe00000
 800a13c:	3ff00000 	.word	0x3ff00000
 800a140:	40240000 	.word	0x40240000
 800a144:	40140000 	.word	0x40140000
 800a148:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	f000 80db 	beq.w	800a306 <_dtoa_r+0x8ce>
 800a150:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a152:	2a01      	cmp	r2, #1
 800a154:	f300 80bf 	bgt.w	800a2d6 <_dtoa_r+0x89e>
 800a158:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	f000 80b7 	beq.w	800a2ce <_dtoa_r+0x896>
 800a160:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a164:	4646      	mov	r6, r8
 800a166:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a168:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a16a:	2101      	movs	r1, #1
 800a16c:	441a      	add	r2, r3
 800a16e:	4658      	mov	r0, fp
 800a170:	4498      	add	r8, r3
 800a172:	9209      	str	r2, [sp, #36]	@ 0x24
 800a174:	f000 fc1a 	bl	800a9ac <__i2b>
 800a178:	4605      	mov	r5, r0
 800a17a:	b15e      	cbz	r6, 800a194 <_dtoa_r+0x75c>
 800a17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dd08      	ble.n	800a194 <_dtoa_r+0x75c>
 800a182:	42b3      	cmp	r3, r6
 800a184:	bfa8      	it	ge
 800a186:	4633      	movge	r3, r6
 800a188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a18a:	eba8 0803 	sub.w	r8, r8, r3
 800a18e:	1af6      	subs	r6, r6, r3
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	9309      	str	r3, [sp, #36]	@ 0x24
 800a194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a196:	b1f3      	cbz	r3, 800a1d6 <_dtoa_r+0x79e>
 800a198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80b7 	beq.w	800a30e <_dtoa_r+0x8d6>
 800a1a0:	b18c      	cbz	r4, 800a1c6 <_dtoa_r+0x78e>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f000 fcbe 	bl	800ab28 <__pow5mult>
 800a1ac:	464a      	mov	r2, r9
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	4658      	mov	r0, fp
 800a1b4:	f000 fc10 	bl	800a9d8 <__multiply>
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	9004      	str	r0, [sp, #16]
 800a1bc:	4658      	mov	r0, fp
 800a1be:	f000 fb41 	bl	800a844 <_Bfree>
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	4699      	mov	r9, r3
 800a1c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1c8:	1b1a      	subs	r2, r3, r4
 800a1ca:	d004      	beq.n	800a1d6 <_dtoa_r+0x79e>
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	f000 fcaa 	bl	800ab28 <__pow5mult>
 800a1d4:	4681      	mov	r9, r0
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	4658      	mov	r0, fp
 800a1da:	f000 fbe7 	bl	800a9ac <__i2b>
 800a1de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 81c9 	beq.w	800a57a <_dtoa_r+0xb42>
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	4658      	mov	r0, fp
 800a1ee:	f000 fc9b 	bl	800ab28 <__pow5mult>
 800a1f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	f300 808f 	bgt.w	800a31a <_dtoa_r+0x8e2>
 800a1fc:	9b02      	ldr	r3, [sp, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f040 8087 	bne.w	800a312 <_dtoa_r+0x8da>
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f040 8083 	bne.w	800a316 <_dtoa_r+0x8de>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a216:	0d1b      	lsrs	r3, r3, #20
 800a218:	051b      	lsls	r3, r3, #20
 800a21a:	b12b      	cbz	r3, 800a228 <_dtoa_r+0x7f0>
 800a21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21e:	f108 0801 	add.w	r8, r8, #1
 800a222:	3301      	adds	r3, #1
 800a224:	9309      	str	r3, [sp, #36]	@ 0x24
 800a226:	2301      	movs	r3, #1
 800a228:	930a      	str	r3, [sp, #40]	@ 0x28
 800a22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 81aa 	beq.w	800a586 <_dtoa_r+0xb4e>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a238:	6918      	ldr	r0, [r3, #16]
 800a23a:	f000 fb6b 	bl	800a914 <__hi0bits>
 800a23e:	f1c0 0020 	rsb	r0, r0, #32
 800a242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a244:	4418      	add	r0, r3
 800a246:	f010 001f 	ands.w	r0, r0, #31
 800a24a:	d071      	beq.n	800a330 <_dtoa_r+0x8f8>
 800a24c:	f1c0 0320 	rsb	r3, r0, #32
 800a250:	2b04      	cmp	r3, #4
 800a252:	dd65      	ble.n	800a320 <_dtoa_r+0x8e8>
 800a254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a256:	f1c0 001c 	rsb	r0, r0, #28
 800a25a:	4403      	add	r3, r0
 800a25c:	4480      	add	r8, r0
 800a25e:	4406      	add	r6, r0
 800a260:	9309      	str	r3, [sp, #36]	@ 0x24
 800a262:	f1b8 0f00 	cmp.w	r8, #0
 800a266:	dd05      	ble.n	800a274 <_dtoa_r+0x83c>
 800a268:	4649      	mov	r1, r9
 800a26a:	4642      	mov	r2, r8
 800a26c:	4658      	mov	r0, fp
 800a26e:	f000 fcb5 	bl	800abdc <__lshift>
 800a272:	4681      	mov	r9, r0
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	dd05      	ble.n	800a286 <_dtoa_r+0x84e>
 800a27a:	4621      	mov	r1, r4
 800a27c:	461a      	mov	r2, r3
 800a27e:	4658      	mov	r0, fp
 800a280:	f000 fcac 	bl	800abdc <__lshift>
 800a284:	4604      	mov	r4, r0
 800a286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d053      	beq.n	800a334 <_dtoa_r+0x8fc>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4648      	mov	r0, r9
 800a290:	f000 fd10 	bl	800acb4 <__mcmp>
 800a294:	2800      	cmp	r0, #0
 800a296:	da4d      	bge.n	800a334 <_dtoa_r+0x8fc>
 800a298:	1e7b      	subs	r3, r7, #1
 800a29a:	4649      	mov	r1, r9
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	220a      	movs	r2, #10
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4658      	mov	r0, fp
 800a2a4:	f000 faf0 	bl	800a888 <__multadd>
 800a2a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2aa:	4681      	mov	r9, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 816c 	beq.w	800a58a <_dtoa_r+0xb52>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	220a      	movs	r2, #10
 800a2b8:	4658      	mov	r0, fp
 800a2ba:	f000 fae5 	bl	800a888 <__multadd>
 800a2be:	9b08      	ldr	r3, [sp, #32]
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dc61      	bgt.n	800a38a <_dtoa_r+0x952>
 800a2c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	dc3b      	bgt.n	800a344 <_dtoa_r+0x90c>
 800a2cc:	e05d      	b.n	800a38a <_dtoa_r+0x952>
 800a2ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a2d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a2d4:	e746      	b.n	800a164 <_dtoa_r+0x72c>
 800a2d6:	9b07      	ldr	r3, [sp, #28]
 800a2d8:	1e5c      	subs	r4, r3, #1
 800a2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2dc:	42a3      	cmp	r3, r4
 800a2de:	bfbf      	itttt	lt
 800a2e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a2e4:	1ae3      	sublt	r3, r4, r3
 800a2e6:	18d2      	addlt	r2, r2, r3
 800a2e8:	bfa8      	it	ge
 800a2ea:	1b1c      	subge	r4, r3, r4
 800a2ec:	9b07      	ldr	r3, [sp, #28]
 800a2ee:	bfbe      	ittt	lt
 800a2f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a2f4:	2400      	movlt	r4, #0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bfb5      	itete	lt
 800a2fa:	eba8 0603 	sublt.w	r6, r8, r3
 800a2fe:	4646      	movge	r6, r8
 800a300:	2300      	movlt	r3, #0
 800a302:	9b07      	ldrge	r3, [sp, #28]
 800a304:	e730      	b.n	800a168 <_dtoa_r+0x730>
 800a306:	4646      	mov	r6, r8
 800a308:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a30a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a30c:	e735      	b.n	800a17a <_dtoa_r+0x742>
 800a30e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a310:	e75c      	b.n	800a1cc <_dtoa_r+0x794>
 800a312:	2300      	movs	r3, #0
 800a314:	e788      	b.n	800a228 <_dtoa_r+0x7f0>
 800a316:	9b02      	ldr	r3, [sp, #8]
 800a318:	e786      	b.n	800a228 <_dtoa_r+0x7f0>
 800a31a:	2300      	movs	r3, #0
 800a31c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a31e:	e788      	b.n	800a232 <_dtoa_r+0x7fa>
 800a320:	d09f      	beq.n	800a262 <_dtoa_r+0x82a>
 800a322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a324:	331c      	adds	r3, #28
 800a326:	441a      	add	r2, r3
 800a328:	4498      	add	r8, r3
 800a32a:	441e      	add	r6, r3
 800a32c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a32e:	e798      	b.n	800a262 <_dtoa_r+0x82a>
 800a330:	4603      	mov	r3, r0
 800a332:	e7f6      	b.n	800a322 <_dtoa_r+0x8ea>
 800a334:	9b07      	ldr	r3, [sp, #28]
 800a336:	9704      	str	r7, [sp, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	dc20      	bgt.n	800a37e <_dtoa_r+0x946>
 800a33c:	9308      	str	r3, [sp, #32]
 800a33e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a340:	2b02      	cmp	r3, #2
 800a342:	dd1e      	ble.n	800a382 <_dtoa_r+0x94a>
 800a344:	9b08      	ldr	r3, [sp, #32]
 800a346:	2b00      	cmp	r3, #0
 800a348:	f47f aebc 	bne.w	800a0c4 <_dtoa_r+0x68c>
 800a34c:	4621      	mov	r1, r4
 800a34e:	2205      	movs	r2, #5
 800a350:	4658      	mov	r0, fp
 800a352:	f000 fa99 	bl	800a888 <__multadd>
 800a356:	4601      	mov	r1, r0
 800a358:	4604      	mov	r4, r0
 800a35a:	4648      	mov	r0, r9
 800a35c:	f000 fcaa 	bl	800acb4 <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	f77f aeaf 	ble.w	800a0c4 <_dtoa_r+0x68c>
 800a366:	2331      	movs	r3, #49	@ 0x31
 800a368:	4656      	mov	r6, sl
 800a36a:	f806 3b01 	strb.w	r3, [r6], #1
 800a36e:	9b04      	ldr	r3, [sp, #16]
 800a370:	3301      	adds	r3, #1
 800a372:	9304      	str	r3, [sp, #16]
 800a374:	e6aa      	b.n	800a0cc <_dtoa_r+0x694>
 800a376:	9c07      	ldr	r4, [sp, #28]
 800a378:	9704      	str	r7, [sp, #16]
 800a37a:	4625      	mov	r5, r4
 800a37c:	e7f3      	b.n	800a366 <_dtoa_r+0x92e>
 800a37e:	9b07      	ldr	r3, [sp, #28]
 800a380:	9308      	str	r3, [sp, #32]
 800a382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8104 	beq.w	800a592 <_dtoa_r+0xb5a>
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	dd05      	ble.n	800a39a <_dtoa_r+0x962>
 800a38e:	4629      	mov	r1, r5
 800a390:	4632      	mov	r2, r6
 800a392:	4658      	mov	r0, fp
 800a394:	f000 fc22 	bl	800abdc <__lshift>
 800a398:	4605      	mov	r5, r0
 800a39a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d05a      	beq.n	800a456 <_dtoa_r+0xa1e>
 800a3a0:	4658      	mov	r0, fp
 800a3a2:	6869      	ldr	r1, [r5, #4]
 800a3a4:	f000 fa0e 	bl	800a7c4 <_Balloc>
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	b928      	cbnz	r0, 800a3b8 <_dtoa_r+0x980>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a3b2:	4b83      	ldr	r3, [pc, #524]	@ (800a5c0 <_dtoa_r+0xb88>)
 800a3b4:	f7ff bb54 	b.w	8009a60 <_dtoa_r+0x28>
 800a3b8:	692a      	ldr	r2, [r5, #16]
 800a3ba:	f105 010c 	add.w	r1, r5, #12
 800a3be:	3202      	adds	r2, #2
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	300c      	adds	r0, #12
 800a3c4:	f7ff fa9f 	bl	8009906 <memcpy>
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4658      	mov	r0, fp
 800a3ce:	f000 fc05 	bl	800abdc <__lshift>
 800a3d2:	462f      	mov	r7, r5
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	f10a 0301 	add.w	r3, sl, #1
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	9b08      	ldr	r3, [sp, #32]
 800a3de:	4453      	add	r3, sl
 800a3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3e2:	9b02      	ldr	r3, [sp, #8]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3ea:	9b07      	ldr	r3, [sp, #28]
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	4648      	mov	r0, r9
 800a3f2:	9302      	str	r3, [sp, #8]
 800a3f4:	f7ff fa95 	bl	8009922 <quorem>
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	9008      	str	r0, [sp, #32]
 800a3fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a400:	4648      	mov	r0, r9
 800a402:	f000 fc57 	bl	800acb4 <__mcmp>
 800a406:	462a      	mov	r2, r5
 800a408:	9009      	str	r0, [sp, #36]	@ 0x24
 800a40a:	4621      	mov	r1, r4
 800a40c:	4658      	mov	r0, fp
 800a40e:	f000 fc6d 	bl	800acec <__mdiff>
 800a412:	68c2      	ldr	r2, [r0, #12]
 800a414:	4606      	mov	r6, r0
 800a416:	bb02      	cbnz	r2, 800a45a <_dtoa_r+0xa22>
 800a418:	4601      	mov	r1, r0
 800a41a:	4648      	mov	r0, r9
 800a41c:	f000 fc4a 	bl	800acb4 <__mcmp>
 800a420:	4602      	mov	r2, r0
 800a422:	4631      	mov	r1, r6
 800a424:	4658      	mov	r0, fp
 800a426:	920c      	str	r2, [sp, #48]	@ 0x30
 800a428:	f000 fa0c 	bl	800a844 <_Bfree>
 800a42c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a42e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a430:	9e07      	ldr	r6, [sp, #28]
 800a432:	ea43 0102 	orr.w	r1, r3, r2
 800a436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a438:	4319      	orrs	r1, r3
 800a43a:	d110      	bne.n	800a45e <_dtoa_r+0xa26>
 800a43c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a440:	d029      	beq.n	800a496 <_dtoa_r+0xa5e>
 800a442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a444:	2b00      	cmp	r3, #0
 800a446:	dd02      	ble.n	800a44e <_dtoa_r+0xa16>
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	f883 8000 	strb.w	r8, [r3]
 800a454:	e63b      	b.n	800a0ce <_dtoa_r+0x696>
 800a456:	4628      	mov	r0, r5
 800a458:	e7bb      	b.n	800a3d2 <_dtoa_r+0x99a>
 800a45a:	2201      	movs	r2, #1
 800a45c:	e7e1      	b.n	800a422 <_dtoa_r+0x9ea>
 800a45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a460:	2b00      	cmp	r3, #0
 800a462:	db04      	blt.n	800a46e <_dtoa_r+0xa36>
 800a464:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a466:	430b      	orrs	r3, r1
 800a468:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a46a:	430b      	orrs	r3, r1
 800a46c:	d120      	bne.n	800a4b0 <_dtoa_r+0xa78>
 800a46e:	2a00      	cmp	r2, #0
 800a470:	dded      	ble.n	800a44e <_dtoa_r+0xa16>
 800a472:	4649      	mov	r1, r9
 800a474:	2201      	movs	r2, #1
 800a476:	4658      	mov	r0, fp
 800a478:	f000 fbb0 	bl	800abdc <__lshift>
 800a47c:	4621      	mov	r1, r4
 800a47e:	4681      	mov	r9, r0
 800a480:	f000 fc18 	bl	800acb4 <__mcmp>
 800a484:	2800      	cmp	r0, #0
 800a486:	dc03      	bgt.n	800a490 <_dtoa_r+0xa58>
 800a488:	d1e1      	bne.n	800a44e <_dtoa_r+0xa16>
 800a48a:	f018 0f01 	tst.w	r8, #1
 800a48e:	d0de      	beq.n	800a44e <_dtoa_r+0xa16>
 800a490:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a494:	d1d8      	bne.n	800a448 <_dtoa_r+0xa10>
 800a496:	2339      	movs	r3, #57	@ 0x39
 800a498:	9a02      	ldr	r2, [sp, #8]
 800a49a:	7013      	strb	r3, [r2, #0]
 800a49c:	4633      	mov	r3, r6
 800a49e:	461e      	mov	r6, r3
 800a4a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	2a39      	cmp	r2, #57	@ 0x39
 800a4a8:	d052      	beq.n	800a550 <_dtoa_r+0xb18>
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	701a      	strb	r2, [r3, #0]
 800a4ae:	e60e      	b.n	800a0ce <_dtoa_r+0x696>
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	dd07      	ble.n	800a4c4 <_dtoa_r+0xa8c>
 800a4b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a4b8:	d0ed      	beq.n	800a496 <_dtoa_r+0xa5e>
 800a4ba:	9a02      	ldr	r2, [sp, #8]
 800a4bc:	f108 0301 	add.w	r3, r8, #1
 800a4c0:	7013      	strb	r3, [r2, #0]
 800a4c2:	e604      	b.n	800a0ce <_dtoa_r+0x696>
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	9a07      	ldr	r2, [sp, #28]
 800a4c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d028      	beq.n	800a524 <_dtoa_r+0xaec>
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	220a      	movs	r2, #10
 800a4d8:	4658      	mov	r0, fp
 800a4da:	f000 f9d5 	bl	800a888 <__multadd>
 800a4de:	42af      	cmp	r7, r5
 800a4e0:	4681      	mov	r9, r0
 800a4e2:	f04f 0300 	mov.w	r3, #0
 800a4e6:	f04f 020a 	mov.w	r2, #10
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	d107      	bne.n	800a500 <_dtoa_r+0xac8>
 800a4f0:	f000 f9ca 	bl	800a888 <__multadd>
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	9b07      	ldr	r3, [sp, #28]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	e774      	b.n	800a3ea <_dtoa_r+0x9b2>
 800a500:	f000 f9c2 	bl	800a888 <__multadd>
 800a504:	4629      	mov	r1, r5
 800a506:	4607      	mov	r7, r0
 800a508:	2300      	movs	r3, #0
 800a50a:	220a      	movs	r2, #10
 800a50c:	4658      	mov	r0, fp
 800a50e:	f000 f9bb 	bl	800a888 <__multadd>
 800a512:	4605      	mov	r5, r0
 800a514:	e7f0      	b.n	800a4f8 <_dtoa_r+0xac0>
 800a516:	9b08      	ldr	r3, [sp, #32]
 800a518:	2700      	movs	r7, #0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bfcc      	ite	gt
 800a51e:	461e      	movgt	r6, r3
 800a520:	2601      	movle	r6, #1
 800a522:	4456      	add	r6, sl
 800a524:	4649      	mov	r1, r9
 800a526:	2201      	movs	r2, #1
 800a528:	4658      	mov	r0, fp
 800a52a:	f000 fb57 	bl	800abdc <__lshift>
 800a52e:	4621      	mov	r1, r4
 800a530:	4681      	mov	r9, r0
 800a532:	f000 fbbf 	bl	800acb4 <__mcmp>
 800a536:	2800      	cmp	r0, #0
 800a538:	dcb0      	bgt.n	800a49c <_dtoa_r+0xa64>
 800a53a:	d102      	bne.n	800a542 <_dtoa_r+0xb0a>
 800a53c:	f018 0f01 	tst.w	r8, #1
 800a540:	d1ac      	bne.n	800a49c <_dtoa_r+0xa64>
 800a542:	4633      	mov	r3, r6
 800a544:	461e      	mov	r6, r3
 800a546:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a54a:	2a30      	cmp	r2, #48	@ 0x30
 800a54c:	d0fa      	beq.n	800a544 <_dtoa_r+0xb0c>
 800a54e:	e5be      	b.n	800a0ce <_dtoa_r+0x696>
 800a550:	459a      	cmp	sl, r3
 800a552:	d1a4      	bne.n	800a49e <_dtoa_r+0xa66>
 800a554:	9b04      	ldr	r3, [sp, #16]
 800a556:	3301      	adds	r3, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	2331      	movs	r3, #49	@ 0x31
 800a55c:	f88a 3000 	strb.w	r3, [sl]
 800a560:	e5b5      	b.n	800a0ce <_dtoa_r+0x696>
 800a562:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a564:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a5c4 <_dtoa_r+0xb8c>
 800a568:	b11b      	cbz	r3, 800a572 <_dtoa_r+0xb3a>
 800a56a:	f10a 0308 	add.w	r3, sl, #8
 800a56e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	4650      	mov	r0, sl
 800a574:	b017      	add	sp, #92	@ 0x5c
 800a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	f77f ae3d 	ble.w	800a1fc <_dtoa_r+0x7c4>
 800a582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a584:	930a      	str	r3, [sp, #40]	@ 0x28
 800a586:	2001      	movs	r0, #1
 800a588:	e65b      	b.n	800a242 <_dtoa_r+0x80a>
 800a58a:	9b08      	ldr	r3, [sp, #32]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f77f aed6 	ble.w	800a33e <_dtoa_r+0x906>
 800a592:	4656      	mov	r6, sl
 800a594:	4621      	mov	r1, r4
 800a596:	4648      	mov	r0, r9
 800a598:	f7ff f9c3 	bl	8009922 <quorem>
 800a59c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a5a0:	9b08      	ldr	r3, [sp, #32]
 800a5a2:	f806 8b01 	strb.w	r8, [r6], #1
 800a5a6:	eba6 020a 	sub.w	r2, r6, sl
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	ddb3      	ble.n	800a516 <_dtoa_r+0xade>
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	4658      	mov	r0, fp
 800a5b6:	f000 f967 	bl	800a888 <__multadd>
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	e7ea      	b.n	800a594 <_dtoa_r+0xb5c>
 800a5be:	bf00      	nop
 800a5c0:	0800cada 	.word	0x0800cada
 800a5c4:	0800ca5e 	.word	0x0800ca5e

0800a5c8 <_free_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	2900      	cmp	r1, #0
 800a5ce:	d040      	beq.n	800a652 <_free_r+0x8a>
 800a5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5d4:	1f0c      	subs	r4, r1, #4
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	bfb8      	it	lt
 800a5da:	18e4      	addlt	r4, r4, r3
 800a5dc:	f000 f8e6 	bl	800a7ac <__malloc_lock>
 800a5e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a654 <_free_r+0x8c>)
 800a5e2:	6813      	ldr	r3, [r2, #0]
 800a5e4:	b933      	cbnz	r3, 800a5f4 <_free_r+0x2c>
 800a5e6:	6063      	str	r3, [r4, #4]
 800a5e8:	6014      	str	r4, [r2, #0]
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f0:	f000 b8e2 	b.w	800a7b8 <__malloc_unlock>
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	d908      	bls.n	800a60a <_free_r+0x42>
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	1821      	adds	r1, r4, r0
 800a5fc:	428b      	cmp	r3, r1
 800a5fe:	bf01      	itttt	eq
 800a600:	6819      	ldreq	r1, [r3, #0]
 800a602:	685b      	ldreq	r3, [r3, #4]
 800a604:	1809      	addeq	r1, r1, r0
 800a606:	6021      	streq	r1, [r4, #0]
 800a608:	e7ed      	b.n	800a5e6 <_free_r+0x1e>
 800a60a:	461a      	mov	r2, r3
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	b10b      	cbz	r3, 800a614 <_free_r+0x4c>
 800a610:	42a3      	cmp	r3, r4
 800a612:	d9fa      	bls.n	800a60a <_free_r+0x42>
 800a614:	6811      	ldr	r1, [r2, #0]
 800a616:	1850      	adds	r0, r2, r1
 800a618:	42a0      	cmp	r0, r4
 800a61a:	d10b      	bne.n	800a634 <_free_r+0x6c>
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	4401      	add	r1, r0
 800a620:	1850      	adds	r0, r2, r1
 800a622:	4283      	cmp	r3, r0
 800a624:	6011      	str	r1, [r2, #0]
 800a626:	d1e0      	bne.n	800a5ea <_free_r+0x22>
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4408      	add	r0, r1
 800a62e:	6010      	str	r0, [r2, #0]
 800a630:	6053      	str	r3, [r2, #4]
 800a632:	e7da      	b.n	800a5ea <_free_r+0x22>
 800a634:	d902      	bls.n	800a63c <_free_r+0x74>
 800a636:	230c      	movs	r3, #12
 800a638:	602b      	str	r3, [r5, #0]
 800a63a:	e7d6      	b.n	800a5ea <_free_r+0x22>
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	1821      	adds	r1, r4, r0
 800a640:	428b      	cmp	r3, r1
 800a642:	bf01      	itttt	eq
 800a644:	6819      	ldreq	r1, [r3, #0]
 800a646:	685b      	ldreq	r3, [r3, #4]
 800a648:	1809      	addeq	r1, r1, r0
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	6063      	str	r3, [r4, #4]
 800a64e:	6054      	str	r4, [r2, #4]
 800a650:	e7cb      	b.n	800a5ea <_free_r+0x22>
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	20001688 	.word	0x20001688

0800a658 <malloc>:
 800a658:	4b02      	ldr	r3, [pc, #8]	@ (800a664 <malloc+0xc>)
 800a65a:	4601      	mov	r1, r0
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	f000 b825 	b.w	800a6ac <_malloc_r>
 800a662:	bf00      	nop
 800a664:	20000030 	.word	0x20000030

0800a668 <sbrk_aligned>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	4e0f      	ldr	r6, [pc, #60]	@ (800a6a8 <sbrk_aligned+0x40>)
 800a66c:	460c      	mov	r4, r1
 800a66e:	6831      	ldr	r1, [r6, #0]
 800a670:	4605      	mov	r5, r0
 800a672:	b911      	cbnz	r1, 800a67a <sbrk_aligned+0x12>
 800a674:	f000 fe40 	bl	800b2f8 <_sbrk_r>
 800a678:	6030      	str	r0, [r6, #0]
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f000 fe3b 	bl	800b2f8 <_sbrk_r>
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	d103      	bne.n	800a68e <sbrk_aligned+0x26>
 800a686:	f04f 34ff 	mov.w	r4, #4294967295
 800a68a:	4620      	mov	r0, r4
 800a68c:	bd70      	pop	{r4, r5, r6, pc}
 800a68e:	1cc4      	adds	r4, r0, #3
 800a690:	f024 0403 	bic.w	r4, r4, #3
 800a694:	42a0      	cmp	r0, r4
 800a696:	d0f8      	beq.n	800a68a <sbrk_aligned+0x22>
 800a698:	1a21      	subs	r1, r4, r0
 800a69a:	4628      	mov	r0, r5
 800a69c:	f000 fe2c 	bl	800b2f8 <_sbrk_r>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d1f2      	bne.n	800a68a <sbrk_aligned+0x22>
 800a6a4:	e7ef      	b.n	800a686 <sbrk_aligned+0x1e>
 800a6a6:	bf00      	nop
 800a6a8:	20001684 	.word	0x20001684

0800a6ac <_malloc_r>:
 800a6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b0:	1ccd      	adds	r5, r1, #3
 800a6b2:	f025 0503 	bic.w	r5, r5, #3
 800a6b6:	3508      	adds	r5, #8
 800a6b8:	2d0c      	cmp	r5, #12
 800a6ba:	bf38      	it	cc
 800a6bc:	250c      	movcc	r5, #12
 800a6be:	2d00      	cmp	r5, #0
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	db01      	blt.n	800a6c8 <_malloc_r+0x1c>
 800a6c4:	42a9      	cmp	r1, r5
 800a6c6:	d904      	bls.n	800a6d2 <_malloc_r+0x26>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	6033      	str	r3, [r6, #0]
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7a8 <_malloc_r+0xfc>
 800a6d6:	f000 f869 	bl	800a7ac <__malloc_lock>
 800a6da:	f8d8 3000 	ldr.w	r3, [r8]
 800a6de:	461c      	mov	r4, r3
 800a6e0:	bb44      	cbnz	r4, 800a734 <_malloc_r+0x88>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff ffbf 	bl	800a668 <sbrk_aligned>
 800a6ea:	1c43      	adds	r3, r0, #1
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	d158      	bne.n	800a7a2 <_malloc_r+0xf6>
 800a6f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a6f4:	4627      	mov	r7, r4
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	d143      	bne.n	800a782 <_malloc_r+0xd6>
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	d04b      	beq.n	800a796 <_malloc_r+0xea>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	4639      	mov	r1, r7
 800a702:	4630      	mov	r0, r6
 800a704:	eb04 0903 	add.w	r9, r4, r3
 800a708:	f000 fdf6 	bl	800b2f8 <_sbrk_r>
 800a70c:	4581      	cmp	r9, r0
 800a70e:	d142      	bne.n	800a796 <_malloc_r+0xea>
 800a710:	6821      	ldr	r1, [r4, #0]
 800a712:	4630      	mov	r0, r6
 800a714:	1a6d      	subs	r5, r5, r1
 800a716:	4629      	mov	r1, r5
 800a718:	f7ff ffa6 	bl	800a668 <sbrk_aligned>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d03a      	beq.n	800a796 <_malloc_r+0xea>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	442b      	add	r3, r5
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	f8d8 3000 	ldr.w	r3, [r8]
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	bb62      	cbnz	r2, 800a788 <_malloc_r+0xdc>
 800a72e:	f8c8 7000 	str.w	r7, [r8]
 800a732:	e00f      	b.n	800a754 <_malloc_r+0xa8>
 800a734:	6822      	ldr	r2, [r4, #0]
 800a736:	1b52      	subs	r2, r2, r5
 800a738:	d420      	bmi.n	800a77c <_malloc_r+0xd0>
 800a73a:	2a0b      	cmp	r2, #11
 800a73c:	d917      	bls.n	800a76e <_malloc_r+0xc2>
 800a73e:	1961      	adds	r1, r4, r5
 800a740:	42a3      	cmp	r3, r4
 800a742:	6025      	str	r5, [r4, #0]
 800a744:	bf18      	it	ne
 800a746:	6059      	strne	r1, [r3, #4]
 800a748:	6863      	ldr	r3, [r4, #4]
 800a74a:	bf08      	it	eq
 800a74c:	f8c8 1000 	streq.w	r1, [r8]
 800a750:	5162      	str	r2, [r4, r5]
 800a752:	604b      	str	r3, [r1, #4]
 800a754:	4630      	mov	r0, r6
 800a756:	f000 f82f 	bl	800a7b8 <__malloc_unlock>
 800a75a:	f104 000b 	add.w	r0, r4, #11
 800a75e:	1d23      	adds	r3, r4, #4
 800a760:	f020 0007 	bic.w	r0, r0, #7
 800a764:	1ac2      	subs	r2, r0, r3
 800a766:	bf1c      	itt	ne
 800a768:	1a1b      	subne	r3, r3, r0
 800a76a:	50a3      	strne	r3, [r4, r2]
 800a76c:	e7af      	b.n	800a6ce <_malloc_r+0x22>
 800a76e:	6862      	ldr	r2, [r4, #4]
 800a770:	42a3      	cmp	r3, r4
 800a772:	bf0c      	ite	eq
 800a774:	f8c8 2000 	streq.w	r2, [r8]
 800a778:	605a      	strne	r2, [r3, #4]
 800a77a:	e7eb      	b.n	800a754 <_malloc_r+0xa8>
 800a77c:	4623      	mov	r3, r4
 800a77e:	6864      	ldr	r4, [r4, #4]
 800a780:	e7ae      	b.n	800a6e0 <_malloc_r+0x34>
 800a782:	463c      	mov	r4, r7
 800a784:	687f      	ldr	r7, [r7, #4]
 800a786:	e7b6      	b.n	800a6f6 <_malloc_r+0x4a>
 800a788:	461a      	mov	r2, r3
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	42a3      	cmp	r3, r4
 800a78e:	d1fb      	bne.n	800a788 <_malloc_r+0xdc>
 800a790:	2300      	movs	r3, #0
 800a792:	6053      	str	r3, [r2, #4]
 800a794:	e7de      	b.n	800a754 <_malloc_r+0xa8>
 800a796:	230c      	movs	r3, #12
 800a798:	4630      	mov	r0, r6
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	f000 f80c 	bl	800a7b8 <__malloc_unlock>
 800a7a0:	e794      	b.n	800a6cc <_malloc_r+0x20>
 800a7a2:	6005      	str	r5, [r0, #0]
 800a7a4:	e7d6      	b.n	800a754 <_malloc_r+0xa8>
 800a7a6:	bf00      	nop
 800a7a8:	20001688 	.word	0x20001688

0800a7ac <__malloc_lock>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	@ (800a7b4 <__malloc_lock+0x8>)
 800a7ae:	f7ff b89a 	b.w	80098e6 <__retarget_lock_acquire_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	20001680 	.word	0x20001680

0800a7b8 <__malloc_unlock>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	@ (800a7c0 <__malloc_unlock+0x8>)
 800a7ba:	f7ff b895 	b.w	80098e8 <__retarget_lock_release_recursive>
 800a7be:	bf00      	nop
 800a7c0:	20001680 	.word	0x20001680

0800a7c4 <_Balloc>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	69c6      	ldr	r6, [r0, #28]
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	b976      	cbnz	r6, 800a7ec <_Balloc+0x28>
 800a7ce:	2010      	movs	r0, #16
 800a7d0:	f7ff ff42 	bl	800a658 <malloc>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	61e0      	str	r0, [r4, #28]
 800a7d8:	b920      	cbnz	r0, 800a7e4 <_Balloc+0x20>
 800a7da:	216b      	movs	r1, #107	@ 0x6b
 800a7dc:	4b17      	ldr	r3, [pc, #92]	@ (800a83c <_Balloc+0x78>)
 800a7de:	4818      	ldr	r0, [pc, #96]	@ (800a840 <_Balloc+0x7c>)
 800a7e0:	f000 fd9a 	bl	800b318 <__assert_func>
 800a7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7e8:	6006      	str	r6, [r0, #0]
 800a7ea:	60c6      	str	r6, [r0, #12]
 800a7ec:	69e6      	ldr	r6, [r4, #28]
 800a7ee:	68f3      	ldr	r3, [r6, #12]
 800a7f0:	b183      	cbz	r3, 800a814 <_Balloc+0x50>
 800a7f2:	69e3      	ldr	r3, [r4, #28]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7fa:	b9b8      	cbnz	r0, 800a82c <_Balloc+0x68>
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a802:	1d72      	adds	r2, r6, #5
 800a804:	4620      	mov	r0, r4
 800a806:	0092      	lsls	r2, r2, #2
 800a808:	f000 fda4 	bl	800b354 <_calloc_r>
 800a80c:	b160      	cbz	r0, 800a828 <_Balloc+0x64>
 800a80e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a812:	e00e      	b.n	800a832 <_Balloc+0x6e>
 800a814:	2221      	movs	r2, #33	@ 0x21
 800a816:	2104      	movs	r1, #4
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fd9b 	bl	800b354 <_calloc_r>
 800a81e:	69e3      	ldr	r3, [r4, #28]
 800a820:	60f0      	str	r0, [r6, #12]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e4      	bne.n	800a7f2 <_Balloc+0x2e>
 800a828:	2000      	movs	r0, #0
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	6802      	ldr	r2, [r0, #0]
 800a82e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a832:	2300      	movs	r3, #0
 800a834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a838:	e7f7      	b.n	800a82a <_Balloc+0x66>
 800a83a:	bf00      	nop
 800a83c:	0800ca6b 	.word	0x0800ca6b
 800a840:	0800caeb 	.word	0x0800caeb

0800a844 <_Bfree>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	69c6      	ldr	r6, [r0, #28]
 800a848:	4605      	mov	r5, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	b976      	cbnz	r6, 800a86c <_Bfree+0x28>
 800a84e:	2010      	movs	r0, #16
 800a850:	f7ff ff02 	bl	800a658 <malloc>
 800a854:	4602      	mov	r2, r0
 800a856:	61e8      	str	r0, [r5, #28]
 800a858:	b920      	cbnz	r0, 800a864 <_Bfree+0x20>
 800a85a:	218f      	movs	r1, #143	@ 0x8f
 800a85c:	4b08      	ldr	r3, [pc, #32]	@ (800a880 <_Bfree+0x3c>)
 800a85e:	4809      	ldr	r0, [pc, #36]	@ (800a884 <_Bfree+0x40>)
 800a860:	f000 fd5a 	bl	800b318 <__assert_func>
 800a864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a868:	6006      	str	r6, [r0, #0]
 800a86a:	60c6      	str	r6, [r0, #12]
 800a86c:	b13c      	cbz	r4, 800a87e <_Bfree+0x3a>
 800a86e:	69eb      	ldr	r3, [r5, #28]
 800a870:	6862      	ldr	r2, [r4, #4]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a878:	6021      	str	r1, [r4, #0]
 800a87a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	0800ca6b 	.word	0x0800ca6b
 800a884:	0800caeb 	.word	0x0800caeb

0800a888 <__multadd>:
 800a888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	4607      	mov	r7, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	461e      	mov	r6, r3
 800a892:	2000      	movs	r0, #0
 800a894:	690d      	ldr	r5, [r1, #16]
 800a896:	f101 0c14 	add.w	ip, r1, #20
 800a89a:	f8dc 3000 	ldr.w	r3, [ip]
 800a89e:	3001      	adds	r0, #1
 800a8a0:	b299      	uxth	r1, r3
 800a8a2:	fb02 6101 	mla	r1, r2, r1, r6
 800a8a6:	0c1e      	lsrs	r6, r3, #16
 800a8a8:	0c0b      	lsrs	r3, r1, #16
 800a8aa:	fb02 3306 	mla	r3, r2, r6, r3
 800a8ae:	b289      	uxth	r1, r1
 800a8b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8b4:	4285      	cmp	r5, r0
 800a8b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a8be:	dcec      	bgt.n	800a89a <__multadd+0x12>
 800a8c0:	b30e      	cbz	r6, 800a906 <__multadd+0x7e>
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	42ab      	cmp	r3, r5
 800a8c6:	dc19      	bgt.n	800a8fc <__multadd+0x74>
 800a8c8:	6861      	ldr	r1, [r4, #4]
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	3101      	adds	r1, #1
 800a8ce:	f7ff ff79 	bl	800a7c4 <_Balloc>
 800a8d2:	4680      	mov	r8, r0
 800a8d4:	b928      	cbnz	r0, 800a8e2 <__multadd+0x5a>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	21ba      	movs	r1, #186	@ 0xba
 800a8da:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <__multadd+0x84>)
 800a8dc:	480c      	ldr	r0, [pc, #48]	@ (800a910 <__multadd+0x88>)
 800a8de:	f000 fd1b 	bl	800b318 <__assert_func>
 800a8e2:	6922      	ldr	r2, [r4, #16]
 800a8e4:	f104 010c 	add.w	r1, r4, #12
 800a8e8:	3202      	adds	r2, #2
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	300c      	adds	r0, #12
 800a8ee:	f7ff f80a 	bl	8009906 <memcpy>
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f7ff ffa5 	bl	800a844 <_Bfree>
 800a8fa:	4644      	mov	r4, r8
 800a8fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a900:	3501      	adds	r5, #1
 800a902:	615e      	str	r6, [r3, #20]
 800a904:	6125      	str	r5, [r4, #16]
 800a906:	4620      	mov	r0, r4
 800a908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a90c:	0800cada 	.word	0x0800cada
 800a910:	0800caeb 	.word	0x0800caeb

0800a914 <__hi0bits>:
 800a914:	4603      	mov	r3, r0
 800a916:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a91a:	bf3a      	itte	cc
 800a91c:	0403      	lslcc	r3, r0, #16
 800a91e:	2010      	movcc	r0, #16
 800a920:	2000      	movcs	r0, #0
 800a922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a926:	bf3c      	itt	cc
 800a928:	021b      	lslcc	r3, r3, #8
 800a92a:	3008      	addcc	r0, #8
 800a92c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a930:	bf3c      	itt	cc
 800a932:	011b      	lslcc	r3, r3, #4
 800a934:	3004      	addcc	r0, #4
 800a936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a93a:	bf3c      	itt	cc
 800a93c:	009b      	lslcc	r3, r3, #2
 800a93e:	3002      	addcc	r0, #2
 800a940:	2b00      	cmp	r3, #0
 800a942:	db05      	blt.n	800a950 <__hi0bits+0x3c>
 800a944:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a948:	f100 0001 	add.w	r0, r0, #1
 800a94c:	bf08      	it	eq
 800a94e:	2020      	moveq	r0, #32
 800a950:	4770      	bx	lr

0800a952 <__lo0bits>:
 800a952:	6803      	ldr	r3, [r0, #0]
 800a954:	4602      	mov	r2, r0
 800a956:	f013 0007 	ands.w	r0, r3, #7
 800a95a:	d00b      	beq.n	800a974 <__lo0bits+0x22>
 800a95c:	07d9      	lsls	r1, r3, #31
 800a95e:	d421      	bmi.n	800a9a4 <__lo0bits+0x52>
 800a960:	0798      	lsls	r0, r3, #30
 800a962:	bf49      	itett	mi
 800a964:	085b      	lsrmi	r3, r3, #1
 800a966:	089b      	lsrpl	r3, r3, #2
 800a968:	2001      	movmi	r0, #1
 800a96a:	6013      	strmi	r3, [r2, #0]
 800a96c:	bf5c      	itt	pl
 800a96e:	2002      	movpl	r0, #2
 800a970:	6013      	strpl	r3, [r2, #0]
 800a972:	4770      	bx	lr
 800a974:	b299      	uxth	r1, r3
 800a976:	b909      	cbnz	r1, 800a97c <__lo0bits+0x2a>
 800a978:	2010      	movs	r0, #16
 800a97a:	0c1b      	lsrs	r3, r3, #16
 800a97c:	b2d9      	uxtb	r1, r3
 800a97e:	b909      	cbnz	r1, 800a984 <__lo0bits+0x32>
 800a980:	3008      	adds	r0, #8
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	0719      	lsls	r1, r3, #28
 800a986:	bf04      	itt	eq
 800a988:	091b      	lsreq	r3, r3, #4
 800a98a:	3004      	addeq	r0, #4
 800a98c:	0799      	lsls	r1, r3, #30
 800a98e:	bf04      	itt	eq
 800a990:	089b      	lsreq	r3, r3, #2
 800a992:	3002      	addeq	r0, #2
 800a994:	07d9      	lsls	r1, r3, #31
 800a996:	d403      	bmi.n	800a9a0 <__lo0bits+0x4e>
 800a998:	085b      	lsrs	r3, r3, #1
 800a99a:	f100 0001 	add.w	r0, r0, #1
 800a99e:	d003      	beq.n	800a9a8 <__lo0bits+0x56>
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	4770      	bx	lr
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	4770      	bx	lr
 800a9a8:	2020      	movs	r0, #32
 800a9aa:	4770      	bx	lr

0800a9ac <__i2b>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	f7ff ff07 	bl	800a7c4 <_Balloc>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	b928      	cbnz	r0, 800a9c6 <__i2b+0x1a>
 800a9ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a9be:	4b04      	ldr	r3, [pc, #16]	@ (800a9d0 <__i2b+0x24>)
 800a9c0:	4804      	ldr	r0, [pc, #16]	@ (800a9d4 <__i2b+0x28>)
 800a9c2:	f000 fca9 	bl	800b318 <__assert_func>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	6144      	str	r4, [r0, #20]
 800a9ca:	6103      	str	r3, [r0, #16]
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	bf00      	nop
 800a9d0:	0800cada 	.word	0x0800cada
 800a9d4:	0800caeb 	.word	0x0800caeb

0800a9d8 <__multiply>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	4614      	mov	r4, r2
 800a9de:	690a      	ldr	r2, [r1, #16]
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	bfa2      	ittt	ge
 800a9e8:	4623      	movge	r3, r4
 800a9ea:	460c      	movge	r4, r1
 800a9ec:	461f      	movge	r7, r3
 800a9ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	6861      	ldr	r1, [r4, #4]
 800a9fa:	eb0a 0609 	add.w	r6, sl, r9
 800a9fe:	42b3      	cmp	r3, r6
 800aa00:	b085      	sub	sp, #20
 800aa02:	bfb8      	it	lt
 800aa04:	3101      	addlt	r1, #1
 800aa06:	f7ff fedd 	bl	800a7c4 <_Balloc>
 800aa0a:	b930      	cbnz	r0, 800aa1a <__multiply+0x42>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa12:	4b43      	ldr	r3, [pc, #268]	@ (800ab20 <__multiply+0x148>)
 800aa14:	4843      	ldr	r0, [pc, #268]	@ (800ab24 <__multiply+0x14c>)
 800aa16:	f000 fc7f 	bl	800b318 <__assert_func>
 800aa1a:	f100 0514 	add.w	r5, r0, #20
 800aa1e:	462b      	mov	r3, r5
 800aa20:	2200      	movs	r2, #0
 800aa22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa26:	4543      	cmp	r3, r8
 800aa28:	d321      	bcc.n	800aa6e <__multiply+0x96>
 800aa2a:	f107 0114 	add.w	r1, r7, #20
 800aa2e:	f104 0214 	add.w	r2, r4, #20
 800aa32:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa36:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa3a:	9302      	str	r3, [sp, #8]
 800aa3c:	1b13      	subs	r3, r2, r4
 800aa3e:	3b15      	subs	r3, #21
 800aa40:	f023 0303 	bic.w	r3, r3, #3
 800aa44:	3304      	adds	r3, #4
 800aa46:	f104 0715 	add.w	r7, r4, #21
 800aa4a:	42ba      	cmp	r2, r7
 800aa4c:	bf38      	it	cc
 800aa4e:	2304      	movcc	r3, #4
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	9b02      	ldr	r3, [sp, #8]
 800aa54:	9103      	str	r1, [sp, #12]
 800aa56:	428b      	cmp	r3, r1
 800aa58:	d80c      	bhi.n	800aa74 <__multiply+0x9c>
 800aa5a:	2e00      	cmp	r6, #0
 800aa5c:	dd03      	ble.n	800aa66 <__multiply+0x8e>
 800aa5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d05a      	beq.n	800ab1c <__multiply+0x144>
 800aa66:	6106      	str	r6, [r0, #16]
 800aa68:	b005      	add	sp, #20
 800aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6e:	f843 2b04 	str.w	r2, [r3], #4
 800aa72:	e7d8      	b.n	800aa26 <__multiply+0x4e>
 800aa74:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa78:	f1ba 0f00 	cmp.w	sl, #0
 800aa7c:	d023      	beq.n	800aac6 <__multiply+0xee>
 800aa7e:	46a9      	mov	r9, r5
 800aa80:	f04f 0c00 	mov.w	ip, #0
 800aa84:	f104 0e14 	add.w	lr, r4, #20
 800aa88:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa8c:	f8d9 3000 	ldr.w	r3, [r9]
 800aa90:	fa1f fb87 	uxth.w	fp, r7
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa9a:	4463      	add	r3, ip
 800aa9c:	f8d9 c000 	ldr.w	ip, [r9]
 800aaa0:	0c3f      	lsrs	r7, r7, #16
 800aaa2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aaa6:	fb0a c707 	mla	r7, sl, r7, ip
 800aaaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aab4:	4572      	cmp	r2, lr
 800aab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aaba:	f849 3b04 	str.w	r3, [r9], #4
 800aabe:	d8e3      	bhi.n	800aa88 <__multiply+0xb0>
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	f845 c003 	str.w	ip, [r5, r3]
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	3104      	adds	r1, #4
 800aaca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aace:	f1b9 0f00 	cmp.w	r9, #0
 800aad2:	d021      	beq.n	800ab18 <__multiply+0x140>
 800aad4:	46ae      	mov	lr, r5
 800aad6:	f04f 0a00 	mov.w	sl, #0
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	f104 0c14 	add.w	ip, r4, #20
 800aae0:	f8bc b000 	ldrh.w	fp, [ip]
 800aae4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	fb09 770b 	mla	r7, r9, fp, r7
 800aaee:	4457      	add	r7, sl
 800aaf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aaf4:	f84e 3b04 	str.w	r3, [lr], #4
 800aaf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aafc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab00:	f8be 3000 	ldrh.w	r3, [lr]
 800ab04:	4562      	cmp	r2, ip
 800ab06:	fb09 330a 	mla	r3, r9, sl, r3
 800ab0a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ab0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab12:	d8e5      	bhi.n	800aae0 <__multiply+0x108>
 800ab14:	9f01      	ldr	r7, [sp, #4]
 800ab16:	51eb      	str	r3, [r5, r7]
 800ab18:	3504      	adds	r5, #4
 800ab1a:	e79a      	b.n	800aa52 <__multiply+0x7a>
 800ab1c:	3e01      	subs	r6, #1
 800ab1e:	e79c      	b.n	800aa5a <__multiply+0x82>
 800ab20:	0800cada 	.word	0x0800cada
 800ab24:	0800caeb 	.word	0x0800caeb

0800ab28 <__pow5mult>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	4615      	mov	r5, r2
 800ab2e:	f012 0203 	ands.w	r2, r2, #3
 800ab32:	4607      	mov	r7, r0
 800ab34:	460e      	mov	r6, r1
 800ab36:	d007      	beq.n	800ab48 <__pow5mult+0x20>
 800ab38:	4c25      	ldr	r4, [pc, #148]	@ (800abd0 <__pow5mult+0xa8>)
 800ab3a:	3a01      	subs	r2, #1
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab42:	f7ff fea1 	bl	800a888 <__multadd>
 800ab46:	4606      	mov	r6, r0
 800ab48:	10ad      	asrs	r5, r5, #2
 800ab4a:	d03d      	beq.n	800abc8 <__pow5mult+0xa0>
 800ab4c:	69fc      	ldr	r4, [r7, #28]
 800ab4e:	b97c      	cbnz	r4, 800ab70 <__pow5mult+0x48>
 800ab50:	2010      	movs	r0, #16
 800ab52:	f7ff fd81 	bl	800a658 <malloc>
 800ab56:	4602      	mov	r2, r0
 800ab58:	61f8      	str	r0, [r7, #28]
 800ab5a:	b928      	cbnz	r0, 800ab68 <__pow5mult+0x40>
 800ab5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab60:	4b1c      	ldr	r3, [pc, #112]	@ (800abd4 <__pow5mult+0xac>)
 800ab62:	481d      	ldr	r0, [pc, #116]	@ (800abd8 <__pow5mult+0xb0>)
 800ab64:	f000 fbd8 	bl	800b318 <__assert_func>
 800ab68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab6c:	6004      	str	r4, [r0, #0]
 800ab6e:	60c4      	str	r4, [r0, #12]
 800ab70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab78:	b94c      	cbnz	r4, 800ab8e <__pow5mult+0x66>
 800ab7a:	f240 2171 	movw	r1, #625	@ 0x271
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f7ff ff14 	bl	800a9ac <__i2b>
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab8c:	6003      	str	r3, [r0, #0]
 800ab8e:	f04f 0900 	mov.w	r9, #0
 800ab92:	07eb      	lsls	r3, r5, #31
 800ab94:	d50a      	bpl.n	800abac <__pow5mult+0x84>
 800ab96:	4631      	mov	r1, r6
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	f7ff ff1c 	bl	800a9d8 <__multiply>
 800aba0:	4680      	mov	r8, r0
 800aba2:	4631      	mov	r1, r6
 800aba4:	4638      	mov	r0, r7
 800aba6:	f7ff fe4d 	bl	800a844 <_Bfree>
 800abaa:	4646      	mov	r6, r8
 800abac:	106d      	asrs	r5, r5, #1
 800abae:	d00b      	beq.n	800abc8 <__pow5mult+0xa0>
 800abb0:	6820      	ldr	r0, [r4, #0]
 800abb2:	b938      	cbnz	r0, 800abc4 <__pow5mult+0x9c>
 800abb4:	4622      	mov	r2, r4
 800abb6:	4621      	mov	r1, r4
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff ff0d 	bl	800a9d8 <__multiply>
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	f8c0 9000 	str.w	r9, [r0]
 800abc4:	4604      	mov	r4, r0
 800abc6:	e7e4      	b.n	800ab92 <__pow5mult+0x6a>
 800abc8:	4630      	mov	r0, r6
 800abca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abce:	bf00      	nop
 800abd0:	0800cb44 	.word	0x0800cb44
 800abd4:	0800ca6b 	.word	0x0800ca6b
 800abd8:	0800caeb 	.word	0x0800caeb

0800abdc <__lshift>:
 800abdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe0:	460c      	mov	r4, r1
 800abe2:	4607      	mov	r7, r0
 800abe4:	4691      	mov	r9, r2
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	6849      	ldr	r1, [r1, #4]
 800abea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abee:	68a3      	ldr	r3, [r4, #8]
 800abf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abf4:	f108 0601 	add.w	r6, r8, #1
 800abf8:	42b3      	cmp	r3, r6
 800abfa:	db0b      	blt.n	800ac14 <__lshift+0x38>
 800abfc:	4638      	mov	r0, r7
 800abfe:	f7ff fde1 	bl	800a7c4 <_Balloc>
 800ac02:	4605      	mov	r5, r0
 800ac04:	b948      	cbnz	r0, 800ac1a <__lshift+0x3e>
 800ac06:	4602      	mov	r2, r0
 800ac08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ac0c:	4b27      	ldr	r3, [pc, #156]	@ (800acac <__lshift+0xd0>)
 800ac0e:	4828      	ldr	r0, [pc, #160]	@ (800acb0 <__lshift+0xd4>)
 800ac10:	f000 fb82 	bl	800b318 <__assert_func>
 800ac14:	3101      	adds	r1, #1
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	e7ee      	b.n	800abf8 <__lshift+0x1c>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f100 0114 	add.w	r1, r0, #20
 800ac20:	f100 0210 	add.w	r2, r0, #16
 800ac24:	4618      	mov	r0, r3
 800ac26:	4553      	cmp	r3, sl
 800ac28:	db33      	blt.n	800ac92 <__lshift+0xb6>
 800ac2a:	6920      	ldr	r0, [r4, #16]
 800ac2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac30:	f104 0314 	add.w	r3, r4, #20
 800ac34:	f019 091f 	ands.w	r9, r9, #31
 800ac38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac40:	d02b      	beq.n	800ac9a <__lshift+0xbe>
 800ac42:	468a      	mov	sl, r1
 800ac44:	2200      	movs	r2, #0
 800ac46:	f1c9 0e20 	rsb	lr, r9, #32
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac50:	4310      	orrs	r0, r2
 800ac52:	f84a 0b04 	str.w	r0, [sl], #4
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	459c      	cmp	ip, r3
 800ac5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac60:	d8f3      	bhi.n	800ac4a <__lshift+0x6e>
 800ac62:	ebac 0304 	sub.w	r3, ip, r4
 800ac66:	3b15      	subs	r3, #21
 800ac68:	f023 0303 	bic.w	r3, r3, #3
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	f104 0015 	add.w	r0, r4, #21
 800ac72:	4584      	cmp	ip, r0
 800ac74:	bf38      	it	cc
 800ac76:	2304      	movcc	r3, #4
 800ac78:	50ca      	str	r2, [r1, r3]
 800ac7a:	b10a      	cbz	r2, 800ac80 <__lshift+0xa4>
 800ac7c:	f108 0602 	add.w	r6, r8, #2
 800ac80:	3e01      	subs	r6, #1
 800ac82:	4638      	mov	r0, r7
 800ac84:	4621      	mov	r1, r4
 800ac86:	612e      	str	r6, [r5, #16]
 800ac88:	f7ff fddc 	bl	800a844 <_Bfree>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac96:	3301      	adds	r3, #1
 800ac98:	e7c5      	b.n	800ac26 <__lshift+0x4a>
 800ac9a:	3904      	subs	r1, #4
 800ac9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca0:	459c      	cmp	ip, r3
 800aca2:	f841 2f04 	str.w	r2, [r1, #4]!
 800aca6:	d8f9      	bhi.n	800ac9c <__lshift+0xc0>
 800aca8:	e7ea      	b.n	800ac80 <__lshift+0xa4>
 800acaa:	bf00      	nop
 800acac:	0800cada 	.word	0x0800cada
 800acb0:	0800caeb 	.word	0x0800caeb

0800acb4 <__mcmp>:
 800acb4:	4603      	mov	r3, r0
 800acb6:	690a      	ldr	r2, [r1, #16]
 800acb8:	6900      	ldr	r0, [r0, #16]
 800acba:	b530      	push	{r4, r5, lr}
 800acbc:	1a80      	subs	r0, r0, r2
 800acbe:	d10e      	bne.n	800acde <__mcmp+0x2a>
 800acc0:	3314      	adds	r3, #20
 800acc2:	3114      	adds	r1, #20
 800acc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800acc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800accc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acd4:	4295      	cmp	r5, r2
 800acd6:	d003      	beq.n	800ace0 <__mcmp+0x2c>
 800acd8:	d205      	bcs.n	800ace6 <__mcmp+0x32>
 800acda:	f04f 30ff 	mov.w	r0, #4294967295
 800acde:	bd30      	pop	{r4, r5, pc}
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	d3f3      	bcc.n	800accc <__mcmp+0x18>
 800ace4:	e7fb      	b.n	800acde <__mcmp+0x2a>
 800ace6:	2001      	movs	r0, #1
 800ace8:	e7f9      	b.n	800acde <__mcmp+0x2a>
	...

0800acec <__mdiff>:
 800acec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	4689      	mov	r9, r1
 800acf2:	4606      	mov	r6, r0
 800acf4:	4611      	mov	r1, r2
 800acf6:	4648      	mov	r0, r9
 800acf8:	4614      	mov	r4, r2
 800acfa:	f7ff ffdb 	bl	800acb4 <__mcmp>
 800acfe:	1e05      	subs	r5, r0, #0
 800ad00:	d112      	bne.n	800ad28 <__mdiff+0x3c>
 800ad02:	4629      	mov	r1, r5
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff fd5d 	bl	800a7c4 <_Balloc>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	b928      	cbnz	r0, 800ad1a <__mdiff+0x2e>
 800ad0e:	f240 2137 	movw	r1, #567	@ 0x237
 800ad12:	4b3e      	ldr	r3, [pc, #248]	@ (800ae0c <__mdiff+0x120>)
 800ad14:	483e      	ldr	r0, [pc, #248]	@ (800ae10 <__mdiff+0x124>)
 800ad16:	f000 faff 	bl	800b318 <__assert_func>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad20:	4610      	mov	r0, r2
 800ad22:	b003      	add	sp, #12
 800ad24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad28:	bfbc      	itt	lt
 800ad2a:	464b      	movlt	r3, r9
 800ad2c:	46a1      	movlt	r9, r4
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad34:	bfba      	itte	lt
 800ad36:	461c      	movlt	r4, r3
 800ad38:	2501      	movlt	r5, #1
 800ad3a:	2500      	movge	r5, #0
 800ad3c:	f7ff fd42 	bl	800a7c4 <_Balloc>
 800ad40:	4602      	mov	r2, r0
 800ad42:	b918      	cbnz	r0, 800ad4c <__mdiff+0x60>
 800ad44:	f240 2145 	movw	r1, #581	@ 0x245
 800ad48:	4b30      	ldr	r3, [pc, #192]	@ (800ae0c <__mdiff+0x120>)
 800ad4a:	e7e3      	b.n	800ad14 <__mdiff+0x28>
 800ad4c:	f100 0b14 	add.w	fp, r0, #20
 800ad50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad54:	f109 0310 	add.w	r3, r9, #16
 800ad58:	60c5      	str	r5, [r0, #12]
 800ad5a:	f04f 0c00 	mov.w	ip, #0
 800ad5e:	f109 0514 	add.w	r5, r9, #20
 800ad62:	46d9      	mov	r9, fp
 800ad64:	6926      	ldr	r6, [r4, #16]
 800ad66:	f104 0e14 	add.w	lr, r4, #20
 800ad6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad72:	9301      	str	r3, [sp, #4]
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad7e:	b281      	uxth	r1, r0
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	fa1f f38a 	uxth.w	r3, sl
 800ad86:	1a5b      	subs	r3, r3, r1
 800ad88:	0c00      	lsrs	r0, r0, #16
 800ad8a:	4463      	add	r3, ip
 800ad8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad9a:	4576      	cmp	r6, lr
 800ad9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ada0:	f849 3b04 	str.w	r3, [r9], #4
 800ada4:	d8e6      	bhi.n	800ad74 <__mdiff+0x88>
 800ada6:	1b33      	subs	r3, r6, r4
 800ada8:	3b15      	subs	r3, #21
 800adaa:	f023 0303 	bic.w	r3, r3, #3
 800adae:	3415      	adds	r4, #21
 800adb0:	3304      	adds	r3, #4
 800adb2:	42a6      	cmp	r6, r4
 800adb4:	bf38      	it	cc
 800adb6:	2304      	movcc	r3, #4
 800adb8:	441d      	add	r5, r3
 800adba:	445b      	add	r3, fp
 800adbc:	461e      	mov	r6, r3
 800adbe:	462c      	mov	r4, r5
 800adc0:	4544      	cmp	r4, r8
 800adc2:	d30e      	bcc.n	800ade2 <__mdiff+0xf6>
 800adc4:	f108 0103 	add.w	r1, r8, #3
 800adc8:	1b49      	subs	r1, r1, r5
 800adca:	f021 0103 	bic.w	r1, r1, #3
 800adce:	3d03      	subs	r5, #3
 800add0:	45a8      	cmp	r8, r5
 800add2:	bf38      	it	cc
 800add4:	2100      	movcc	r1, #0
 800add6:	440b      	add	r3, r1
 800add8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800addc:	b199      	cbz	r1, 800ae06 <__mdiff+0x11a>
 800adde:	6117      	str	r7, [r2, #16]
 800ade0:	e79e      	b.n	800ad20 <__mdiff+0x34>
 800ade2:	46e6      	mov	lr, ip
 800ade4:	f854 1b04 	ldr.w	r1, [r4], #4
 800ade8:	fa1f fc81 	uxth.w	ip, r1
 800adec:	44f4      	add	ip, lr
 800adee:	0c08      	lsrs	r0, r1, #16
 800adf0:	4471      	add	r1, lr
 800adf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800adf6:	b289      	uxth	r1, r1
 800adf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800adfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae00:	f846 1b04 	str.w	r1, [r6], #4
 800ae04:	e7dc      	b.n	800adc0 <__mdiff+0xd4>
 800ae06:	3f01      	subs	r7, #1
 800ae08:	e7e6      	b.n	800add8 <__mdiff+0xec>
 800ae0a:	bf00      	nop
 800ae0c:	0800cada 	.word	0x0800cada
 800ae10:	0800caeb 	.word	0x0800caeb

0800ae14 <__d2b>:
 800ae14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ae18:	2101      	movs	r1, #1
 800ae1a:	4690      	mov	r8, r2
 800ae1c:	4699      	mov	r9, r3
 800ae1e:	9e08      	ldr	r6, [sp, #32]
 800ae20:	f7ff fcd0 	bl	800a7c4 <_Balloc>
 800ae24:	4604      	mov	r4, r0
 800ae26:	b930      	cbnz	r0, 800ae36 <__d2b+0x22>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae2e:	4b23      	ldr	r3, [pc, #140]	@ (800aebc <__d2b+0xa8>)
 800ae30:	4823      	ldr	r0, [pc, #140]	@ (800aec0 <__d2b+0xac>)
 800ae32:	f000 fa71 	bl	800b318 <__assert_func>
 800ae36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae3e:	b10d      	cbz	r5, 800ae44 <__d2b+0x30>
 800ae40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	f1b8 0300 	subs.w	r3, r8, #0
 800ae4a:	d024      	beq.n	800ae96 <__d2b+0x82>
 800ae4c:	4668      	mov	r0, sp
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	f7ff fd7f 	bl	800a952 <__lo0bits>
 800ae54:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae58:	b1d8      	cbz	r0, 800ae92 <__d2b+0x7e>
 800ae5a:	f1c0 0320 	rsb	r3, r0, #32
 800ae5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae62:	430b      	orrs	r3, r1
 800ae64:	40c2      	lsrs	r2, r0
 800ae66:	6163      	str	r3, [r4, #20]
 800ae68:	9201      	str	r2, [sp, #4]
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	bf0c      	ite	eq
 800ae70:	2201      	moveq	r2, #1
 800ae72:	2202      	movne	r2, #2
 800ae74:	61a3      	str	r3, [r4, #24]
 800ae76:	6122      	str	r2, [r4, #16]
 800ae78:	b1ad      	cbz	r5, 800aea6 <__d2b+0x92>
 800ae7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae7e:	4405      	add	r5, r0
 800ae80:	6035      	str	r5, [r6, #0]
 800ae82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae88:	6018      	str	r0, [r3, #0]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	b002      	add	sp, #8
 800ae8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ae92:	6161      	str	r1, [r4, #20]
 800ae94:	e7e9      	b.n	800ae6a <__d2b+0x56>
 800ae96:	a801      	add	r0, sp, #4
 800ae98:	f7ff fd5b 	bl	800a952 <__lo0bits>
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	6163      	str	r3, [r4, #20]
 800aea2:	3020      	adds	r0, #32
 800aea4:	e7e7      	b.n	800ae76 <__d2b+0x62>
 800aea6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aeaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aeae:	6030      	str	r0, [r6, #0]
 800aeb0:	6918      	ldr	r0, [r3, #16]
 800aeb2:	f7ff fd2f 	bl	800a914 <__hi0bits>
 800aeb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeba:	e7e4      	b.n	800ae86 <__d2b+0x72>
 800aebc:	0800cada 	.word	0x0800cada
 800aec0:	0800caeb 	.word	0x0800caeb

0800aec4 <__ssputs_r>:
 800aec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec8:	461f      	mov	r7, r3
 800aeca:	688e      	ldr	r6, [r1, #8]
 800aecc:	4682      	mov	sl, r0
 800aece:	42be      	cmp	r6, r7
 800aed0:	460c      	mov	r4, r1
 800aed2:	4690      	mov	r8, r2
 800aed4:	680b      	ldr	r3, [r1, #0]
 800aed6:	d82d      	bhi.n	800af34 <__ssputs_r+0x70>
 800aed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aedc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aee0:	d026      	beq.n	800af30 <__ssputs_r+0x6c>
 800aee2:	6965      	ldr	r5, [r4, #20]
 800aee4:	6909      	ldr	r1, [r1, #16]
 800aee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeea:	eba3 0901 	sub.w	r9, r3, r1
 800aeee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aef2:	1c7b      	adds	r3, r7, #1
 800aef4:	444b      	add	r3, r9
 800aef6:	106d      	asrs	r5, r5, #1
 800aef8:	429d      	cmp	r5, r3
 800aefa:	bf38      	it	cc
 800aefc:	461d      	movcc	r5, r3
 800aefe:	0553      	lsls	r3, r2, #21
 800af00:	d527      	bpl.n	800af52 <__ssputs_r+0x8e>
 800af02:	4629      	mov	r1, r5
 800af04:	f7ff fbd2 	bl	800a6ac <_malloc_r>
 800af08:	4606      	mov	r6, r0
 800af0a:	b360      	cbz	r0, 800af66 <__ssputs_r+0xa2>
 800af0c:	464a      	mov	r2, r9
 800af0e:	6921      	ldr	r1, [r4, #16]
 800af10:	f7fe fcf9 	bl	8009906 <memcpy>
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	6126      	str	r6, [r4, #16]
 800af22:	444e      	add	r6, r9
 800af24:	6026      	str	r6, [r4, #0]
 800af26:	463e      	mov	r6, r7
 800af28:	6165      	str	r5, [r4, #20]
 800af2a:	eba5 0509 	sub.w	r5, r5, r9
 800af2e:	60a5      	str	r5, [r4, #8]
 800af30:	42be      	cmp	r6, r7
 800af32:	d900      	bls.n	800af36 <__ssputs_r+0x72>
 800af34:	463e      	mov	r6, r7
 800af36:	4632      	mov	r2, r6
 800af38:	4641      	mov	r1, r8
 800af3a:	6820      	ldr	r0, [r4, #0]
 800af3c:	f000 f9c2 	bl	800b2c4 <memmove>
 800af40:	2000      	movs	r0, #0
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	1b9b      	subs	r3, r3, r6
 800af46:	60a3      	str	r3, [r4, #8]
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	4433      	add	r3, r6
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af52:	462a      	mov	r2, r5
 800af54:	f000 fa24 	bl	800b3a0 <_realloc_r>
 800af58:	4606      	mov	r6, r0
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d1e0      	bne.n	800af20 <__ssputs_r+0x5c>
 800af5e:	4650      	mov	r0, sl
 800af60:	6921      	ldr	r1, [r4, #16]
 800af62:	f7ff fb31 	bl	800a5c8 <_free_r>
 800af66:	230c      	movs	r3, #12
 800af68:	f8ca 3000 	str.w	r3, [sl]
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	e7e9      	b.n	800af4e <__ssputs_r+0x8a>
	...

0800af7c <_svfiprintf_r>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	4698      	mov	r8, r3
 800af82:	898b      	ldrh	r3, [r1, #12]
 800af84:	4607      	mov	r7, r0
 800af86:	061b      	lsls	r3, r3, #24
 800af88:	460d      	mov	r5, r1
 800af8a:	4614      	mov	r4, r2
 800af8c:	b09d      	sub	sp, #116	@ 0x74
 800af8e:	d510      	bpl.n	800afb2 <_svfiprintf_r+0x36>
 800af90:	690b      	ldr	r3, [r1, #16]
 800af92:	b973      	cbnz	r3, 800afb2 <_svfiprintf_r+0x36>
 800af94:	2140      	movs	r1, #64	@ 0x40
 800af96:	f7ff fb89 	bl	800a6ac <_malloc_r>
 800af9a:	6028      	str	r0, [r5, #0]
 800af9c:	6128      	str	r0, [r5, #16]
 800af9e:	b930      	cbnz	r0, 800afae <_svfiprintf_r+0x32>
 800afa0:	230c      	movs	r3, #12
 800afa2:	603b      	str	r3, [r7, #0]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	b01d      	add	sp, #116	@ 0x74
 800afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afae:	2340      	movs	r3, #64	@ 0x40
 800afb0:	616b      	str	r3, [r5, #20]
 800afb2:	2300      	movs	r3, #0
 800afb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afb6:	2320      	movs	r3, #32
 800afb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afbc:	2330      	movs	r3, #48	@ 0x30
 800afbe:	f04f 0901 	mov.w	r9, #1
 800afc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afc6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b160 <_svfiprintf_r+0x1e4>
 800afca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afce:	4623      	mov	r3, r4
 800afd0:	469a      	mov	sl, r3
 800afd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd6:	b10a      	cbz	r2, 800afdc <_svfiprintf_r+0x60>
 800afd8:	2a25      	cmp	r2, #37	@ 0x25
 800afda:	d1f9      	bne.n	800afd0 <_svfiprintf_r+0x54>
 800afdc:	ebba 0b04 	subs.w	fp, sl, r4
 800afe0:	d00b      	beq.n	800affa <_svfiprintf_r+0x7e>
 800afe2:	465b      	mov	r3, fp
 800afe4:	4622      	mov	r2, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff ff6b 	bl	800aec4 <__ssputs_r>
 800afee:	3001      	adds	r0, #1
 800aff0:	f000 80a7 	beq.w	800b142 <_svfiprintf_r+0x1c6>
 800aff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aff6:	445a      	add	r2, fp
 800aff8:	9209      	str	r2, [sp, #36]	@ 0x24
 800affa:	f89a 3000 	ldrb.w	r3, [sl]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 809f 	beq.w	800b142 <_svfiprintf_r+0x1c6>
 800b004:	2300      	movs	r3, #0
 800b006:	f04f 32ff 	mov.w	r2, #4294967295
 800b00a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b00e:	f10a 0a01 	add.w	sl, sl, #1
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	9307      	str	r3, [sp, #28]
 800b016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b01a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b01c:	4654      	mov	r4, sl
 800b01e:	2205      	movs	r2, #5
 800b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b024:	484e      	ldr	r0, [pc, #312]	@ (800b160 <_svfiprintf_r+0x1e4>)
 800b026:	f7fe fc60 	bl	80098ea <memchr>
 800b02a:	9a04      	ldr	r2, [sp, #16]
 800b02c:	b9d8      	cbnz	r0, 800b066 <_svfiprintf_r+0xea>
 800b02e:	06d0      	lsls	r0, r2, #27
 800b030:	bf44      	itt	mi
 800b032:	2320      	movmi	r3, #32
 800b034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b038:	0711      	lsls	r1, r2, #28
 800b03a:	bf44      	itt	mi
 800b03c:	232b      	movmi	r3, #43	@ 0x2b
 800b03e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b042:	f89a 3000 	ldrb.w	r3, [sl]
 800b046:	2b2a      	cmp	r3, #42	@ 0x2a
 800b048:	d015      	beq.n	800b076 <_svfiprintf_r+0xfa>
 800b04a:	4654      	mov	r4, sl
 800b04c:	2000      	movs	r0, #0
 800b04e:	f04f 0c0a 	mov.w	ip, #10
 800b052:	9a07      	ldr	r2, [sp, #28]
 800b054:	4621      	mov	r1, r4
 800b056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b05a:	3b30      	subs	r3, #48	@ 0x30
 800b05c:	2b09      	cmp	r3, #9
 800b05e:	d94b      	bls.n	800b0f8 <_svfiprintf_r+0x17c>
 800b060:	b1b0      	cbz	r0, 800b090 <_svfiprintf_r+0x114>
 800b062:	9207      	str	r2, [sp, #28]
 800b064:	e014      	b.n	800b090 <_svfiprintf_r+0x114>
 800b066:	eba0 0308 	sub.w	r3, r0, r8
 800b06a:	fa09 f303 	lsl.w	r3, r9, r3
 800b06e:	4313      	orrs	r3, r2
 800b070:	46a2      	mov	sl, r4
 800b072:	9304      	str	r3, [sp, #16]
 800b074:	e7d2      	b.n	800b01c <_svfiprintf_r+0xa0>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	1d19      	adds	r1, r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	9103      	str	r1, [sp, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bfbb      	ittet	lt
 800b082:	425b      	neglt	r3, r3
 800b084:	f042 0202 	orrlt.w	r2, r2, #2
 800b088:	9307      	strge	r3, [sp, #28]
 800b08a:	9307      	strlt	r3, [sp, #28]
 800b08c:	bfb8      	it	lt
 800b08e:	9204      	strlt	r2, [sp, #16]
 800b090:	7823      	ldrb	r3, [r4, #0]
 800b092:	2b2e      	cmp	r3, #46	@ 0x2e
 800b094:	d10a      	bne.n	800b0ac <_svfiprintf_r+0x130>
 800b096:	7863      	ldrb	r3, [r4, #1]
 800b098:	2b2a      	cmp	r3, #42	@ 0x2a
 800b09a:	d132      	bne.n	800b102 <_svfiprintf_r+0x186>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	3402      	adds	r4, #2
 800b0a0:	1d1a      	adds	r2, r3, #4
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	9203      	str	r2, [sp, #12]
 800b0a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b164 <_svfiprintf_r+0x1e8>
 800b0b0:	2203      	movs	r2, #3
 800b0b2:	4650      	mov	r0, sl
 800b0b4:	7821      	ldrb	r1, [r4, #0]
 800b0b6:	f7fe fc18 	bl	80098ea <memchr>
 800b0ba:	b138      	cbz	r0, 800b0cc <_svfiprintf_r+0x150>
 800b0bc:	2240      	movs	r2, #64	@ 0x40
 800b0be:	9b04      	ldr	r3, [sp, #16]
 800b0c0:	eba0 000a 	sub.w	r0, r0, sl
 800b0c4:	4082      	lsls	r2, r0
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	3401      	adds	r4, #1
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d0:	2206      	movs	r2, #6
 800b0d2:	4825      	ldr	r0, [pc, #148]	@ (800b168 <_svfiprintf_r+0x1ec>)
 800b0d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0d8:	f7fe fc07 	bl	80098ea <memchr>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d036      	beq.n	800b14e <_svfiprintf_r+0x1d2>
 800b0e0:	4b22      	ldr	r3, [pc, #136]	@ (800b16c <_svfiprintf_r+0x1f0>)
 800b0e2:	bb1b      	cbnz	r3, 800b12c <_svfiprintf_r+0x1b0>
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	3307      	adds	r3, #7
 800b0e8:	f023 0307 	bic.w	r3, r3, #7
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f2:	4433      	add	r3, r6
 800b0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f6:	e76a      	b.n	800afce <_svfiprintf_r+0x52>
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	2001      	movs	r0, #1
 800b0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b100:	e7a8      	b.n	800b054 <_svfiprintf_r+0xd8>
 800b102:	2300      	movs	r3, #0
 800b104:	f04f 0c0a 	mov.w	ip, #10
 800b108:	4619      	mov	r1, r3
 800b10a:	3401      	adds	r4, #1
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	4620      	mov	r0, r4
 800b110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b114:	3a30      	subs	r2, #48	@ 0x30
 800b116:	2a09      	cmp	r2, #9
 800b118:	d903      	bls.n	800b122 <_svfiprintf_r+0x1a6>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0c6      	beq.n	800b0ac <_svfiprintf_r+0x130>
 800b11e:	9105      	str	r1, [sp, #20]
 800b120:	e7c4      	b.n	800b0ac <_svfiprintf_r+0x130>
 800b122:	4604      	mov	r4, r0
 800b124:	2301      	movs	r3, #1
 800b126:	fb0c 2101 	mla	r1, ip, r1, r2
 800b12a:	e7f0      	b.n	800b10e <_svfiprintf_r+0x192>
 800b12c:	ab03      	add	r3, sp, #12
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	462a      	mov	r2, r5
 800b132:	4638      	mov	r0, r7
 800b134:	4b0e      	ldr	r3, [pc, #56]	@ (800b170 <_svfiprintf_r+0x1f4>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	f7fd fe1e 	bl	8008d78 <_printf_float>
 800b13c:	1c42      	adds	r2, r0, #1
 800b13e:	4606      	mov	r6, r0
 800b140:	d1d6      	bne.n	800b0f0 <_svfiprintf_r+0x174>
 800b142:	89ab      	ldrh	r3, [r5, #12]
 800b144:	065b      	lsls	r3, r3, #25
 800b146:	f53f af2d 	bmi.w	800afa4 <_svfiprintf_r+0x28>
 800b14a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b14c:	e72c      	b.n	800afa8 <_svfiprintf_r+0x2c>
 800b14e:	ab03      	add	r3, sp, #12
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	462a      	mov	r2, r5
 800b154:	4638      	mov	r0, r7
 800b156:	4b06      	ldr	r3, [pc, #24]	@ (800b170 <_svfiprintf_r+0x1f4>)
 800b158:	a904      	add	r1, sp, #16
 800b15a:	f7fe f8ab 	bl	80092b4 <_printf_i>
 800b15e:	e7ed      	b.n	800b13c <_svfiprintf_r+0x1c0>
 800b160:	0800cc40 	.word	0x0800cc40
 800b164:	0800cc46 	.word	0x0800cc46
 800b168:	0800cc4a 	.word	0x0800cc4a
 800b16c:	08008d79 	.word	0x08008d79
 800b170:	0800aec5 	.word	0x0800aec5

0800b174 <__sflush_r>:
 800b174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	0716      	lsls	r6, r2, #28
 800b17c:	4605      	mov	r5, r0
 800b17e:	460c      	mov	r4, r1
 800b180:	d454      	bmi.n	800b22c <__sflush_r+0xb8>
 800b182:	684b      	ldr	r3, [r1, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc02      	bgt.n	800b18e <__sflush_r+0x1a>
 800b188:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dd48      	ble.n	800b220 <__sflush_r+0xac>
 800b18e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b190:	2e00      	cmp	r6, #0
 800b192:	d045      	beq.n	800b220 <__sflush_r+0xac>
 800b194:	2300      	movs	r3, #0
 800b196:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b19a:	682f      	ldr	r7, [r5, #0]
 800b19c:	6a21      	ldr	r1, [r4, #32]
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	d030      	beq.n	800b204 <__sflush_r+0x90>
 800b1a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	0759      	lsls	r1, r3, #29
 800b1a8:	d505      	bpl.n	800b1b6 <__sflush_r+0x42>
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	1ad2      	subs	r2, r2, r3
 800b1ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1b0:	b10b      	cbz	r3, 800b1b6 <__sflush_r+0x42>
 800b1b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1b4:	1ad2      	subs	r2, r2, r3
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1bc:	6a21      	ldr	r1, [r4, #32]
 800b1be:	47b0      	blx	r6
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	d106      	bne.n	800b1d4 <__sflush_r+0x60>
 800b1c6:	6829      	ldr	r1, [r5, #0]
 800b1c8:	291d      	cmp	r1, #29
 800b1ca:	d82b      	bhi.n	800b224 <__sflush_r+0xb0>
 800b1cc:	4a28      	ldr	r2, [pc, #160]	@ (800b270 <__sflush_r+0xfc>)
 800b1ce:	410a      	asrs	r2, r1
 800b1d0:	07d6      	lsls	r6, r2, #31
 800b1d2:	d427      	bmi.n	800b224 <__sflush_r+0xb0>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	6062      	str	r2, [r4, #4]
 800b1d8:	6922      	ldr	r2, [r4, #16]
 800b1da:	04d9      	lsls	r1, r3, #19
 800b1dc:	6022      	str	r2, [r4, #0]
 800b1de:	d504      	bpl.n	800b1ea <__sflush_r+0x76>
 800b1e0:	1c42      	adds	r2, r0, #1
 800b1e2:	d101      	bne.n	800b1e8 <__sflush_r+0x74>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	b903      	cbnz	r3, 800b1ea <__sflush_r+0x76>
 800b1e8:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1ec:	602f      	str	r7, [r5, #0]
 800b1ee:	b1b9      	cbz	r1, 800b220 <__sflush_r+0xac>
 800b1f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1f4:	4299      	cmp	r1, r3
 800b1f6:	d002      	beq.n	800b1fe <__sflush_r+0x8a>
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f7ff f9e5 	bl	800a5c8 <_free_r>
 800b1fe:	2300      	movs	r3, #0
 800b200:	6363      	str	r3, [r4, #52]	@ 0x34
 800b202:	e00d      	b.n	800b220 <__sflush_r+0xac>
 800b204:	2301      	movs	r3, #1
 800b206:	4628      	mov	r0, r5
 800b208:	47b0      	blx	r6
 800b20a:	4602      	mov	r2, r0
 800b20c:	1c50      	adds	r0, r2, #1
 800b20e:	d1c9      	bne.n	800b1a4 <__sflush_r+0x30>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0c6      	beq.n	800b1a4 <__sflush_r+0x30>
 800b216:	2b1d      	cmp	r3, #29
 800b218:	d001      	beq.n	800b21e <__sflush_r+0xaa>
 800b21a:	2b16      	cmp	r3, #22
 800b21c:	d11d      	bne.n	800b25a <__sflush_r+0xe6>
 800b21e:	602f      	str	r7, [r5, #0]
 800b220:	2000      	movs	r0, #0
 800b222:	e021      	b.n	800b268 <__sflush_r+0xf4>
 800b224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b228:	b21b      	sxth	r3, r3
 800b22a:	e01a      	b.n	800b262 <__sflush_r+0xee>
 800b22c:	690f      	ldr	r7, [r1, #16]
 800b22e:	2f00      	cmp	r7, #0
 800b230:	d0f6      	beq.n	800b220 <__sflush_r+0xac>
 800b232:	0793      	lsls	r3, r2, #30
 800b234:	bf18      	it	ne
 800b236:	2300      	movne	r3, #0
 800b238:	680e      	ldr	r6, [r1, #0]
 800b23a:	bf08      	it	eq
 800b23c:	694b      	ldreq	r3, [r1, #20]
 800b23e:	1bf6      	subs	r6, r6, r7
 800b240:	600f      	str	r7, [r1, #0]
 800b242:	608b      	str	r3, [r1, #8]
 800b244:	2e00      	cmp	r6, #0
 800b246:	ddeb      	ble.n	800b220 <__sflush_r+0xac>
 800b248:	4633      	mov	r3, r6
 800b24a:	463a      	mov	r2, r7
 800b24c:	4628      	mov	r0, r5
 800b24e:	6a21      	ldr	r1, [r4, #32]
 800b250:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b254:	47e0      	blx	ip
 800b256:	2800      	cmp	r0, #0
 800b258:	dc07      	bgt.n	800b26a <__sflush_r+0xf6>
 800b25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b262:	f04f 30ff 	mov.w	r0, #4294967295
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26a:	4407      	add	r7, r0
 800b26c:	1a36      	subs	r6, r6, r0
 800b26e:	e7e9      	b.n	800b244 <__sflush_r+0xd0>
 800b270:	dfbffffe 	.word	0xdfbffffe

0800b274 <_fflush_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	690b      	ldr	r3, [r1, #16]
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	b913      	cbnz	r3, 800b284 <_fflush_r+0x10>
 800b27e:	2500      	movs	r5, #0
 800b280:	4628      	mov	r0, r5
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	b118      	cbz	r0, 800b28e <_fflush_r+0x1a>
 800b286:	6a03      	ldr	r3, [r0, #32]
 800b288:	b90b      	cbnz	r3, 800b28e <_fflush_r+0x1a>
 800b28a:	f7fe f9bf 	bl	800960c <__sinit>
 800b28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0f3      	beq.n	800b27e <_fflush_r+0xa>
 800b296:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b298:	07d0      	lsls	r0, r2, #31
 800b29a:	d404      	bmi.n	800b2a6 <_fflush_r+0x32>
 800b29c:	0599      	lsls	r1, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_fflush_r+0x32>
 800b2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2a2:	f7fe fb20 	bl	80098e6 <__retarget_lock_acquire_recursive>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7ff ff63 	bl	800b174 <__sflush_r>
 800b2ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	07da      	lsls	r2, r3, #31
 800b2b4:	d4e4      	bmi.n	800b280 <_fflush_r+0xc>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	059b      	lsls	r3, r3, #22
 800b2ba:	d4e1      	bmi.n	800b280 <_fflush_r+0xc>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2be:	f7fe fb13 	bl	80098e8 <__retarget_lock_release_recursive>
 800b2c2:	e7dd      	b.n	800b280 <_fflush_r+0xc>

0800b2c4 <memmove>:
 800b2c4:	4288      	cmp	r0, r1
 800b2c6:	b510      	push	{r4, lr}
 800b2c8:	eb01 0402 	add.w	r4, r1, r2
 800b2cc:	d902      	bls.n	800b2d4 <memmove+0x10>
 800b2ce:	4284      	cmp	r4, r0
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	d807      	bhi.n	800b2e4 <memmove+0x20>
 800b2d4:	1e43      	subs	r3, r0, #1
 800b2d6:	42a1      	cmp	r1, r4
 800b2d8:	d008      	beq.n	800b2ec <memmove+0x28>
 800b2da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2e2:	e7f8      	b.n	800b2d6 <memmove+0x12>
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	4402      	add	r2, r0
 800b2e8:	428a      	cmp	r2, r1
 800b2ea:	d100      	bne.n	800b2ee <memmove+0x2a>
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2f6:	e7f7      	b.n	800b2e8 <memmove+0x24>

0800b2f8 <_sbrk_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	4d05      	ldr	r5, [pc, #20]	@ (800b314 <_sbrk_r+0x1c>)
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f7f7 feb6 	bl	8003074 <_sbrk>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_sbrk_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_sbrk_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	2000167c 	.word	0x2000167c

0800b318 <__assert_func>:
 800b318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b31a:	4614      	mov	r4, r2
 800b31c:	461a      	mov	r2, r3
 800b31e:	4b09      	ldr	r3, [pc, #36]	@ (800b344 <__assert_func+0x2c>)
 800b320:	4605      	mov	r5, r0
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68d8      	ldr	r0, [r3, #12]
 800b326:	b954      	cbnz	r4, 800b33e <__assert_func+0x26>
 800b328:	4b07      	ldr	r3, [pc, #28]	@ (800b348 <__assert_func+0x30>)
 800b32a:	461c      	mov	r4, r3
 800b32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	462b      	mov	r3, r5
 800b334:	4905      	ldr	r1, [pc, #20]	@ (800b34c <__assert_func+0x34>)
 800b336:	f000 f86f 	bl	800b418 <fiprintf>
 800b33a:	f000 f87f 	bl	800b43c <abort>
 800b33e:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <__assert_func+0x38>)
 800b340:	e7f4      	b.n	800b32c <__assert_func+0x14>
 800b342:	bf00      	nop
 800b344:	20000030 	.word	0x20000030
 800b348:	0800cc96 	.word	0x0800cc96
 800b34c:	0800cc68 	.word	0x0800cc68
 800b350:	0800cc5b 	.word	0x0800cc5b

0800b354 <_calloc_r>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	fba1 5402 	umull	r5, r4, r1, r2
 800b35a:	b93c      	cbnz	r4, 800b36c <_calloc_r+0x18>
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7ff f9a5 	bl	800a6ac <_malloc_r>
 800b362:	4606      	mov	r6, r0
 800b364:	b928      	cbnz	r0, 800b372 <_calloc_r+0x1e>
 800b366:	2600      	movs	r6, #0
 800b368:	4630      	mov	r0, r6
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	220c      	movs	r2, #12
 800b36e:	6002      	str	r2, [r0, #0]
 800b370:	e7f9      	b.n	800b366 <_calloc_r+0x12>
 800b372:	462a      	mov	r2, r5
 800b374:	4621      	mov	r1, r4
 800b376:	f7fe f9e2 	bl	800973e <memset>
 800b37a:	e7f5      	b.n	800b368 <_calloc_r+0x14>

0800b37c <__ascii_mbtowc>:
 800b37c:	b082      	sub	sp, #8
 800b37e:	b901      	cbnz	r1, 800b382 <__ascii_mbtowc+0x6>
 800b380:	a901      	add	r1, sp, #4
 800b382:	b142      	cbz	r2, 800b396 <__ascii_mbtowc+0x1a>
 800b384:	b14b      	cbz	r3, 800b39a <__ascii_mbtowc+0x1e>
 800b386:	7813      	ldrb	r3, [r2, #0]
 800b388:	600b      	str	r3, [r1, #0]
 800b38a:	7812      	ldrb	r2, [r2, #0]
 800b38c:	1e10      	subs	r0, r2, #0
 800b38e:	bf18      	it	ne
 800b390:	2001      	movne	r0, #1
 800b392:	b002      	add	sp, #8
 800b394:	4770      	bx	lr
 800b396:	4610      	mov	r0, r2
 800b398:	e7fb      	b.n	800b392 <__ascii_mbtowc+0x16>
 800b39a:	f06f 0001 	mvn.w	r0, #1
 800b39e:	e7f8      	b.n	800b392 <__ascii_mbtowc+0x16>

0800b3a0 <_realloc_r>:
 800b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4615      	mov	r5, r2
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	b921      	cbnz	r1, 800b3b6 <_realloc_r+0x16>
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	f7ff b97b 	b.w	800a6ac <_malloc_r>
 800b3b6:	b92a      	cbnz	r2, 800b3c4 <_realloc_r+0x24>
 800b3b8:	f7ff f906 	bl	800a5c8 <_free_r>
 800b3bc:	2400      	movs	r4, #0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	f000 f841 	bl	800b44a <_malloc_usable_size_r>
 800b3c8:	4285      	cmp	r5, r0
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	d802      	bhi.n	800b3d4 <_realloc_r+0x34>
 800b3ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3d2:	d8f4      	bhi.n	800b3be <_realloc_r+0x1e>
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	f7ff f968 	bl	800a6ac <_malloc_r>
 800b3dc:	4607      	mov	r7, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0ec      	beq.n	800b3bc <_realloc_r+0x1c>
 800b3e2:	42b5      	cmp	r5, r6
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	bf28      	it	cs
 800b3ea:	4632      	movcs	r2, r6
 800b3ec:	f7fe fa8b 	bl	8009906 <memcpy>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	f7ff f8e8 	bl	800a5c8 <_free_r>
 800b3f8:	463c      	mov	r4, r7
 800b3fa:	e7e0      	b.n	800b3be <_realloc_r+0x1e>

0800b3fc <__ascii_wctomb>:
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	4608      	mov	r0, r1
 800b400:	b141      	cbz	r1, 800b414 <__ascii_wctomb+0x18>
 800b402:	2aff      	cmp	r2, #255	@ 0xff
 800b404:	d904      	bls.n	800b410 <__ascii_wctomb+0x14>
 800b406:	228a      	movs	r2, #138	@ 0x8a
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	4770      	bx	lr
 800b410:	2001      	movs	r0, #1
 800b412:	700a      	strb	r2, [r1, #0]
 800b414:	4770      	bx	lr
	...

0800b418 <fiprintf>:
 800b418:	b40e      	push	{r1, r2, r3}
 800b41a:	b503      	push	{r0, r1, lr}
 800b41c:	4601      	mov	r1, r0
 800b41e:	ab03      	add	r3, sp, #12
 800b420:	4805      	ldr	r0, [pc, #20]	@ (800b438 <fiprintf+0x20>)
 800b422:	f853 2b04 	ldr.w	r2, [r3], #4
 800b426:	6800      	ldr	r0, [r0, #0]
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	f000 f83d 	bl	800b4a8 <_vfiprintf_r>
 800b42e:	b002      	add	sp, #8
 800b430:	f85d eb04 	ldr.w	lr, [sp], #4
 800b434:	b003      	add	sp, #12
 800b436:	4770      	bx	lr
 800b438:	20000030 	.word	0x20000030

0800b43c <abort>:
 800b43c:	2006      	movs	r0, #6
 800b43e:	b508      	push	{r3, lr}
 800b440:	f000 fa06 	bl	800b850 <raise>
 800b444:	2001      	movs	r0, #1
 800b446:	f7f7 fda0 	bl	8002f8a <_exit>

0800b44a <_malloc_usable_size_r>:
 800b44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b44e:	1f18      	subs	r0, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	bfbc      	itt	lt
 800b454:	580b      	ldrlt	r3, [r1, r0]
 800b456:	18c0      	addlt	r0, r0, r3
 800b458:	4770      	bx	lr

0800b45a <__sfputc_r>:
 800b45a:	6893      	ldr	r3, [r2, #8]
 800b45c:	b410      	push	{r4}
 800b45e:	3b01      	subs	r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	6093      	str	r3, [r2, #8]
 800b464:	da07      	bge.n	800b476 <__sfputc_r+0x1c>
 800b466:	6994      	ldr	r4, [r2, #24]
 800b468:	42a3      	cmp	r3, r4
 800b46a:	db01      	blt.n	800b470 <__sfputc_r+0x16>
 800b46c:	290a      	cmp	r1, #10
 800b46e:	d102      	bne.n	800b476 <__sfputc_r+0x1c>
 800b470:	bc10      	pop	{r4}
 800b472:	f000 b931 	b.w	800b6d8 <__swbuf_r>
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	1c58      	adds	r0, r3, #1
 800b47a:	6010      	str	r0, [r2, #0]
 800b47c:	7019      	strb	r1, [r3, #0]
 800b47e:	4608      	mov	r0, r1
 800b480:	bc10      	pop	{r4}
 800b482:	4770      	bx	lr

0800b484 <__sfputs_r>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	4606      	mov	r6, r0
 800b488:	460f      	mov	r7, r1
 800b48a:	4614      	mov	r4, r2
 800b48c:	18d5      	adds	r5, r2, r3
 800b48e:	42ac      	cmp	r4, r5
 800b490:	d101      	bne.n	800b496 <__sfputs_r+0x12>
 800b492:	2000      	movs	r0, #0
 800b494:	e007      	b.n	800b4a6 <__sfputs_r+0x22>
 800b496:	463a      	mov	r2, r7
 800b498:	4630      	mov	r0, r6
 800b49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b49e:	f7ff ffdc 	bl	800b45a <__sfputc_r>
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	d1f3      	bne.n	800b48e <__sfputs_r+0xa>
 800b4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4a8 <_vfiprintf_r>:
 800b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	4614      	mov	r4, r2
 800b4b0:	4698      	mov	r8, r3
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	b09d      	sub	sp, #116	@ 0x74
 800b4b6:	b118      	cbz	r0, 800b4c0 <_vfiprintf_r+0x18>
 800b4b8:	6a03      	ldr	r3, [r0, #32]
 800b4ba:	b90b      	cbnz	r3, 800b4c0 <_vfiprintf_r+0x18>
 800b4bc:	f7fe f8a6 	bl	800960c <__sinit>
 800b4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4c2:	07d9      	lsls	r1, r3, #31
 800b4c4:	d405      	bmi.n	800b4d2 <_vfiprintf_r+0x2a>
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	059a      	lsls	r2, r3, #22
 800b4ca:	d402      	bmi.n	800b4d2 <_vfiprintf_r+0x2a>
 800b4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ce:	f7fe fa0a 	bl	80098e6 <__retarget_lock_acquire_recursive>
 800b4d2:	89ab      	ldrh	r3, [r5, #12]
 800b4d4:	071b      	lsls	r3, r3, #28
 800b4d6:	d501      	bpl.n	800b4dc <_vfiprintf_r+0x34>
 800b4d8:	692b      	ldr	r3, [r5, #16]
 800b4da:	b99b      	cbnz	r3, 800b504 <_vfiprintf_r+0x5c>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f000 f938 	bl	800b754 <__swsetup_r>
 800b4e4:	b170      	cbz	r0, 800b504 <_vfiprintf_r+0x5c>
 800b4e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4e8:	07dc      	lsls	r4, r3, #31
 800b4ea:	d504      	bpl.n	800b4f6 <_vfiprintf_r+0x4e>
 800b4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f0:	b01d      	add	sp, #116	@ 0x74
 800b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	0598      	lsls	r0, r3, #22
 800b4fa:	d4f7      	bmi.n	800b4ec <_vfiprintf_r+0x44>
 800b4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4fe:	f7fe f9f3 	bl	80098e8 <__retarget_lock_release_recursive>
 800b502:	e7f3      	b.n	800b4ec <_vfiprintf_r+0x44>
 800b504:	2300      	movs	r3, #0
 800b506:	9309      	str	r3, [sp, #36]	@ 0x24
 800b508:	2320      	movs	r3, #32
 800b50a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b50e:	2330      	movs	r3, #48	@ 0x30
 800b510:	f04f 0901 	mov.w	r9, #1
 800b514:	f8cd 800c 	str.w	r8, [sp, #12]
 800b518:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b6c4 <_vfiprintf_r+0x21c>
 800b51c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b520:	4623      	mov	r3, r4
 800b522:	469a      	mov	sl, r3
 800b524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b528:	b10a      	cbz	r2, 800b52e <_vfiprintf_r+0x86>
 800b52a:	2a25      	cmp	r2, #37	@ 0x25
 800b52c:	d1f9      	bne.n	800b522 <_vfiprintf_r+0x7a>
 800b52e:	ebba 0b04 	subs.w	fp, sl, r4
 800b532:	d00b      	beq.n	800b54c <_vfiprintf_r+0xa4>
 800b534:	465b      	mov	r3, fp
 800b536:	4622      	mov	r2, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7ff ffa2 	bl	800b484 <__sfputs_r>
 800b540:	3001      	adds	r0, #1
 800b542:	f000 80a7 	beq.w	800b694 <_vfiprintf_r+0x1ec>
 800b546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b548:	445a      	add	r2, fp
 800b54a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b54c:	f89a 3000 	ldrb.w	r3, [sl]
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 809f 	beq.w	800b694 <_vfiprintf_r+0x1ec>
 800b556:	2300      	movs	r3, #0
 800b558:	f04f 32ff 	mov.w	r2, #4294967295
 800b55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b560:	f10a 0a01 	add.w	sl, sl, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	9307      	str	r3, [sp, #28]
 800b568:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b56c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b56e:	4654      	mov	r4, sl
 800b570:	2205      	movs	r2, #5
 800b572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b576:	4853      	ldr	r0, [pc, #332]	@ (800b6c4 <_vfiprintf_r+0x21c>)
 800b578:	f7fe f9b7 	bl	80098ea <memchr>
 800b57c:	9a04      	ldr	r2, [sp, #16]
 800b57e:	b9d8      	cbnz	r0, 800b5b8 <_vfiprintf_r+0x110>
 800b580:	06d1      	lsls	r1, r2, #27
 800b582:	bf44      	itt	mi
 800b584:	2320      	movmi	r3, #32
 800b586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b58a:	0713      	lsls	r3, r2, #28
 800b58c:	bf44      	itt	mi
 800b58e:	232b      	movmi	r3, #43	@ 0x2b
 800b590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b594:	f89a 3000 	ldrb.w	r3, [sl]
 800b598:	2b2a      	cmp	r3, #42	@ 0x2a
 800b59a:	d015      	beq.n	800b5c8 <_vfiprintf_r+0x120>
 800b59c:	4654      	mov	r4, sl
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f04f 0c0a 	mov.w	ip, #10
 800b5a4:	9a07      	ldr	r2, [sp, #28]
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ac:	3b30      	subs	r3, #48	@ 0x30
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	d94b      	bls.n	800b64a <_vfiprintf_r+0x1a2>
 800b5b2:	b1b0      	cbz	r0, 800b5e2 <_vfiprintf_r+0x13a>
 800b5b4:	9207      	str	r2, [sp, #28]
 800b5b6:	e014      	b.n	800b5e2 <_vfiprintf_r+0x13a>
 800b5b8:	eba0 0308 	sub.w	r3, r0, r8
 800b5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	46a2      	mov	sl, r4
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	e7d2      	b.n	800b56e <_vfiprintf_r+0xc6>
 800b5c8:	9b03      	ldr	r3, [sp, #12]
 800b5ca:	1d19      	adds	r1, r3, #4
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	9103      	str	r1, [sp, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bfbb      	ittet	lt
 800b5d4:	425b      	neglt	r3, r3
 800b5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b5da:	9307      	strge	r3, [sp, #28]
 800b5dc:	9307      	strlt	r3, [sp, #28]
 800b5de:	bfb8      	it	lt
 800b5e0:	9204      	strlt	r2, [sp, #16]
 800b5e2:	7823      	ldrb	r3, [r4, #0]
 800b5e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5e6:	d10a      	bne.n	800b5fe <_vfiprintf_r+0x156>
 800b5e8:	7863      	ldrb	r3, [r4, #1]
 800b5ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ec:	d132      	bne.n	800b654 <_vfiprintf_r+0x1ac>
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	3402      	adds	r4, #2
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	9203      	str	r2, [sp, #12]
 800b5f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5fc:	9305      	str	r3, [sp, #20]
 800b5fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b6c8 <_vfiprintf_r+0x220>
 800b602:	2203      	movs	r2, #3
 800b604:	4650      	mov	r0, sl
 800b606:	7821      	ldrb	r1, [r4, #0]
 800b608:	f7fe f96f 	bl	80098ea <memchr>
 800b60c:	b138      	cbz	r0, 800b61e <_vfiprintf_r+0x176>
 800b60e:	2240      	movs	r2, #64	@ 0x40
 800b610:	9b04      	ldr	r3, [sp, #16]
 800b612:	eba0 000a 	sub.w	r0, r0, sl
 800b616:	4082      	lsls	r2, r0
 800b618:	4313      	orrs	r3, r2
 800b61a:	3401      	adds	r4, #1
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b622:	2206      	movs	r2, #6
 800b624:	4829      	ldr	r0, [pc, #164]	@ (800b6cc <_vfiprintf_r+0x224>)
 800b626:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b62a:	f7fe f95e 	bl	80098ea <memchr>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d03f      	beq.n	800b6b2 <_vfiprintf_r+0x20a>
 800b632:	4b27      	ldr	r3, [pc, #156]	@ (800b6d0 <_vfiprintf_r+0x228>)
 800b634:	bb1b      	cbnz	r3, 800b67e <_vfiprintf_r+0x1d6>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	3307      	adds	r3, #7
 800b63a:	f023 0307 	bic.w	r3, r3, #7
 800b63e:	3308      	adds	r3, #8
 800b640:	9303      	str	r3, [sp, #12]
 800b642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b644:	443b      	add	r3, r7
 800b646:	9309      	str	r3, [sp, #36]	@ 0x24
 800b648:	e76a      	b.n	800b520 <_vfiprintf_r+0x78>
 800b64a:	460c      	mov	r4, r1
 800b64c:	2001      	movs	r0, #1
 800b64e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b652:	e7a8      	b.n	800b5a6 <_vfiprintf_r+0xfe>
 800b654:	2300      	movs	r3, #0
 800b656:	f04f 0c0a 	mov.w	ip, #10
 800b65a:	4619      	mov	r1, r3
 800b65c:	3401      	adds	r4, #1
 800b65e:	9305      	str	r3, [sp, #20]
 800b660:	4620      	mov	r0, r4
 800b662:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b666:	3a30      	subs	r2, #48	@ 0x30
 800b668:	2a09      	cmp	r2, #9
 800b66a:	d903      	bls.n	800b674 <_vfiprintf_r+0x1cc>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0c6      	beq.n	800b5fe <_vfiprintf_r+0x156>
 800b670:	9105      	str	r1, [sp, #20]
 800b672:	e7c4      	b.n	800b5fe <_vfiprintf_r+0x156>
 800b674:	4604      	mov	r4, r0
 800b676:	2301      	movs	r3, #1
 800b678:	fb0c 2101 	mla	r1, ip, r1, r2
 800b67c:	e7f0      	b.n	800b660 <_vfiprintf_r+0x1b8>
 800b67e:	ab03      	add	r3, sp, #12
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	462a      	mov	r2, r5
 800b684:	4630      	mov	r0, r6
 800b686:	4b13      	ldr	r3, [pc, #76]	@ (800b6d4 <_vfiprintf_r+0x22c>)
 800b688:	a904      	add	r1, sp, #16
 800b68a:	f7fd fb75 	bl	8008d78 <_printf_float>
 800b68e:	4607      	mov	r7, r0
 800b690:	1c78      	adds	r0, r7, #1
 800b692:	d1d6      	bne.n	800b642 <_vfiprintf_r+0x19a>
 800b694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b696:	07d9      	lsls	r1, r3, #31
 800b698:	d405      	bmi.n	800b6a6 <_vfiprintf_r+0x1fe>
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	059a      	lsls	r2, r3, #22
 800b69e:	d402      	bmi.n	800b6a6 <_vfiprintf_r+0x1fe>
 800b6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6a2:	f7fe f921 	bl	80098e8 <__retarget_lock_release_recursive>
 800b6a6:	89ab      	ldrh	r3, [r5, #12]
 800b6a8:	065b      	lsls	r3, r3, #25
 800b6aa:	f53f af1f 	bmi.w	800b4ec <_vfiprintf_r+0x44>
 800b6ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6b0:	e71e      	b.n	800b4f0 <_vfiprintf_r+0x48>
 800b6b2:	ab03      	add	r3, sp, #12
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	462a      	mov	r2, r5
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	4b06      	ldr	r3, [pc, #24]	@ (800b6d4 <_vfiprintf_r+0x22c>)
 800b6bc:	a904      	add	r1, sp, #16
 800b6be:	f7fd fdf9 	bl	80092b4 <_printf_i>
 800b6c2:	e7e4      	b.n	800b68e <_vfiprintf_r+0x1e6>
 800b6c4:	0800cc40 	.word	0x0800cc40
 800b6c8:	0800cc46 	.word	0x0800cc46
 800b6cc:	0800cc4a 	.word	0x0800cc4a
 800b6d0:	08008d79 	.word	0x08008d79
 800b6d4:	0800b485 	.word	0x0800b485

0800b6d8 <__swbuf_r>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	460e      	mov	r6, r1
 800b6dc:	4614      	mov	r4, r2
 800b6de:	4605      	mov	r5, r0
 800b6e0:	b118      	cbz	r0, 800b6ea <__swbuf_r+0x12>
 800b6e2:	6a03      	ldr	r3, [r0, #32]
 800b6e4:	b90b      	cbnz	r3, 800b6ea <__swbuf_r+0x12>
 800b6e6:	f7fd ff91 	bl	800960c <__sinit>
 800b6ea:	69a3      	ldr	r3, [r4, #24]
 800b6ec:	60a3      	str	r3, [r4, #8]
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	071a      	lsls	r2, r3, #28
 800b6f2:	d501      	bpl.n	800b6f8 <__swbuf_r+0x20>
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	b943      	cbnz	r3, 800b70a <__swbuf_r+0x32>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f000 f82a 	bl	800b754 <__swsetup_r>
 800b700:	b118      	cbz	r0, 800b70a <__swbuf_r+0x32>
 800b702:	f04f 37ff 	mov.w	r7, #4294967295
 800b706:	4638      	mov	r0, r7
 800b708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	6922      	ldr	r2, [r4, #16]
 800b70e:	b2f6      	uxtb	r6, r6
 800b710:	1a98      	subs	r0, r3, r2
 800b712:	6963      	ldr	r3, [r4, #20]
 800b714:	4637      	mov	r7, r6
 800b716:	4283      	cmp	r3, r0
 800b718:	dc05      	bgt.n	800b726 <__swbuf_r+0x4e>
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f7ff fda9 	bl	800b274 <_fflush_r>
 800b722:	2800      	cmp	r0, #0
 800b724:	d1ed      	bne.n	800b702 <__swbuf_r+0x2a>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	3b01      	subs	r3, #1
 800b72a:	60a3      	str	r3, [r4, #8]
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	6022      	str	r2, [r4, #0]
 800b732:	701e      	strb	r6, [r3, #0]
 800b734:	6962      	ldr	r2, [r4, #20]
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	429a      	cmp	r2, r3
 800b73a:	d004      	beq.n	800b746 <__swbuf_r+0x6e>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d5e1      	bpl.n	800b706 <__swbuf_r+0x2e>
 800b742:	2e0a      	cmp	r6, #10
 800b744:	d1df      	bne.n	800b706 <__swbuf_r+0x2e>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f7ff fd93 	bl	800b274 <_fflush_r>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d0d9      	beq.n	800b706 <__swbuf_r+0x2e>
 800b752:	e7d6      	b.n	800b702 <__swbuf_r+0x2a>

0800b754 <__swsetup_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4b29      	ldr	r3, [pc, #164]	@ (800b7fc <__swsetup_r+0xa8>)
 800b758:	4605      	mov	r5, r0
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	460c      	mov	r4, r1
 800b75e:	b118      	cbz	r0, 800b768 <__swsetup_r+0x14>
 800b760:	6a03      	ldr	r3, [r0, #32]
 800b762:	b90b      	cbnz	r3, 800b768 <__swsetup_r+0x14>
 800b764:	f7fd ff52 	bl	800960c <__sinit>
 800b768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76c:	0719      	lsls	r1, r3, #28
 800b76e:	d422      	bmi.n	800b7b6 <__swsetup_r+0x62>
 800b770:	06da      	lsls	r2, r3, #27
 800b772:	d407      	bmi.n	800b784 <__swsetup_r+0x30>
 800b774:	2209      	movs	r2, #9
 800b776:	602a      	str	r2, [r5, #0]
 800b778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b77c:	f04f 30ff 	mov.w	r0, #4294967295
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	e033      	b.n	800b7ec <__swsetup_r+0x98>
 800b784:	0758      	lsls	r0, r3, #29
 800b786:	d512      	bpl.n	800b7ae <__swsetup_r+0x5a>
 800b788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b78a:	b141      	cbz	r1, 800b79e <__swsetup_r+0x4a>
 800b78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b790:	4299      	cmp	r1, r3
 800b792:	d002      	beq.n	800b79a <__swsetup_r+0x46>
 800b794:	4628      	mov	r0, r5
 800b796:	f7fe ff17 	bl	800a5c8 <_free_r>
 800b79a:	2300      	movs	r3, #0
 800b79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7a4:	81a3      	strh	r3, [r4, #12]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f043 0308 	orr.w	r3, r3, #8
 800b7b4:	81a3      	strh	r3, [r4, #12]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	b94b      	cbnz	r3, 800b7ce <__swsetup_r+0x7a>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c4:	d003      	beq.n	800b7ce <__swsetup_r+0x7a>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 f882 	bl	800b8d2 <__smakebuf_r>
 800b7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d2:	f013 0201 	ands.w	r2, r3, #1
 800b7d6:	d00a      	beq.n	800b7ee <__swsetup_r+0x9a>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	60a2      	str	r2, [r4, #8]
 800b7dc:	6962      	ldr	r2, [r4, #20]
 800b7de:	4252      	negs	r2, r2
 800b7e0:	61a2      	str	r2, [r4, #24]
 800b7e2:	6922      	ldr	r2, [r4, #16]
 800b7e4:	b942      	cbnz	r2, 800b7f8 <__swsetup_r+0xa4>
 800b7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7ea:	d1c5      	bne.n	800b778 <__swsetup_r+0x24>
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	0799      	lsls	r1, r3, #30
 800b7f0:	bf58      	it	pl
 800b7f2:	6962      	ldrpl	r2, [r4, #20]
 800b7f4:	60a2      	str	r2, [r4, #8]
 800b7f6:	e7f4      	b.n	800b7e2 <__swsetup_r+0x8e>
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e7f7      	b.n	800b7ec <__swsetup_r+0x98>
 800b7fc:	20000030 	.word	0x20000030

0800b800 <_raise_r>:
 800b800:	291f      	cmp	r1, #31
 800b802:	b538      	push	{r3, r4, r5, lr}
 800b804:	4605      	mov	r5, r0
 800b806:	460c      	mov	r4, r1
 800b808:	d904      	bls.n	800b814 <_raise_r+0x14>
 800b80a:	2316      	movs	r3, #22
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	f04f 30ff 	mov.w	r0, #4294967295
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b816:	b112      	cbz	r2, 800b81e <_raise_r+0x1e>
 800b818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b81c:	b94b      	cbnz	r3, 800b832 <_raise_r+0x32>
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 f830 	bl	800b884 <_getpid_r>
 800b824:	4622      	mov	r2, r4
 800b826:	4601      	mov	r1, r0
 800b828:	4628      	mov	r0, r5
 800b82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b82e:	f000 b817 	b.w	800b860 <_kill_r>
 800b832:	2b01      	cmp	r3, #1
 800b834:	d00a      	beq.n	800b84c <_raise_r+0x4c>
 800b836:	1c59      	adds	r1, r3, #1
 800b838:	d103      	bne.n	800b842 <_raise_r+0x42>
 800b83a:	2316      	movs	r3, #22
 800b83c:	6003      	str	r3, [r0, #0]
 800b83e:	2001      	movs	r0, #1
 800b840:	e7e7      	b.n	800b812 <_raise_r+0x12>
 800b842:	2100      	movs	r1, #0
 800b844:	4620      	mov	r0, r4
 800b846:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b84a:	4798      	blx	r3
 800b84c:	2000      	movs	r0, #0
 800b84e:	e7e0      	b.n	800b812 <_raise_r+0x12>

0800b850 <raise>:
 800b850:	4b02      	ldr	r3, [pc, #8]	@ (800b85c <raise+0xc>)
 800b852:	4601      	mov	r1, r0
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	f7ff bfd3 	b.w	800b800 <_raise_r>
 800b85a:	bf00      	nop
 800b85c:	20000030 	.word	0x20000030

0800b860 <_kill_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	2300      	movs	r3, #0
 800b864:	4d06      	ldr	r5, [pc, #24]	@ (800b880 <_kill_r+0x20>)
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	4611      	mov	r1, r2
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	f7f7 fb7c 	bl	8002f6a <_kill>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	d102      	bne.n	800b87c <_kill_r+0x1c>
 800b876:	682b      	ldr	r3, [r5, #0]
 800b878:	b103      	cbz	r3, 800b87c <_kill_r+0x1c>
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	bf00      	nop
 800b880:	2000167c 	.word	0x2000167c

0800b884 <_getpid_r>:
 800b884:	f7f7 bb6a 	b.w	8002f5c <_getpid>

0800b888 <__swhatbuf_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	460c      	mov	r4, r1
 800b88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b890:	4615      	mov	r5, r2
 800b892:	2900      	cmp	r1, #0
 800b894:	461e      	mov	r6, r3
 800b896:	b096      	sub	sp, #88	@ 0x58
 800b898:	da0c      	bge.n	800b8b4 <__swhatbuf_r+0x2c>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	2100      	movs	r1, #0
 800b89e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8a2:	bf14      	ite	ne
 800b8a4:	2340      	movne	r3, #64	@ 0x40
 800b8a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	6031      	str	r1, [r6, #0]
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	b016      	add	sp, #88	@ 0x58
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	466a      	mov	r2, sp
 800b8b6:	f000 f849 	bl	800b94c <_fstat_r>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	dbed      	blt.n	800b89a <__swhatbuf_r+0x12>
 800b8be:	9901      	ldr	r1, [sp, #4]
 800b8c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8c8:	4259      	negs	r1, r3
 800b8ca:	4159      	adcs	r1, r3
 800b8cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8d0:	e7eb      	b.n	800b8aa <__swhatbuf_r+0x22>

0800b8d2 <__smakebuf_r>:
 800b8d2:	898b      	ldrh	r3, [r1, #12]
 800b8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8d6:	079d      	lsls	r5, r3, #30
 800b8d8:	4606      	mov	r6, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	d507      	bpl.n	800b8ee <__smakebuf_r+0x1c>
 800b8de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	6163      	str	r3, [r4, #20]
 800b8ea:	b003      	add	sp, #12
 800b8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ee:	466a      	mov	r2, sp
 800b8f0:	ab01      	add	r3, sp, #4
 800b8f2:	f7ff ffc9 	bl	800b888 <__swhatbuf_r>
 800b8f6:	9f00      	ldr	r7, [sp, #0]
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7fe fed5 	bl	800a6ac <_malloc_r>
 800b902:	b948      	cbnz	r0, 800b918 <__smakebuf_r+0x46>
 800b904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b908:	059a      	lsls	r2, r3, #22
 800b90a:	d4ee      	bmi.n	800b8ea <__smakebuf_r+0x18>
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	e7e2      	b.n	800b8de <__smakebuf_r+0xc>
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b922:	81a3      	strh	r3, [r4, #12]
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	b15b      	cbz	r3, 800b942 <__smakebuf_r+0x70>
 800b92a:	4630      	mov	r0, r6
 800b92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b930:	f000 f81e 	bl	800b970 <_isatty_r>
 800b934:	b128      	cbz	r0, 800b942 <__smakebuf_r+0x70>
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	f043 0301 	orr.w	r3, r3, #1
 800b940:	81a3      	strh	r3, [r4, #12]
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	431d      	orrs	r5, r3
 800b946:	81a5      	strh	r5, [r4, #12]
 800b948:	e7cf      	b.n	800b8ea <__smakebuf_r+0x18>
	...

0800b94c <_fstat_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	2300      	movs	r3, #0
 800b950:	4d06      	ldr	r5, [pc, #24]	@ (800b96c <_fstat_r+0x20>)
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f7f7 fb65 	bl	8003028 <_fstat>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d102      	bne.n	800b968 <_fstat_r+0x1c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	b103      	cbz	r3, 800b968 <_fstat_r+0x1c>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	2000167c 	.word	0x2000167c

0800b970 <_isatty_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	2300      	movs	r3, #0
 800b974:	4d05      	ldr	r5, [pc, #20]	@ (800b98c <_isatty_r+0x1c>)
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f7 fb63 	bl	8003046 <_isatty>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_isatty_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_isatty_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	2000167c 	.word	0x2000167c

0800b990 <pow>:
 800b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b994:	4614      	mov	r4, r2
 800b996:	461d      	mov	r5, r3
 800b998:	4680      	mov	r8, r0
 800b99a:	4689      	mov	r9, r1
 800b99c:	f000 f868 	bl	800ba70 <__ieee754_pow>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460f      	mov	r7, r1
 800b9a6:	462b      	mov	r3, r5
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f5 f8e2 	bl	8000b74 <__aeabi_dcmpun>
 800b9b0:	bbc8      	cbnz	r0, 800ba26 <pow+0x96>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	f7f5 f8a9 	bl	8000b10 <__aeabi_dcmpeq>
 800b9be:	b1b8      	cbz	r0, 800b9f0 <pow+0x60>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f7f5 f8a2 	bl	8000b10 <__aeabi_dcmpeq>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d141      	bne.n	800ba54 <pow+0xc4>
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	f000 f844 	bl	800ba60 <finite>
 800b9d8:	b328      	cbz	r0, 800ba26 <pow+0x96>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f5 f89f 	bl	8000b24 <__aeabi_dcmplt>
 800b9e6:	b1f0      	cbz	r0, 800ba26 <pow+0x96>
 800b9e8:	f7fd ff52 	bl	8009890 <__errno>
 800b9ec:	2322      	movs	r3, #34	@ 0x22
 800b9ee:	e019      	b.n	800ba24 <pow+0x94>
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	f000 f834 	bl	800ba60 <finite>
 800b9f8:	b9c8      	cbnz	r0, 800ba2e <pow+0x9e>
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f000 f82f 	bl	800ba60 <finite>
 800ba02:	b1a0      	cbz	r0, 800ba2e <pow+0x9e>
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f000 f82a 	bl	800ba60 <finite>
 800ba0c:	b178      	cbz	r0, 800ba2e <pow+0x9e>
 800ba0e:	4632      	mov	r2, r6
 800ba10:	463b      	mov	r3, r7
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f5 f8ad 	bl	8000b74 <__aeabi_dcmpun>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d0e4      	beq.n	800b9e8 <pow+0x58>
 800ba1e:	f7fd ff37 	bl	8009890 <__errno>
 800ba22:	2321      	movs	r3, #33	@ 0x21
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2300      	movs	r3, #0
 800ba32:	4630      	mov	r0, r6
 800ba34:	4639      	mov	r1, r7
 800ba36:	f7f5 f86b 	bl	8000b10 <__aeabi_dcmpeq>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0f3      	beq.n	800ba26 <pow+0x96>
 800ba3e:	4640      	mov	r0, r8
 800ba40:	4649      	mov	r1, r9
 800ba42:	f000 f80d 	bl	800ba60 <finite>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d0ed      	beq.n	800ba26 <pow+0x96>
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f000 f807 	bl	800ba60 <finite>
 800ba52:	e7c8      	b.n	800b9e6 <pow+0x56>
 800ba54:	2600      	movs	r6, #0
 800ba56:	4f01      	ldr	r7, [pc, #4]	@ (800ba5c <pow+0xcc>)
 800ba58:	e7e5      	b.n	800ba26 <pow+0x96>
 800ba5a:	bf00      	nop
 800ba5c:	3ff00000 	.word	0x3ff00000

0800ba60 <finite>:
 800ba60:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800ba64:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ba68:	0fc0      	lsrs	r0, r0, #31
 800ba6a:	4770      	bx	lr
 800ba6c:	0000      	movs	r0, r0
	...

0800ba70 <__ieee754_pow>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	b091      	sub	sp, #68	@ 0x44
 800ba76:	e9cd 2300 	strd	r2, r3, [sp]
 800ba7a:	468b      	mov	fp, r1
 800ba7c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800ba80:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800ba84:	4682      	mov	sl, r0
 800ba86:	ea57 0001 	orrs.w	r0, r7, r1
 800ba8a:	d112      	bne.n	800bab2 <__ieee754_pow+0x42>
 800ba8c:	4653      	mov	r3, sl
 800ba8e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800ba92:	18db      	adds	r3, r3, r3
 800ba94:	4152      	adcs	r2, r2
 800ba96:	4298      	cmp	r0, r3
 800ba98:	4b91      	ldr	r3, [pc, #580]	@ (800bce0 <__ieee754_pow+0x270>)
 800ba9a:	4193      	sbcs	r3, r2
 800ba9c:	f080 84ce 	bcs.w	800c43c <__ieee754_pow+0x9cc>
 800baa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baa4:	4650      	mov	r0, sl
 800baa6:	4659      	mov	r1, fp
 800baa8:	f7f4 fc14 	bl	80002d4 <__adddf3>
 800baac:	b011      	add	sp, #68	@ 0x44
 800baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab2:	4b8c      	ldr	r3, [pc, #560]	@ (800bce4 <__ieee754_pow+0x274>)
 800bab4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800bab8:	429e      	cmp	r6, r3
 800baba:	465d      	mov	r5, fp
 800babc:	46d1      	mov	r9, sl
 800babe:	d807      	bhi.n	800bad0 <__ieee754_pow+0x60>
 800bac0:	d102      	bne.n	800bac8 <__ieee754_pow+0x58>
 800bac2:	f1ba 0f00 	cmp.w	sl, #0
 800bac6:	d1eb      	bne.n	800baa0 <__ieee754_pow+0x30>
 800bac8:	429f      	cmp	r7, r3
 800baca:	d801      	bhi.n	800bad0 <__ieee754_pow+0x60>
 800bacc:	d10f      	bne.n	800baee <__ieee754_pow+0x7e>
 800bace:	b171      	cbz	r1, 800baee <__ieee754_pow+0x7e>
 800bad0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bad4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bad8:	ea55 0509 	orrs.w	r5, r5, r9
 800badc:	d1e0      	bne.n	800baa0 <__ieee754_pow+0x30>
 800bade:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bae2:	18db      	adds	r3, r3, r3
 800bae4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bae8:	4152      	adcs	r2, r2
 800baea:	429d      	cmp	r5, r3
 800baec:	e7d4      	b.n	800ba98 <__ieee754_pow+0x28>
 800baee:	2d00      	cmp	r5, #0
 800baf0:	4633      	mov	r3, r6
 800baf2:	da39      	bge.n	800bb68 <__ieee754_pow+0xf8>
 800baf4:	4a7c      	ldr	r2, [pc, #496]	@ (800bce8 <__ieee754_pow+0x278>)
 800baf6:	4297      	cmp	r7, r2
 800baf8:	d84e      	bhi.n	800bb98 <__ieee754_pow+0x128>
 800bafa:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bafe:	4297      	cmp	r7, r2
 800bb00:	f240 84ab 	bls.w	800c45a <__ieee754_pow+0x9ea>
 800bb04:	153a      	asrs	r2, r7, #20
 800bb06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb0a:	2a14      	cmp	r2, #20
 800bb0c:	dd0f      	ble.n	800bb2e <__ieee754_pow+0xbe>
 800bb0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bb12:	fa21 f402 	lsr.w	r4, r1, r2
 800bb16:	fa04 f202 	lsl.w	r2, r4, r2
 800bb1a:	428a      	cmp	r2, r1
 800bb1c:	f040 849d 	bne.w	800c45a <__ieee754_pow+0x9ea>
 800bb20:	f004 0401 	and.w	r4, r4, #1
 800bb24:	f1c4 0402 	rsb	r4, r4, #2
 800bb28:	2900      	cmp	r1, #0
 800bb2a:	d15a      	bne.n	800bbe2 <__ieee754_pow+0x172>
 800bb2c:	e00e      	b.n	800bb4c <__ieee754_pow+0xdc>
 800bb2e:	2900      	cmp	r1, #0
 800bb30:	d156      	bne.n	800bbe0 <__ieee754_pow+0x170>
 800bb32:	f1c2 0214 	rsb	r2, r2, #20
 800bb36:	fa47 f402 	asr.w	r4, r7, r2
 800bb3a:	fa04 f202 	lsl.w	r2, r4, r2
 800bb3e:	42ba      	cmp	r2, r7
 800bb40:	f040 8488 	bne.w	800c454 <__ieee754_pow+0x9e4>
 800bb44:	f004 0401 	and.w	r4, r4, #1
 800bb48:	f1c4 0402 	rsb	r4, r4, #2
 800bb4c:	4a67      	ldr	r2, [pc, #412]	@ (800bcec <__ieee754_pow+0x27c>)
 800bb4e:	4297      	cmp	r7, r2
 800bb50:	d130      	bne.n	800bbb4 <__ieee754_pow+0x144>
 800bb52:	f1b8 0f00 	cmp.w	r8, #0
 800bb56:	f280 8479 	bge.w	800c44c <__ieee754_pow+0x9dc>
 800bb5a:	4652      	mov	r2, sl
 800bb5c:	465b      	mov	r3, fp
 800bb5e:	2000      	movs	r0, #0
 800bb60:	4962      	ldr	r1, [pc, #392]	@ (800bcec <__ieee754_pow+0x27c>)
 800bb62:	f7f4 fe97 	bl	8000894 <__aeabi_ddiv>
 800bb66:	e7a1      	b.n	800baac <__ieee754_pow+0x3c>
 800bb68:	2400      	movs	r4, #0
 800bb6a:	2900      	cmp	r1, #0
 800bb6c:	d139      	bne.n	800bbe2 <__ieee754_pow+0x172>
 800bb6e:	4a5d      	ldr	r2, [pc, #372]	@ (800bce4 <__ieee754_pow+0x274>)
 800bb70:	4297      	cmp	r7, r2
 800bb72:	d1eb      	bne.n	800bb4c <__ieee754_pow+0xdc>
 800bb74:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800bb78:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bb7c:	ea53 0309 	orrs.w	r3, r3, r9
 800bb80:	f000 845c 	beq.w	800c43c <__ieee754_pow+0x9cc>
 800bb84:	4b5a      	ldr	r3, [pc, #360]	@ (800bcf0 <__ieee754_pow+0x280>)
 800bb86:	429e      	cmp	r6, r3
 800bb88:	d908      	bls.n	800bb9c <__ieee754_pow+0x12c>
 800bb8a:	f1b8 0f00 	cmp.w	r8, #0
 800bb8e:	f2c0 8459 	blt.w	800c444 <__ieee754_pow+0x9d4>
 800bb92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb96:	e789      	b.n	800baac <__ieee754_pow+0x3c>
 800bb98:	2402      	movs	r4, #2
 800bb9a:	e7e6      	b.n	800bb6a <__ieee754_pow+0xfa>
 800bb9c:	f1b8 0f00 	cmp.w	r8, #0
 800bba0:	f04f 0000 	mov.w	r0, #0
 800bba4:	f04f 0100 	mov.w	r1, #0
 800bba8:	da80      	bge.n	800baac <__ieee754_pow+0x3c>
 800bbaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bbae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bbb2:	e77b      	b.n	800baac <__ieee754_pow+0x3c>
 800bbb4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bbb8:	d106      	bne.n	800bbc8 <__ieee754_pow+0x158>
 800bbba:	4652      	mov	r2, sl
 800bbbc:	465b      	mov	r3, fp
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	4659      	mov	r1, fp
 800bbc2:	f7f4 fd3d 	bl	8000640 <__aeabi_dmul>
 800bbc6:	e771      	b.n	800baac <__ieee754_pow+0x3c>
 800bbc8:	4a4a      	ldr	r2, [pc, #296]	@ (800bcf4 <__ieee754_pow+0x284>)
 800bbca:	4590      	cmp	r8, r2
 800bbcc:	d109      	bne.n	800bbe2 <__ieee754_pow+0x172>
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	db07      	blt.n	800bbe2 <__ieee754_pow+0x172>
 800bbd2:	4650      	mov	r0, sl
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	b011      	add	sp, #68	@ 0x44
 800bbd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	f000 bd12 	b.w	800c604 <__ieee754_sqrt>
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	4650      	mov	r0, sl
 800bbe4:	4659      	mov	r1, fp
 800bbe6:	9302      	str	r3, [sp, #8]
 800bbe8:	f000 fc6a 	bl	800c4c0 <fabs>
 800bbec:	9b02      	ldr	r3, [sp, #8]
 800bbee:	f1b9 0f00 	cmp.w	r9, #0
 800bbf2:	d127      	bne.n	800bc44 <__ieee754_pow+0x1d4>
 800bbf4:	4a3d      	ldr	r2, [pc, #244]	@ (800bcec <__ieee754_pow+0x27c>)
 800bbf6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800bbfa:	4594      	cmp	ip, r2
 800bbfc:	d000      	beq.n	800bc00 <__ieee754_pow+0x190>
 800bbfe:	bb0e      	cbnz	r6, 800bc44 <__ieee754_pow+0x1d4>
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	da05      	bge.n	800bc12 <__ieee754_pow+0x1a2>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	4937      	ldr	r1, [pc, #220]	@ (800bcec <__ieee754_pow+0x27c>)
 800bc0e:	f7f4 fe41 	bl	8000894 <__aeabi_ddiv>
 800bc12:	2d00      	cmp	r5, #0
 800bc14:	f6bf af4a 	bge.w	800baac <__ieee754_pow+0x3c>
 800bc18:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bc1c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bc20:	4326      	orrs	r6, r4
 800bc22:	d108      	bne.n	800bc36 <__ieee754_pow+0x1c6>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	4610      	mov	r0, r2
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	f7f4 fb50 	bl	80002d0 <__aeabi_dsub>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	e795      	b.n	800bb62 <__ieee754_pow+0xf2>
 800bc36:	2c01      	cmp	r4, #1
 800bc38:	f47f af38 	bne.w	800baac <__ieee754_pow+0x3c>
 800bc3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc40:	4619      	mov	r1, r3
 800bc42:	e733      	b.n	800baac <__ieee754_pow+0x3c>
 800bc44:	0fea      	lsrs	r2, r5, #31
 800bc46:	3a01      	subs	r2, #1
 800bc48:	ea52 0c04 	orrs.w	ip, r2, r4
 800bc4c:	d102      	bne.n	800bc54 <__ieee754_pow+0x1e4>
 800bc4e:	4652      	mov	r2, sl
 800bc50:	465b      	mov	r3, fp
 800bc52:	e7e9      	b.n	800bc28 <__ieee754_pow+0x1b8>
 800bc54:	f04f 0900 	mov.w	r9, #0
 800bc58:	3c01      	subs	r4, #1
 800bc5a:	4314      	orrs	r4, r2
 800bc5c:	bf14      	ite	ne
 800bc5e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bcec <__ieee754_pow+0x27c>
 800bc62:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bcf8 <__ieee754_pow+0x288>
 800bc66:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bc6a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bc6e:	f240 8107 	bls.w	800be80 <__ieee754_pow+0x410>
 800bc72:	4b22      	ldr	r3, [pc, #136]	@ (800bcfc <__ieee754_pow+0x28c>)
 800bc74:	429f      	cmp	r7, r3
 800bc76:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf0 <__ieee754_pow+0x280>)
 800bc78:	d913      	bls.n	800bca2 <__ieee754_pow+0x232>
 800bc7a:	429e      	cmp	r6, r3
 800bc7c:	d808      	bhi.n	800bc90 <__ieee754_pow+0x220>
 800bc7e:	f1b8 0f00 	cmp.w	r8, #0
 800bc82:	da08      	bge.n	800bc96 <__ieee754_pow+0x226>
 800bc84:	2000      	movs	r0, #0
 800bc86:	b011      	add	sp, #68	@ 0x44
 800bc88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	f000 bcb4 	b.w	800c5f8 <__math_oflow>
 800bc90:	f1b8 0f00 	cmp.w	r8, #0
 800bc94:	dcf6      	bgt.n	800bc84 <__ieee754_pow+0x214>
 800bc96:	2000      	movs	r0, #0
 800bc98:	b011      	add	sp, #68	@ 0x44
 800bc9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9e:	f000 bca6 	b.w	800c5ee <__math_uflow>
 800bca2:	429e      	cmp	r6, r3
 800bca4:	d20c      	bcs.n	800bcc0 <__ieee754_pow+0x250>
 800bca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2300      	movs	r3, #0
 800bcae:	f7f4 ff39 	bl	8000b24 <__aeabi_dcmplt>
 800bcb2:	3800      	subs	r0, #0
 800bcb4:	bf18      	it	ne
 800bcb6:	2001      	movne	r0, #1
 800bcb8:	f1b8 0f00 	cmp.w	r8, #0
 800bcbc:	daec      	bge.n	800bc98 <__ieee754_pow+0x228>
 800bcbe:	e7e2      	b.n	800bc86 <__ieee754_pow+0x216>
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <__ieee754_pow+0x27c>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	429e      	cmp	r6, r3
 800bcc6:	d91b      	bls.n	800bd00 <__ieee754_pow+0x290>
 800bcc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bccc:	2300      	movs	r3, #0
 800bcce:	f7f4 ff29 	bl	8000b24 <__aeabi_dcmplt>
 800bcd2:	3800      	subs	r0, #0
 800bcd4:	bf18      	it	ne
 800bcd6:	2001      	movne	r0, #1
 800bcd8:	f1b8 0f00 	cmp.w	r8, #0
 800bcdc:	dcd3      	bgt.n	800bc86 <__ieee754_pow+0x216>
 800bcde:	e7db      	b.n	800bc98 <__ieee754_pow+0x228>
 800bce0:	fff00000 	.word	0xfff00000
 800bce4:	7ff00000 	.word	0x7ff00000
 800bce8:	433fffff 	.word	0x433fffff
 800bcec:	3ff00000 	.word	0x3ff00000
 800bcf0:	3fefffff 	.word	0x3fefffff
 800bcf4:	3fe00000 	.word	0x3fe00000
 800bcf8:	bff00000 	.word	0xbff00000
 800bcfc:	43f00000 	.word	0x43f00000
 800bd00:	4b5b      	ldr	r3, [pc, #364]	@ (800be70 <__ieee754_pow+0x400>)
 800bd02:	f7f4 fae5 	bl	80002d0 <__aeabi_dsub>
 800bd06:	a352      	add	r3, pc, #328	@ (adr r3, 800be50 <__ieee754_pow+0x3e0>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	f7f4 fc96 	bl	8000640 <__aeabi_dmul>
 800bd14:	a350      	add	r3, pc, #320	@ (adr r3, 800be58 <__ieee754_pow+0x3e8>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	460f      	mov	r7, r1
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 fc8d 	bl	8000640 <__aeabi_dmul>
 800bd26:	2200      	movs	r2, #0
 800bd28:	4682      	mov	sl, r0
 800bd2a:	468b      	mov	fp, r1
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4b50      	ldr	r3, [pc, #320]	@ (800be74 <__ieee754_pow+0x404>)
 800bd32:	f7f4 fc85 	bl	8000640 <__aeabi_dmul>
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	a149      	add	r1, pc, #292	@ (adr r1, 800be60 <__ieee754_pow+0x3f0>)
 800bd3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd40:	f7f4 fac6 	bl	80002d0 <__aeabi_dsub>
 800bd44:	4622      	mov	r2, r4
 800bd46:	462b      	mov	r3, r5
 800bd48:	f7f4 fc7a 	bl	8000640 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	2000      	movs	r0, #0
 800bd52:	4949      	ldr	r1, [pc, #292]	@ (800be78 <__ieee754_pow+0x408>)
 800bd54:	f7f4 fabc 	bl	80002d0 <__aeabi_dsub>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	4689      	mov	r9, r1
 800bd5e:	462b      	mov	r3, r5
 800bd60:	4620      	mov	r0, r4
 800bd62:	4629      	mov	r1, r5
 800bd64:	f7f4 fc6c 	bl	8000640 <__aeabi_dmul>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4649      	mov	r1, r9
 800bd70:	f7f4 fc66 	bl	8000640 <__aeabi_dmul>
 800bd74:	a33c      	add	r3, pc, #240	@ (adr r3, 800be68 <__ieee754_pow+0x3f8>)
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fc61 	bl	8000640 <__aeabi_dmul>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4650      	mov	r0, sl
 800bd84:	4659      	mov	r1, fp
 800bd86:	f7f4 faa3 	bl	80002d0 <__aeabi_dsub>
 800bd8a:	2400      	movs	r4, #0
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4680      	mov	r8, r0
 800bd92:	4689      	mov	r9, r1
 800bd94:	4630      	mov	r0, r6
 800bd96:	4639      	mov	r1, r7
 800bd98:	f7f4 fa9c 	bl	80002d4 <__adddf3>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	4620      	mov	r0, r4
 800bda2:	460d      	mov	r5, r1
 800bda4:	f7f4 fa94 	bl	80002d0 <__aeabi_dsub>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4640      	mov	r0, r8
 800bdae:	4649      	mov	r1, r9
 800bdb0:	f7f4 fa8e 	bl	80002d0 <__aeabi_dsub>
 800bdb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9304      	str	r3, [sp, #16]
 800bdc0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	460f      	mov	r7, r1
 800bdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdcc:	4652      	mov	r2, sl
 800bdce:	465b      	mov	r3, fp
 800bdd0:	f7f4 fa7e 	bl	80002d0 <__aeabi_dsub>
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	f7f4 fc32 	bl	8000640 <__aeabi_dmul>
 800bddc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bde0:	4680      	mov	r8, r0
 800bde2:	4689      	mov	r9, r1
 800bde4:	4630      	mov	r0, r6
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 fc2a 	bl	8000640 <__aeabi_dmul>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4640      	mov	r0, r8
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	f7f4 fa6e 	bl	80002d4 <__adddf3>
 800bdf8:	4652      	mov	r2, sl
 800bdfa:	465b      	mov	r3, fp
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	460f      	mov	r7, r1
 800be00:	4620      	mov	r0, r4
 800be02:	4629      	mov	r1, r5
 800be04:	f7f4 fc1c 	bl	8000640 <__aeabi_dmul>
 800be08:	460b      	mov	r3, r1
 800be0a:	4602      	mov	r2, r0
 800be0c:	4680      	mov	r8, r0
 800be0e:	4689      	mov	r9, r1
 800be10:	4630      	mov	r0, r6
 800be12:	4639      	mov	r1, r7
 800be14:	f7f4 fa5e 	bl	80002d4 <__adddf3>
 800be18:	4b18      	ldr	r3, [pc, #96]	@ (800be7c <__ieee754_pow+0x40c>)
 800be1a:	4604      	mov	r4, r0
 800be1c:	4299      	cmp	r1, r3
 800be1e:	460d      	mov	r5, r1
 800be20:	468a      	mov	sl, r1
 800be22:	468b      	mov	fp, r1
 800be24:	f340 82e0 	ble.w	800c3e8 <__ieee754_pow+0x978>
 800be28:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800be2c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800be30:	4303      	orrs	r3, r0
 800be32:	f000 81df 	beq.w	800c1f4 <__ieee754_pow+0x784>
 800be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3a:	2200      	movs	r2, #0
 800be3c:	2300      	movs	r3, #0
 800be3e:	f7f4 fe71 	bl	8000b24 <__aeabi_dcmplt>
 800be42:	3800      	subs	r0, #0
 800be44:	bf18      	it	ne
 800be46:	2001      	movne	r0, #1
 800be48:	e71d      	b.n	800bc86 <__ieee754_pow+0x216>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	60000000 	.word	0x60000000
 800be54:	3ff71547 	.word	0x3ff71547
 800be58:	f85ddf44 	.word	0xf85ddf44
 800be5c:	3e54ae0b 	.word	0x3e54ae0b
 800be60:	55555555 	.word	0x55555555
 800be64:	3fd55555 	.word	0x3fd55555
 800be68:	652b82fe 	.word	0x652b82fe
 800be6c:	3ff71547 	.word	0x3ff71547
 800be70:	3ff00000 	.word	0x3ff00000
 800be74:	3fd00000 	.word	0x3fd00000
 800be78:	3fe00000 	.word	0x3fe00000
 800be7c:	408fffff 	.word	0x408fffff
 800be80:	4ad3      	ldr	r2, [pc, #844]	@ (800c1d0 <__ieee754_pow+0x760>)
 800be82:	402a      	ands	r2, r5
 800be84:	2a00      	cmp	r2, #0
 800be86:	f040 817a 	bne.w	800c17e <__ieee754_pow+0x70e>
 800be8a:	4bd2      	ldr	r3, [pc, #840]	@ (800c1d4 <__ieee754_pow+0x764>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	f7f4 fbd7 	bl	8000640 <__aeabi_dmul>
 800be92:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800be96:	460b      	mov	r3, r1
 800be98:	151a      	asrs	r2, r3, #20
 800be9a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be9e:	4422      	add	r2, r4
 800bea0:	920a      	str	r2, [sp, #40]	@ 0x28
 800bea2:	4acd      	ldr	r2, [pc, #820]	@ (800c1d8 <__ieee754_pow+0x768>)
 800bea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bea8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800beac:	4293      	cmp	r3, r2
 800beae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800beb2:	dd08      	ble.n	800bec6 <__ieee754_pow+0x456>
 800beb4:	4ac9      	ldr	r2, [pc, #804]	@ (800c1dc <__ieee754_pow+0x76c>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f340 8163 	ble.w	800c182 <__ieee754_pow+0x712>
 800bebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bebe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bec2:	3301      	adds	r3, #1
 800bec4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bec6:	2600      	movs	r6, #0
 800bec8:	00f3      	lsls	r3, r6, #3
 800beca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800becc:	4bc4      	ldr	r3, [pc, #784]	@ (800c1e0 <__ieee754_pow+0x770>)
 800bece:	4629      	mov	r1, r5
 800bed0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bed4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bed8:	461a      	mov	r2, r3
 800beda:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bede:	4623      	mov	r3, r4
 800bee0:	4682      	mov	sl, r0
 800bee2:	f7f4 f9f5 	bl	80002d0 <__aeabi_dsub>
 800bee6:	4652      	mov	r2, sl
 800bee8:	462b      	mov	r3, r5
 800beea:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800beee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bef2:	f7f4 f9ef 	bl	80002d4 <__adddf3>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	2000      	movs	r0, #0
 800befc:	49b9      	ldr	r1, [pc, #740]	@ (800c1e4 <__ieee754_pow+0x774>)
 800befe:	f7f4 fcc9 	bl	8000894 <__aeabi_ddiv>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf0e:	f7f4 fb97 	bl	8000640 <__aeabi_dmul>
 800bf12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf16:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bf1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	2200      	movs	r2, #0
 800bf22:	46ab      	mov	fp, r5
 800bf24:	106d      	asrs	r5, r5, #1
 800bf26:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bf2a:	9304      	str	r3, [sp, #16]
 800bf2c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bf30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf34:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bf38:	4640      	mov	r0, r8
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	4614      	mov	r4, r2
 800bf3e:	461d      	mov	r5, r3
 800bf40:	f7f4 fb7e 	bl	8000640 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf4c:	f7f4 f9c0 	bl	80002d0 <__aeabi_dsub>
 800bf50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	f7f4 f9b8 	bl	80002d0 <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4650      	mov	r0, sl
 800bf66:	4659      	mov	r1, fp
 800bf68:	f7f4 f9b2 	bl	80002d0 <__aeabi_dsub>
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	464b      	mov	r3, r9
 800bf70:	f7f4 fb66 	bl	8000640 <__aeabi_dmul>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	4630      	mov	r0, r6
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	f7f4 f9a8 	bl	80002d0 <__aeabi_dsub>
 800bf80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf84:	f7f4 fb5c 	bl	8000640 <__aeabi_dmul>
 800bf88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf90:	4610      	mov	r0, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	f7f4 fb54 	bl	8000640 <__aeabi_dmul>
 800bf98:	a37b      	add	r3, pc, #492	@ (adr r3, 800c188 <__ieee754_pow+0x718>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	460d      	mov	r5, r1
 800bfa2:	f7f4 fb4d 	bl	8000640 <__aeabi_dmul>
 800bfa6:	a37a      	add	r3, pc, #488	@ (adr r3, 800c190 <__ieee754_pow+0x720>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 f992 	bl	80002d4 <__adddf3>
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	f7f4 fb44 	bl	8000640 <__aeabi_dmul>
 800bfb8:	a377      	add	r3, pc, #476	@ (adr r3, 800c198 <__ieee754_pow+0x728>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	f7f4 f989 	bl	80002d4 <__adddf3>
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	f7f4 fb3b 	bl	8000640 <__aeabi_dmul>
 800bfca:	a375      	add	r3, pc, #468	@ (adr r3, 800c1a0 <__ieee754_pow+0x730>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f980 	bl	80002d4 <__adddf3>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	f7f4 fb32 	bl	8000640 <__aeabi_dmul>
 800bfdc:	a372      	add	r3, pc, #456	@ (adr r3, 800c1a8 <__ieee754_pow+0x738>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 f977 	bl	80002d4 <__adddf3>
 800bfe6:	4622      	mov	r2, r4
 800bfe8:	462b      	mov	r3, r5
 800bfea:	f7f4 fb29 	bl	8000640 <__aeabi_dmul>
 800bfee:	a370      	add	r3, pc, #448	@ (adr r3, 800c1b0 <__ieee754_pow+0x740>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 f96e 	bl	80002d4 <__adddf3>
 800bff8:	4622      	mov	r2, r4
 800bffa:	4606      	mov	r6, r0
 800bffc:	460f      	mov	r7, r1
 800bffe:	462b      	mov	r3, r5
 800c000:	4620      	mov	r0, r4
 800c002:	4629      	mov	r1, r5
 800c004:	f7f4 fb1c 	bl	8000640 <__aeabi_dmul>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	f7f4 fb16 	bl	8000640 <__aeabi_dmul>
 800c014:	4604      	mov	r4, r0
 800c016:	460d      	mov	r5, r1
 800c018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c01c:	4642      	mov	r2, r8
 800c01e:	464b      	mov	r3, r9
 800c020:	f7f4 f958 	bl	80002d4 <__adddf3>
 800c024:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c028:	f7f4 fb0a 	bl	8000640 <__aeabi_dmul>
 800c02c:	4622      	mov	r2, r4
 800c02e:	462b      	mov	r3, r5
 800c030:	f7f4 f950 	bl	80002d4 <__adddf3>
 800c034:	4642      	mov	r2, r8
 800c036:	4682      	mov	sl, r0
 800c038:	468b      	mov	fp, r1
 800c03a:	464b      	mov	r3, r9
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	f7f4 fafe 	bl	8000640 <__aeabi_dmul>
 800c044:	2200      	movs	r2, #0
 800c046:	4b68      	ldr	r3, [pc, #416]	@ (800c1e8 <__ieee754_pow+0x778>)
 800c048:	4606      	mov	r6, r0
 800c04a:	460f      	mov	r7, r1
 800c04c:	f7f4 f942 	bl	80002d4 <__adddf3>
 800c050:	4652      	mov	r2, sl
 800c052:	465b      	mov	r3, fp
 800c054:	f7f4 f93e 	bl	80002d4 <__adddf3>
 800c058:	2400      	movs	r4, #0
 800c05a:	460d      	mov	r5, r1
 800c05c:	4622      	mov	r2, r4
 800c05e:	460b      	mov	r3, r1
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	f7f4 faec 	bl	8000640 <__aeabi_dmul>
 800c068:	2200      	movs	r2, #0
 800c06a:	4680      	mov	r8, r0
 800c06c:	4689      	mov	r9, r1
 800c06e:	4620      	mov	r0, r4
 800c070:	4629      	mov	r1, r5
 800c072:	4b5d      	ldr	r3, [pc, #372]	@ (800c1e8 <__ieee754_pow+0x778>)
 800c074:	f7f4 f92c 	bl	80002d0 <__aeabi_dsub>
 800c078:	4632      	mov	r2, r6
 800c07a:	463b      	mov	r3, r7
 800c07c:	f7f4 f928 	bl	80002d0 <__aeabi_dsub>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4650      	mov	r0, sl
 800c086:	4659      	mov	r1, fp
 800c088:	f7f4 f922 	bl	80002d0 <__aeabi_dsub>
 800c08c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c090:	f7f4 fad6 	bl	8000640 <__aeabi_dmul>
 800c094:	4622      	mov	r2, r4
 800c096:	4606      	mov	r6, r0
 800c098:	460f      	mov	r7, r1
 800c09a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c09e:	462b      	mov	r3, r5
 800c0a0:	f7f4 face 	bl	8000640 <__aeabi_dmul>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 f912 	bl	80002d4 <__adddf3>
 800c0b0:	2400      	movs	r4, #0
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 f909 	bl	80002d4 <__adddf3>
 800c0c2:	a33d      	add	r3, pc, #244	@ (adr r3, 800c1b8 <__ieee754_pow+0x748>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	460d      	mov	r5, r1
 800c0cc:	f7f4 fab8 	bl	8000640 <__aeabi_dmul>
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	4629      	mov	r1, r5
 800c0dc:	f7f4 f8f8 	bl	80002d0 <__aeabi_dsub>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	f7f4 f8f2 	bl	80002d0 <__aeabi_dsub>
 800c0ec:	a334      	add	r3, pc, #208	@ (adr r3, 800c1c0 <__ieee754_pow+0x750>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 faa5 	bl	8000640 <__aeabi_dmul>
 800c0f6:	a334      	add	r3, pc, #208	@ (adr r3, 800c1c8 <__ieee754_pow+0x758>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	4620      	mov	r0, r4
 800c102:	4629      	mov	r1, r5
 800c104:	f7f4 fa9c 	bl	8000640 <__aeabi_dmul>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4630      	mov	r0, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	f7f4 f8e0 	bl	80002d4 <__adddf3>
 800c114:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c116:	4b35      	ldr	r3, [pc, #212]	@ (800c1ec <__ieee754_pow+0x77c>)
 800c118:	2400      	movs	r4, #0
 800c11a:	4413      	add	r3, r2
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 f8d8 	bl	80002d4 <__adddf3>
 800c124:	4682      	mov	sl, r0
 800c126:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c128:	468b      	mov	fp, r1
 800c12a:	f7f4 fa1f 	bl	800056c <__aeabi_i2d>
 800c12e:	4606      	mov	r6, r0
 800c130:	460f      	mov	r7, r1
 800c132:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c134:	4b2e      	ldr	r3, [pc, #184]	@ (800c1f0 <__ieee754_pow+0x780>)
 800c136:	4413      	add	r3, r2
 800c138:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c13c:	4652      	mov	r2, sl
 800c13e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c142:	465b      	mov	r3, fp
 800c144:	f7f4 f8c6 	bl	80002d4 <__adddf3>
 800c148:	4642      	mov	r2, r8
 800c14a:	464b      	mov	r3, r9
 800c14c:	f7f4 f8c2 	bl	80002d4 <__adddf3>
 800c150:	4632      	mov	r2, r6
 800c152:	463b      	mov	r3, r7
 800c154:	f7f4 f8be 	bl	80002d4 <__adddf3>
 800c158:	4632      	mov	r2, r6
 800c15a:	463b      	mov	r3, r7
 800c15c:	4620      	mov	r0, r4
 800c15e:	460d      	mov	r5, r1
 800c160:	f7f4 f8b6 	bl	80002d0 <__aeabi_dsub>
 800c164:	4642      	mov	r2, r8
 800c166:	464b      	mov	r3, r9
 800c168:	f7f4 f8b2 	bl	80002d0 <__aeabi_dsub>
 800c16c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c170:	f7f4 f8ae 	bl	80002d0 <__aeabi_dsub>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4650      	mov	r0, sl
 800c17a:	4659      	mov	r1, fp
 800c17c:	e618      	b.n	800bdb0 <__ieee754_pow+0x340>
 800c17e:	2400      	movs	r4, #0
 800c180:	e68a      	b.n	800be98 <__ieee754_pow+0x428>
 800c182:	2601      	movs	r6, #1
 800c184:	e6a0      	b.n	800bec8 <__ieee754_pow+0x458>
 800c186:	bf00      	nop
 800c188:	4a454eef 	.word	0x4a454eef
 800c18c:	3fca7e28 	.word	0x3fca7e28
 800c190:	93c9db65 	.word	0x93c9db65
 800c194:	3fcd864a 	.word	0x3fcd864a
 800c198:	a91d4101 	.word	0xa91d4101
 800c19c:	3fd17460 	.word	0x3fd17460
 800c1a0:	518f264d 	.word	0x518f264d
 800c1a4:	3fd55555 	.word	0x3fd55555
 800c1a8:	db6fabff 	.word	0xdb6fabff
 800c1ac:	3fdb6db6 	.word	0x3fdb6db6
 800c1b0:	33333303 	.word	0x33333303
 800c1b4:	3fe33333 	.word	0x3fe33333
 800c1b8:	e0000000 	.word	0xe0000000
 800c1bc:	3feec709 	.word	0x3feec709
 800c1c0:	dc3a03fd 	.word	0xdc3a03fd
 800c1c4:	3feec709 	.word	0x3feec709
 800c1c8:	145b01f5 	.word	0x145b01f5
 800c1cc:	be3e2fe0 	.word	0xbe3e2fe0
 800c1d0:	7ff00000 	.word	0x7ff00000
 800c1d4:	43400000 	.word	0x43400000
 800c1d8:	0003988e 	.word	0x0003988e
 800c1dc:	000bb679 	.word	0x000bb679
 800c1e0:	0800cdb8 	.word	0x0800cdb8
 800c1e4:	3ff00000 	.word	0x3ff00000
 800c1e8:	40080000 	.word	0x40080000
 800c1ec:	0800cd98 	.word	0x0800cd98
 800c1f0:	0800cda8 	.word	0x0800cda8
 800c1f4:	a39a      	add	r3, pc, #616	@ (adr r3, 800c460 <__ieee754_pow+0x9f0>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	f7f4 f869 	bl	80002d4 <__adddf3>
 800c202:	4642      	mov	r2, r8
 800c204:	e9cd 0100 	strd	r0, r1, [sp]
 800c208:	464b      	mov	r3, r9
 800c20a:	4620      	mov	r0, r4
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 f85f 	bl	80002d0 <__aeabi_dsub>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c21a:	f7f4 fca1 	bl	8000b60 <__aeabi_dcmpgt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	f47f ae09 	bne.w	800be36 <__ieee754_pow+0x3c6>
 800c224:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c228:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c22c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c230:	fa43 fa0a 	asr.w	sl, r3, sl
 800c234:	44da      	add	sl, fp
 800c236:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c23a:	489b      	ldr	r0, [pc, #620]	@ (800c4a8 <__ieee754_pow+0xa38>)
 800c23c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c240:	4108      	asrs	r0, r1
 800c242:	ea00 030a 	and.w	r3, r0, sl
 800c246:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c24a:	f1c1 0114 	rsb	r1, r1, #20
 800c24e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c252:	4640      	mov	r0, r8
 800c254:	fa4a fa01 	asr.w	sl, sl, r1
 800c258:	f1bb 0f00 	cmp.w	fp, #0
 800c25c:	4649      	mov	r1, r9
 800c25e:	f04f 0200 	mov.w	r2, #0
 800c262:	bfb8      	it	lt
 800c264:	f1ca 0a00 	rsblt	sl, sl, #0
 800c268:	f7f4 f832 	bl	80002d0 <__aeabi_dsub>
 800c26c:	4680      	mov	r8, r0
 800c26e:	4689      	mov	r9, r1
 800c270:	2400      	movs	r4, #0
 800c272:	4632      	mov	r2, r6
 800c274:	463b      	mov	r3, r7
 800c276:	4640      	mov	r0, r8
 800c278:	4649      	mov	r1, r9
 800c27a:	f7f4 f82b 	bl	80002d4 <__adddf3>
 800c27e:	a37a      	add	r3, pc, #488	@ (adr r3, 800c468 <__ieee754_pow+0x9f8>)
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	4620      	mov	r0, r4
 800c286:	460d      	mov	r5, r1
 800c288:	f7f4 f9da 	bl	8000640 <__aeabi_dmul>
 800c28c:	4642      	mov	r2, r8
 800c28e:	464b      	mov	r3, r9
 800c290:	e9cd 0100 	strd	r0, r1, [sp]
 800c294:	4620      	mov	r0, r4
 800c296:	4629      	mov	r1, r5
 800c298:	f7f4 f81a 	bl	80002d0 <__aeabi_dsub>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f4 f814 	bl	80002d0 <__aeabi_dsub>
 800c2a8:	a371      	add	r3, pc, #452	@ (adr r3, 800c470 <__ieee754_pow+0xa00>)
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	f7f4 f9c7 	bl	8000640 <__aeabi_dmul>
 800c2b2:	a371      	add	r3, pc, #452	@ (adr r3, 800c478 <__ieee754_pow+0xa08>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	4680      	mov	r8, r0
 800c2ba:	4689      	mov	r9, r1
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f7f4 f9be 	bl	8000640 <__aeabi_dmul>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4640      	mov	r0, r8
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	f7f4 f802 	bl	80002d4 <__adddf3>
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2dc:	f7f3 fffa 	bl	80002d4 <__adddf3>
 800c2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	f7f3 fff2 	bl	80002d0 <__aeabi_dsub>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	f7f3 ffec 	bl	80002d0 <__aeabi_dsub>
 800c2f8:	4642      	mov	r2, r8
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460f      	mov	r7, r1
 800c2fe:	464b      	mov	r3, r9
 800c300:	4640      	mov	r0, r8
 800c302:	4649      	mov	r1, r9
 800c304:	f7f4 f99c 	bl	8000640 <__aeabi_dmul>
 800c308:	a35d      	add	r3, pc, #372	@ (adr r3, 800c480 <__ieee754_pow+0xa10>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	4604      	mov	r4, r0
 800c310:	460d      	mov	r5, r1
 800c312:	f7f4 f995 	bl	8000640 <__aeabi_dmul>
 800c316:	a35c      	add	r3, pc, #368	@ (adr r3, 800c488 <__ieee754_pow+0xa18>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f3 ffd8 	bl	80002d0 <__aeabi_dsub>
 800c320:	4622      	mov	r2, r4
 800c322:	462b      	mov	r3, r5
 800c324:	f7f4 f98c 	bl	8000640 <__aeabi_dmul>
 800c328:	a359      	add	r3, pc, #356	@ (adr r3, 800c490 <__ieee754_pow+0xa20>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f3 ffd1 	bl	80002d4 <__adddf3>
 800c332:	4622      	mov	r2, r4
 800c334:	462b      	mov	r3, r5
 800c336:	f7f4 f983 	bl	8000640 <__aeabi_dmul>
 800c33a:	a357      	add	r3, pc, #348	@ (adr r3, 800c498 <__ieee754_pow+0xa28>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	f7f3 ffc6 	bl	80002d0 <__aeabi_dsub>
 800c344:	4622      	mov	r2, r4
 800c346:	462b      	mov	r3, r5
 800c348:	f7f4 f97a 	bl	8000640 <__aeabi_dmul>
 800c34c:	a354      	add	r3, pc, #336	@ (adr r3, 800c4a0 <__ieee754_pow+0xa30>)
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f7f3 ffbf 	bl	80002d4 <__adddf3>
 800c356:	4622      	mov	r2, r4
 800c358:	462b      	mov	r3, r5
 800c35a:	f7f4 f971 	bl	8000640 <__aeabi_dmul>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f7f3 ffb3 	bl	80002d0 <__aeabi_dsub>
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f4 f963 	bl	8000640 <__aeabi_dmul>
 800c37a:	2200      	movs	r2, #0
 800c37c:	e9cd 0100 	strd	r0, r1, [sp]
 800c380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f3 ffa2 	bl	80002d0 <__aeabi_dsub>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c394:	f7f4 fa7e 	bl	8000894 <__aeabi_ddiv>
 800c398:	4632      	mov	r2, r6
 800c39a:	4604      	mov	r4, r0
 800c39c:	460d      	mov	r5, r1
 800c39e:	463b      	mov	r3, r7
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	f7f4 f94c 	bl	8000640 <__aeabi_dmul>
 800c3a8:	4632      	mov	r2, r6
 800c3aa:	463b      	mov	r3, r7
 800c3ac:	f7f3 ff92 	bl	80002d4 <__adddf3>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f7f3 ff8a 	bl	80002d0 <__aeabi_dsub>
 800c3bc:	4642      	mov	r2, r8
 800c3be:	464b      	mov	r3, r9
 800c3c0:	f7f3 ff86 	bl	80002d0 <__aeabi_dsub>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	4938      	ldr	r1, [pc, #224]	@ (800c4ac <__ieee754_pow+0xa3c>)
 800c3cc:	f7f3 ff80 	bl	80002d0 <__aeabi_dsub>
 800c3d0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c3d4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c3d8:	da2e      	bge.n	800c438 <__ieee754_pow+0x9c8>
 800c3da:	4652      	mov	r2, sl
 800c3dc:	f000 f874 	bl	800c4c8 <scalbn>
 800c3e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3e4:	f7ff bbed 	b.w	800bbc2 <__ieee754_pow+0x152>
 800c3e8:	4c31      	ldr	r4, [pc, #196]	@ (800c4b0 <__ieee754_pow+0xa40>)
 800c3ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3ee:	42a3      	cmp	r3, r4
 800c3f0:	d91a      	bls.n	800c428 <__ieee754_pow+0x9b8>
 800c3f2:	4b30      	ldr	r3, [pc, #192]	@ (800c4b4 <__ieee754_pow+0xa44>)
 800c3f4:	440b      	add	r3, r1
 800c3f6:	4303      	orrs	r3, r0
 800c3f8:	d009      	beq.n	800c40e <__ieee754_pow+0x99e>
 800c3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	f7f4 fb8f 	bl	8000b24 <__aeabi_dcmplt>
 800c406:	3800      	subs	r0, #0
 800c408:	bf18      	it	ne
 800c40a:	2001      	movne	r0, #1
 800c40c:	e444      	b.n	800bc98 <__ieee754_pow+0x228>
 800c40e:	4642      	mov	r2, r8
 800c410:	464b      	mov	r3, r9
 800c412:	f7f3 ff5d 	bl	80002d0 <__aeabi_dsub>
 800c416:	4632      	mov	r2, r6
 800c418:	463b      	mov	r3, r7
 800c41a:	f7f4 fb97 	bl	8000b4c <__aeabi_dcmpge>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d1eb      	bne.n	800c3fa <__ieee754_pow+0x98a>
 800c422:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800c4b8 <__ieee754_pow+0xa48>
 800c426:	e6fd      	b.n	800c224 <__ieee754_pow+0x7b4>
 800c428:	469a      	mov	sl, r3
 800c42a:	4b24      	ldr	r3, [pc, #144]	@ (800c4bc <__ieee754_pow+0xa4c>)
 800c42c:	459a      	cmp	sl, r3
 800c42e:	f63f aef9 	bhi.w	800c224 <__ieee754_pow+0x7b4>
 800c432:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c436:	e71b      	b.n	800c270 <__ieee754_pow+0x800>
 800c438:	4621      	mov	r1, r4
 800c43a:	e7d1      	b.n	800c3e0 <__ieee754_pow+0x970>
 800c43c:	2000      	movs	r0, #0
 800c43e:	491b      	ldr	r1, [pc, #108]	@ (800c4ac <__ieee754_pow+0xa3c>)
 800c440:	f7ff bb34 	b.w	800baac <__ieee754_pow+0x3c>
 800c444:	2000      	movs	r0, #0
 800c446:	2100      	movs	r1, #0
 800c448:	f7ff bb30 	b.w	800baac <__ieee754_pow+0x3c>
 800c44c:	4650      	mov	r0, sl
 800c44e:	4659      	mov	r1, fp
 800c450:	f7ff bb2c 	b.w	800baac <__ieee754_pow+0x3c>
 800c454:	460c      	mov	r4, r1
 800c456:	f7ff bb79 	b.w	800bb4c <__ieee754_pow+0xdc>
 800c45a:	2400      	movs	r4, #0
 800c45c:	f7ff bb64 	b.w	800bb28 <__ieee754_pow+0xb8>
 800c460:	652b82fe 	.word	0x652b82fe
 800c464:	3c971547 	.word	0x3c971547
 800c468:	00000000 	.word	0x00000000
 800c46c:	3fe62e43 	.word	0x3fe62e43
 800c470:	fefa39ef 	.word	0xfefa39ef
 800c474:	3fe62e42 	.word	0x3fe62e42
 800c478:	0ca86c39 	.word	0x0ca86c39
 800c47c:	be205c61 	.word	0xbe205c61
 800c480:	72bea4d0 	.word	0x72bea4d0
 800c484:	3e663769 	.word	0x3e663769
 800c488:	c5d26bf1 	.word	0xc5d26bf1
 800c48c:	3ebbbd41 	.word	0x3ebbbd41
 800c490:	af25de2c 	.word	0xaf25de2c
 800c494:	3f11566a 	.word	0x3f11566a
 800c498:	16bebd93 	.word	0x16bebd93
 800c49c:	3f66c16c 	.word	0x3f66c16c
 800c4a0:	5555553e 	.word	0x5555553e
 800c4a4:	3fc55555 	.word	0x3fc55555
 800c4a8:	fff00000 	.word	0xfff00000
 800c4ac:	3ff00000 	.word	0x3ff00000
 800c4b0:	4090cbff 	.word	0x4090cbff
 800c4b4:	3f6f3400 	.word	0x3f6f3400
 800c4b8:	4090cc00 	.word	0x4090cc00
 800c4bc:	3fe00000 	.word	0x3fe00000

0800c4c0 <fabs>:
 800c4c0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4770      	bx	lr

0800c4c8 <scalbn>:
 800c4c8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c4cc:	4616      	mov	r6, r2
 800c4ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4d2:	4683      	mov	fp, r0
 800c4d4:	468c      	mov	ip, r1
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	b982      	cbnz	r2, 800c4fc <scalbn+0x34>
 800c4da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4de:	4303      	orrs	r3, r0
 800c4e0:	d039      	beq.n	800c556 <scalbn+0x8e>
 800c4e2:	4b2f      	ldr	r3, [pc, #188]	@ (800c5a0 <scalbn+0xd8>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f7f4 f8ab 	bl	8000640 <__aeabi_dmul>
 800c4ea:	4b2e      	ldr	r3, [pc, #184]	@ (800c5a4 <scalbn+0xdc>)
 800c4ec:	4683      	mov	fp, r0
 800c4ee:	429e      	cmp	r6, r3
 800c4f0:	468c      	mov	ip, r1
 800c4f2:	da0d      	bge.n	800c510 <scalbn+0x48>
 800c4f4:	a326      	add	r3, pc, #152	@ (adr r3, 800c590 <scalbn+0xc8>)
 800c4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fa:	e01b      	b.n	800c534 <scalbn+0x6c>
 800c4fc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c500:	42ba      	cmp	r2, r7
 800c502:	d109      	bne.n	800c518 <scalbn+0x50>
 800c504:	4602      	mov	r2, r0
 800c506:	f7f3 fee5 	bl	80002d4 <__adddf3>
 800c50a:	4683      	mov	fp, r0
 800c50c:	468c      	mov	ip, r1
 800c50e:	e022      	b.n	800c556 <scalbn+0x8e>
 800c510:	460b      	mov	r3, r1
 800c512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c516:	3a36      	subs	r2, #54	@ 0x36
 800c518:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c51c:	428e      	cmp	r6, r1
 800c51e:	dd0c      	ble.n	800c53a <scalbn+0x72>
 800c520:	a31d      	add	r3, pc, #116	@ (adr r3, 800c598 <scalbn+0xd0>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	461c      	mov	r4, r3
 800c528:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c52c:	f361 74df 	bfi	r4, r1, #31, #1
 800c530:	4621      	mov	r1, r4
 800c532:	481d      	ldr	r0, [pc, #116]	@ (800c5a8 <scalbn+0xe0>)
 800c534:	f7f4 f884 	bl	8000640 <__aeabi_dmul>
 800c538:	e7e7      	b.n	800c50a <scalbn+0x42>
 800c53a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c53e:	4432      	add	r2, r6
 800c540:	428a      	cmp	r2, r1
 800c542:	dced      	bgt.n	800c520 <scalbn+0x58>
 800c544:	2a00      	cmp	r2, #0
 800c546:	dd0a      	ble.n	800c55e <scalbn+0x96>
 800c548:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c54c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c550:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c554:	46ac      	mov	ip, r5
 800c556:	4658      	mov	r0, fp
 800c558:	4661      	mov	r1, ip
 800c55a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c55e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c562:	da09      	bge.n	800c578 <scalbn+0xb0>
 800c564:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c568:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c56c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c570:	480e      	ldr	r0, [pc, #56]	@ (800c5ac <scalbn+0xe4>)
 800c572:	f041 011f 	orr.w	r1, r1, #31
 800c576:	e7bd      	b.n	800c4f4 <scalbn+0x2c>
 800c578:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c57c:	3236      	adds	r2, #54	@ 0x36
 800c57e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c582:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c586:	4658      	mov	r0, fp
 800c588:	4629      	mov	r1, r5
 800c58a:	2200      	movs	r2, #0
 800c58c:	4b08      	ldr	r3, [pc, #32]	@ (800c5b0 <scalbn+0xe8>)
 800c58e:	e7d1      	b.n	800c534 <scalbn+0x6c>
 800c590:	c2f8f359 	.word	0xc2f8f359
 800c594:	01a56e1f 	.word	0x01a56e1f
 800c598:	8800759c 	.word	0x8800759c
 800c59c:	7e37e43c 	.word	0x7e37e43c
 800c5a0:	43500000 	.word	0x43500000
 800c5a4:	ffff3cb0 	.word	0xffff3cb0
 800c5a8:	8800759c 	.word	0x8800759c
 800c5ac:	c2f8f359 	.word	0xc2f8f359
 800c5b0:	3c900000 	.word	0x3c900000

0800c5b4 <with_errno>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	4616      	mov	r6, r2
 800c5bc:	f7fd f968 	bl	8009890 <__errno>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	6006      	str	r6, [r0, #0]
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}

0800c5c8 <xflow>:
 800c5c8:	b513      	push	{r0, r1, r4, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	b10c      	cbz	r4, 800c5d6 <xflow+0xe>
 800c5d2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c5d6:	e9cd 2300 	strd	r2, r3, [sp]
 800c5da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5de:	f7f4 f82f 	bl	8000640 <__aeabi_dmul>
 800c5e2:	2222      	movs	r2, #34	@ 0x22
 800c5e4:	b002      	add	sp, #8
 800c5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ea:	f7ff bfe3 	b.w	800c5b4 <with_errno>

0800c5ee <__math_uflow>:
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c5f4:	f7ff bfe8 	b.w	800c5c8 <xflow>

0800c5f8 <__math_oflow>:
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c5fe:	f7ff bfe3 	b.w	800c5c8 <xflow>
	...

0800c604 <__ieee754_sqrt>:
 800c604:	4a67      	ldr	r2, [pc, #412]	@ (800c7a4 <__ieee754_sqrt+0x1a0>)
 800c606:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	438a      	bics	r2, r1
 800c60c:	4606      	mov	r6, r0
 800c60e:	460f      	mov	r7, r1
 800c610:	460b      	mov	r3, r1
 800c612:	4604      	mov	r4, r0
 800c614:	d10e      	bne.n	800c634 <__ieee754_sqrt+0x30>
 800c616:	4602      	mov	r2, r0
 800c618:	f7f4 f812 	bl	8000640 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4630      	mov	r0, r6
 800c622:	4639      	mov	r1, r7
 800c624:	f7f3 fe56 	bl	80002d4 <__adddf3>
 800c628:	4606      	mov	r6, r0
 800c62a:	460f      	mov	r7, r1
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	2900      	cmp	r1, #0
 800c636:	dc0c      	bgt.n	800c652 <__ieee754_sqrt+0x4e>
 800c638:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c63c:	4302      	orrs	r2, r0
 800c63e:	d0f5      	beq.n	800c62c <__ieee754_sqrt+0x28>
 800c640:	b189      	cbz	r1, 800c666 <__ieee754_sqrt+0x62>
 800c642:	4602      	mov	r2, r0
 800c644:	f7f3 fe44 	bl	80002d0 <__aeabi_dsub>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	f7f4 f922 	bl	8000894 <__aeabi_ddiv>
 800c650:	e7ea      	b.n	800c628 <__ieee754_sqrt+0x24>
 800c652:	150a      	asrs	r2, r1, #20
 800c654:	d115      	bne.n	800c682 <__ieee754_sqrt+0x7e>
 800c656:	2100      	movs	r1, #0
 800c658:	e009      	b.n	800c66e <__ieee754_sqrt+0x6a>
 800c65a:	0ae3      	lsrs	r3, r4, #11
 800c65c:	3a15      	subs	r2, #21
 800c65e:	0564      	lsls	r4, r4, #21
 800c660:	2b00      	cmp	r3, #0
 800c662:	d0fa      	beq.n	800c65a <__ieee754_sqrt+0x56>
 800c664:	e7f7      	b.n	800c656 <__ieee754_sqrt+0x52>
 800c666:	460a      	mov	r2, r1
 800c668:	e7fa      	b.n	800c660 <__ieee754_sqrt+0x5c>
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	3101      	adds	r1, #1
 800c66e:	02d8      	lsls	r0, r3, #11
 800c670:	d5fb      	bpl.n	800c66a <__ieee754_sqrt+0x66>
 800c672:	1e48      	subs	r0, r1, #1
 800c674:	1a12      	subs	r2, r2, r0
 800c676:	f1c1 0020 	rsb	r0, r1, #32
 800c67a:	fa24 f000 	lsr.w	r0, r4, r0
 800c67e:	4303      	orrs	r3, r0
 800c680:	408c      	lsls	r4, r1
 800c682:	2600      	movs	r6, #0
 800c684:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c688:	2116      	movs	r1, #22
 800c68a:	07d2      	lsls	r2, r2, #31
 800c68c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c690:	4632      	mov	r2, r6
 800c692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c69a:	bf5c      	itt	pl
 800c69c:	005b      	lslpl	r3, r3, #1
 800c69e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c6a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6a6:	bf58      	it	pl
 800c6a8:	0064      	lslpl	r4, r4, #1
 800c6aa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c6ae:	107f      	asrs	r7, r7, #1
 800c6b0:	0064      	lsls	r4, r4, #1
 800c6b2:	1815      	adds	r5, r2, r0
 800c6b4:	429d      	cmp	r5, r3
 800c6b6:	bfde      	ittt	le
 800c6b8:	182a      	addle	r2, r5, r0
 800c6ba:	1b5b      	suble	r3, r3, r5
 800c6bc:	1836      	addle	r6, r6, r0
 800c6be:	0fe5      	lsrs	r5, r4, #31
 800c6c0:	3901      	subs	r1, #1
 800c6c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c6c6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c6ca:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c6ce:	d1f0      	bne.n	800c6b2 <__ieee754_sqrt+0xae>
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	f04f 0a20 	mov.w	sl, #32
 800c6d6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	eb01 0c00 	add.w	ip, r1, r0
 800c6e0:	db02      	blt.n	800c6e8 <__ieee754_sqrt+0xe4>
 800c6e2:	d113      	bne.n	800c70c <__ieee754_sqrt+0x108>
 800c6e4:	45a4      	cmp	ip, r4
 800c6e6:	d811      	bhi.n	800c70c <__ieee754_sqrt+0x108>
 800c6e8:	f1bc 0f00 	cmp.w	ip, #0
 800c6ec:	eb0c 0100 	add.w	r1, ip, r0
 800c6f0:	da42      	bge.n	800c778 <__ieee754_sqrt+0x174>
 800c6f2:	2900      	cmp	r1, #0
 800c6f4:	db40      	blt.n	800c778 <__ieee754_sqrt+0x174>
 800c6f6:	f102 0e01 	add.w	lr, r2, #1
 800c6fa:	1a9b      	subs	r3, r3, r2
 800c6fc:	4672      	mov	r2, lr
 800c6fe:	45a4      	cmp	ip, r4
 800c700:	bf88      	it	hi
 800c702:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c706:	eba4 040c 	sub.w	r4, r4, ip
 800c70a:	4405      	add	r5, r0
 800c70c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c710:	f1ba 0a01 	subs.w	sl, sl, #1
 800c714:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c718:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c71c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c720:	d1db      	bne.n	800c6da <__ieee754_sqrt+0xd6>
 800c722:	431c      	orrs	r4, r3
 800c724:	d01a      	beq.n	800c75c <__ieee754_sqrt+0x158>
 800c726:	4c20      	ldr	r4, [pc, #128]	@ (800c7a8 <__ieee754_sqrt+0x1a4>)
 800c728:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c7ac <__ieee754_sqrt+0x1a8>
 800c72c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c730:	e9db 2300 	ldrd	r2, r3, [fp]
 800c734:	f7f3 fdcc 	bl	80002d0 <__aeabi_dsub>
 800c738:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4640      	mov	r0, r8
 800c742:	4649      	mov	r1, r9
 800c744:	f7f4 f9f8 	bl	8000b38 <__aeabi_dcmple>
 800c748:	b140      	cbz	r0, 800c75c <__ieee754_sqrt+0x158>
 800c74a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c74e:	e9db 2300 	ldrd	r2, r3, [fp]
 800c752:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c756:	d111      	bne.n	800c77c <__ieee754_sqrt+0x178>
 800c758:	4655      	mov	r5, sl
 800c75a:	3601      	adds	r6, #1
 800c75c:	1072      	asrs	r2, r6, #1
 800c75e:	086b      	lsrs	r3, r5, #1
 800c760:	07f1      	lsls	r1, r6, #31
 800c762:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c766:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c76a:	bf48      	it	mi
 800c76c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c770:	4618      	mov	r0, r3
 800c772:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c776:	e757      	b.n	800c628 <__ieee754_sqrt+0x24>
 800c778:	4696      	mov	lr, r2
 800c77a:	e7be      	b.n	800c6fa <__ieee754_sqrt+0xf6>
 800c77c:	f7f3 fdaa 	bl	80002d4 <__adddf3>
 800c780:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4640      	mov	r0, r8
 800c78a:	4649      	mov	r1, r9
 800c78c:	f7f4 f9ca 	bl	8000b24 <__aeabi_dcmplt>
 800c790:	b120      	cbz	r0, 800c79c <__ieee754_sqrt+0x198>
 800c792:	1ca8      	adds	r0, r5, #2
 800c794:	bf08      	it	eq
 800c796:	3601      	addeq	r6, #1
 800c798:	3502      	adds	r5, #2
 800c79a:	e7df      	b.n	800c75c <__ieee754_sqrt+0x158>
 800c79c:	1c6b      	adds	r3, r5, #1
 800c79e:	f023 0501 	bic.w	r5, r3, #1
 800c7a2:	e7db      	b.n	800c75c <__ieee754_sqrt+0x158>
 800c7a4:	7ff00000 	.word	0x7ff00000
 800c7a8:	200001f8 	.word	0x200001f8
 800c7ac:	200001f0 	.word	0x200001f0

0800c7b0 <_init>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	bf00      	nop
 800c7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b6:	bc08      	pop	{r3}
 800c7b8:	469e      	mov	lr, r3
 800c7ba:	4770      	bx	lr

0800c7bc <_fini>:
 800c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7be:	bf00      	nop
 800c7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c2:	bc08      	pop	{r3}
 800c7c4:	469e      	mov	lr, r3
 800c7c6:	4770      	bx	lr
