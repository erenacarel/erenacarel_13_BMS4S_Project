
cubemx_project_bms4s_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004554  08004554  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004554  08004554  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004554  08004554  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800455c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000005c  080045b8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080045b8  00006358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc5f  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ad  00000000  00000000  00012ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00015398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e2  00000000  00000000  00015f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019155  00000000  00000000  00016802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011db8  00000000  00000000  0002f957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b318  00000000  00000000  0004170f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cca27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003274  00000000  00000000  000cca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000cfce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800448c 	.word	0x0800448c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800448c 	.word	0x0800448c

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b3d      	ldr	r3, [pc, #244]	@ (8000254 <MX_ADC1_Init+0x108>)
 800015e:	4a3e      	ldr	r2, [pc, #248]	@ (8000258 <MX_ADC1_Init+0x10c>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b3c      	ldr	r3, [pc, #240]	@ (8000254 <MX_ADC1_Init+0x108>)
 8000164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016a:	4b3a      	ldr	r3, [pc, #232]	@ (8000254 <MX_ADC1_Init+0x108>)
 800016c:	2200      	movs	r2, #0
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b38      	ldr	r3, [pc, #224]	@ (8000254 <MX_ADC1_Init+0x108>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b37      	ldr	r3, [pc, #220]	@ (8000254 <MX_ADC1_Init+0x108>)
 8000178:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b35      	ldr	r3, [pc, #212]	@ (8000254 <MX_ADC1_Init+0x108>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000184:	4b33      	ldr	r3, [pc, #204]	@ (8000254 <MX_ADC1_Init+0x108>)
 8000186:	2207      	movs	r2, #7
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4832      	ldr	r0, [pc, #200]	@ (8000254 <MX_ADC1_Init+0x108>)
 800018c:	f000 fd28 	bl	8000be0 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fa2c 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800019a:	2301      	movs	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	482a      	ldr	r0, [pc, #168]	@ (8000254 <MX_ADC1_Init+0x108>)
 80001ac:	f000 fdf0 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fa1c 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ba:	2302      	movs	r3, #2
 80001bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4619      	mov	r1, r3
 80001c2:	4824      	ldr	r0, [pc, #144]	@ (8000254 <MX_ADC1_Init+0x108>)
 80001c4:	f000 fde4 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80001ce:	f000 fa10 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001d2:	2303      	movs	r3, #3
 80001d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4619      	mov	r1, r3
 80001da:	481e      	ldr	r0, [pc, #120]	@ (8000254 <MX_ADC1_Init+0x108>)
 80001dc:	f000 fdd8 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80001e6:	f000 fa04 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001ea:	2304      	movs	r3, #4
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4818      	ldr	r0, [pc, #96]	@ (8000254 <MX_ADC1_Init+0x108>)
 80001f4:	f000 fdcc 	bl	8000d90 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80001fe:	f000 f9f8 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000202:	2305      	movs	r3, #5
 8000204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	4812      	ldr	r0, [pc, #72]	@ (8000254 <MX_ADC1_Init+0x108>)
 800020c:	f000 fdc0 	bl	8000d90 <HAL_ADC_ConfigChannel>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000216:	f000 f9ec 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800021a:	2306      	movs	r3, #6
 800021c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	480c      	ldr	r0, [pc, #48]	@ (8000254 <MX_ADC1_Init+0x108>)
 8000224:	f000 fdb4 	bl	8000d90 <HAL_ADC_ConfigChannel>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800022e:	f000 f9e0 	bl	80005f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000232:	2307      	movs	r3, #7
 8000234:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4619      	mov	r1, r3
 800023a:	4806      	ldr	r0, [pc, #24]	@ (8000254 <MX_ADC1_Init+0x108>)
 800023c:	f000 fda8 	bl	8000d90 <HAL_ADC_ConfigChannel>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000246:	f000 f9d4 	bl	80005f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000078 	.word	0x20000078
 8000258:	40012400 	.word	0x40012400

0800025c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a28      	ldr	r2, [pc, #160]	@ (8000318 <HAL_ADC_MspInit+0xbc>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d149      	bne.n	8000310 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800027c:	4b27      	ldr	r3, [pc, #156]	@ (800031c <HAL_ADC_MspInit+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a26      	ldr	r2, [pc, #152]	@ (800031c <HAL_ADC_MspInit+0xc0>)
 8000282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b24      	ldr	r3, [pc, #144]	@ (800031c <HAL_ADC_MspInit+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b21      	ldr	r3, [pc, #132]	@ (800031c <HAL_ADC_MspInit+0xc0>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a20      	ldr	r2, [pc, #128]	@ (800031c <HAL_ADC_MspInit+0xc0>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1e      	ldr	r3, [pc, #120]	@ (800031c <HAL_ADC_MspInit+0xc0>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80002ac:	233e      	movs	r3, #62	@ 0x3e
 80002ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	4619      	mov	r1, r3
 80002ba:	4819      	ldr	r0, [pc, #100]	@ (8000320 <HAL_ADC_MspInit+0xc4>)
 80002bc:	f001 f9de 	bl	800167c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002c2:	4a19      	ldr	r2, [pc, #100]	@ (8000328 <HAL_ADC_MspInit+0xcc>)
 80002c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002c6:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80002e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002f4:	480b      	ldr	r0, [pc, #44]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 80002f6:	f000 ffad 	bl	8001254 <HAL_DMA_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000300:	f000 f977 	bl	80005f2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a07      	ldr	r2, [pc, #28]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 8000308:	621a      	str	r2, [r3, #32]
 800030a:	4a06      	ldr	r2, [pc, #24]	@ (8000324 <HAL_ADC_MspInit+0xc8>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40012400 	.word	0x40012400
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800
 8000324:	200000a8 	.word	0x200000a8
 8000328:	40020008 	.word	0x40020008

0800032c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_DMA_Init+0x38>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <MX_DMA_Init+0x38>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_DMA_Init+0x38>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	200b      	movs	r0, #11
 8000350:	f000 ff45 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000354:	200b      	movs	r0, #11
 8000356:	f000 ff5e 	bl	8001216 <HAL_NVIC_EnableIRQ>

}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037c:	4b24      	ldr	r3, [pc, #144]	@ (8000410 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a23      	ldr	r2, [pc, #140]	@ (8000410 <MX_GPIO_Init+0xa8>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0310 	and.w	r3, r3, #16
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b1e      	ldr	r3, [pc, #120]	@ (8000410 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a1d      	ldr	r2, [pc, #116]	@ (8000410 <MX_GPIO_Init+0xa8>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a17      	ldr	r2, [pc, #92]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_GPIO_Init+0xa8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_USR_LED_PIN_GPIO_Port, _USR_LED_PIN_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e2:	480c      	ldr	r0, [pc, #48]	@ (8000414 <MX_GPIO_Init+0xac>)
 80003e4:	f001 face 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _USR_LED_PIN_Pin;
 80003e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(_USR_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	@ (8000414 <MX_GPIO_Init+0xac>)
 8000402:	f001 f93b 	bl	800167c <HAL_GPIO_Init>

}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40011000 	.word	0x40011000

08000418 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_I2C1_Init+0x50>)
 800041e:	4a13      	ldr	r2, [pc, #76]	@ (800046c <MX_I2C1_Init+0x54>)
 8000420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <MX_I2C1_Init+0x50>)
 8000424:	4a12      	ldr	r2, [pc, #72]	@ (8000470 <MX_I2C1_Init+0x58>)
 8000426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000428:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_I2C1_Init+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <MX_I2C1_Init+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000434:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <MX_I2C1_Init+0x50>)
 8000436:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800043a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043c:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <MX_I2C1_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <MX_I2C1_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <MX_I2C1_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <MX_I2C1_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	@ (8000468 <MX_I2C1_Init+0x50>)
 8000456:	f001 faad 	bl	80019b4 <HAL_I2C_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000460:	f000 f8c7 	bl	80005f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000ec 	.word	0x200000ec
 800046c:	40005400 	.word	0x40005400
 8000470:	00061a80 	.word	0x00061a80

08000474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	@ 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a1d      	ldr	r2, [pc, #116]	@ (8000504 <HAL_I2C_MspInit+0x90>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d132      	bne.n	80004fa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <HAL_I2C_MspInit+0x94>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a1b      	ldr	r2, [pc, #108]	@ (8000508 <HAL_I2C_MspInit+0x94>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <HAL_I2C_MspInit+0x94>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0308 	and.w	r3, r3, #8
 80004a8:	613b      	str	r3, [r7, #16]
 80004aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = _USR_LCD_SCL_CHANNEL_Pin|_USR_LCD_SDA_CHANNEL_Pin;
 80004ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80004b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b2:	2312      	movs	r3, #18
 80004b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4619      	mov	r1, r3
 80004c0:	4812      	ldr	r0, [pc, #72]	@ (800050c <HAL_I2C_MspInit+0x98>)
 80004c2:	f001 f8db 	bl	800167c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_I2C_MspInit+0x9c>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80004cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80004d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80004d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	627b      	str	r3, [r7, #36]	@ 0x24
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <HAL_I2C_MspInit+0x9c>)
 80004de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <HAL_I2C_MspInit+0x94>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <HAL_I2C_MspInit+0x94>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <HAL_I2C_MspInit+0x94>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004fa:	bf00      	nop
 80004fc:	3728      	adds	r7, #40	@ 0x28
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40005400 	.word	0x40005400
 8000508:	40021000 	.word	0x40021000
 800050c:	40010c00 	.word	0x40010c00
 8000510:	40010000 	.word	0x40010000

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb00 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f7ff ff22 	bl	8000368 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f7ff ff02 	bl	800032c <MX_DMA_Init>
  MX_I2C1_Init();
 8000528:	f7ff ff76 	bl	8000418 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f8ea 	bl	8000704 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000530:	f7ff fe0c 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  UsrSystemInitial();
 8000534:	f000 fab2 	bl	8000a9c <UsrSystemInitial>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x24>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000546:	2228      	movs	r2, #40	@ 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fb06 	bl	8003b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000588:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800058c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000592:	4618      	mov	r0, r3
 8000594:	f001 ffd8 	bl	8002548 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059e:	f000 f828 	bl	80005f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fa44 	bl	8002a4c <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005ca:	f000 f812 	bl	80005f2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ce:	2302      	movs	r3, #2
 80005d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fbc4 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005e6:	f000 f804 	bl	80005f2 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f6:	b672      	cpsid	i
}
 80005f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <Error_Handler+0x8>
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <HAL_MspInit+0x6c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <HAL_MspInit+0x6c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <HAL_MspInit+0x6c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <HAL_MspInit+0x6c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a12      	ldr	r2, [pc, #72]	@ (800066c <HAL_MspInit+0x6c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <HAL_MspInit+0x6c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fdcf 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000640:	2005      	movs	r0, #5
 8000642:	f000 fde8 	bl	8001216 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_MspInit+0x70>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <HAL_MspInit+0x70>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <NMI_Handler+0x4>

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  HAL_NVIC_SystemReset();
 8000680:	f000 fdd7 	bl	8001232 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x8>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 fa6e 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006e0:	4802      	ldr	r0, [pc, #8]	@ (80006ec <DMA1_Channel1_IRQHandler+0x10>)
 80006e2:	f000 fec5 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a8 	.word	0x200000a8

080006f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006f4:	4802      	ldr	r0, [pc, #8]	@ (8000700 <USART1_IRQHandler+0x10>)
 80006f6:	f002 fcc1 	bl	800307c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000140 	.word	0x20000140

08000704 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f002 fbca 	bl	8002ed4 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f7ff ff54 	bl	80005f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000140 	.word	0x20000140
 8000754:	40013800 	.word	0x40013800

08000758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a26      	ldr	r2, [pc, #152]	@ (800080c <HAL_UART_MspInit+0xb4>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d145      	bne.n	8000804 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000778:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <HAL_UART_MspInit+0xb8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a24      	ldr	r2, [pc, #144]	@ (8000810 <HAL_UART_MspInit+0xb8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <HAL_UART_MspInit+0xb8>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <HAL_UART_MspInit+0xb8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <HAL_UART_MspInit+0xb8>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <HAL_UART_MspInit+0xb8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = _USR_LOG_TX_CHANNEL_Pin;
 80007a8:	2340      	movs	r3, #64	@ 0x40
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(_USR_LOG_TX_CHANNEL_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <HAL_UART_MspInit+0xbc>)
 80007bc:	f000 ff5e 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = _USR_LOG_RX_CHANNEL_Pin;
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(_USR_LOG_RX_CHANNEL_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4810      	ldr	r0, [pc, #64]	@ (8000814 <HAL_UART_MspInit+0xbc>)
 80007d4:	f000 ff52 	bl	800167c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_UART_MspInit+0xc0>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <HAL_UART_MspInit+0xc0>)
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2025      	movs	r0, #37	@ 0x25
 80007fa:	f000 fcf0 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fe:	2025      	movs	r0, #37	@ 0x25
 8000800:	f000 fd09 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	@ 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40010c00 	.word	0x40010c00
 8000818:	40010000 	.word	0x40010000

0800081c <UsrLcdInit>:
_io bool lcdSendCommandProc(char m_command);
_io bool lcdSendDataProc(char m_data);


bool UsrLcdInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    if(!lcdSendCommandProc(_USR_LCD_CLEAR_DISPLAY))
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f8c3 	bl	80009ac <lcdSendCommandProc>
 8000826:	4603      	mov	r3, r0
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <UsrLcdInit+0x1a>
    	return false;
 8000832:	2300      	movs	r3, #0
 8000834:	e02c      	b.n	8000890 <UsrLcdInit+0x74>
    if(!lcdSendCommandProc(_USR_LCD_RETURN_HOME))
 8000836:	2002      	movs	r0, #2
 8000838:	f000 f8b8 	bl	80009ac <lcdSendCommandProc>
 800083c:	4603      	mov	r3, r0
 800083e:	f083 0301 	eor.w	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <UsrLcdInit+0x30>
    	return false;
 8000848:	2300      	movs	r3, #0
 800084a:	e021      	b.n	8000890 <UsrLcdInit+0x74>
    if(!lcdSendCommandProc(_USR_LCD_FUNCTION_SET | _USR_LCD_FUNCTION_SET_DATA_LENGTH)) // Function set -> DB5=1 and DB3=N=1  2-line display mode.      2x16 kullanılabilir
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f000 f8ad 	bl	80009ac <lcdSendCommandProc>
 8000852:	4603      	mov	r3, r0
 8000854:	f083 0301 	eor.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <UsrLcdInit+0x46>
    	return false;
 800085e:	2300      	movs	r3, #0
 8000860:	e016      	b.n	8000890 <UsrLcdInit+0x74>
	if(!lcdSendCommandProc(_USR_LCD_DISPLAY_ON))   // Display ON/OFF Control DB3=1 and DB2=D=1 display is turned on  // if DB1=C=1 cursor on
 8000862:	200c      	movs	r0, #12
 8000864:	f000 f8a2 	bl	80009ac <lcdSendCommandProc>
 8000868:	4603      	mov	r3, r0
 800086a:	f083 0301 	eor.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <UsrLcdInit+0x5c>
		return false;
 8000874:	2300      	movs	r3, #0
 8000876:	e00b      	b.n	8000890 <UsrLcdInit+0x74>
	if(!lcdSendCommandProc(0x80))  // imleci ilk satırın basinda tut.
 8000878:	2080      	movs	r0, #128	@ 0x80
 800087a:	f000 f897 	bl	80009ac <lcdSendCommandProc>
 800087e:	4603      	mov	r3, r0
 8000880:	f083 0301 	eor.w	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <UsrLcdInit+0x72>
		return false;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <UsrLcdInit+0x74>
	return true;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	bd80      	pop	{r7, pc}

08000894 <UsrLcdSendString>:


void UsrLcdSendString(char *m_string)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    while(*m_string)
 800089c:	e006      	b.n	80008ac <UsrLcdSendString+0x18>
    {
        lcdSendDataProc(*m_string++);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f8bc 	bl	8000a24 <lcdSendDataProc>
    while(*m_string)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f4      	bne.n	800089e <UsrLcdSendString+0xa>
    }
        
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <UsrLcdSetCursor>:
    lcdSendCommandProc(_USR_LCD_CLEAR_DISPLAY);
}


void UsrLcdSetCursor(uint8_t f_pRow, uint8_t f_pCol)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	460a      	mov	r2, r1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	4613      	mov	r3, r2
 80008cc:	71bb      	strb	r3, [r7, #6]
    if (f_pRow == 0)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d107      	bne.n	80008e4 <UsrLcdSetCursor+0x26>
        lcdSendCommandProc(_USR_LCD_SET_DDRAM_ADDR | f_pCol);
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f865 	bl	80009ac <lcdSendCommandProc>
    else if (f_pRow == 1)
        lcdSendCommandProc(_USR_LCD_SET_SUB_DDRAM_ADDR | f_pCol);
    else
        f_pRow = 0;
}
 80008e2:	e00c      	b.n	80008fe <UsrLcdSetCursor+0x40>
    else if (f_pRow == 1)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d107      	bne.n	80008fa <UsrLcdSetCursor+0x3c>
        lcdSendCommandProc(_USR_LCD_SET_SUB_DDRAM_ADDR | f_pCol);
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f85a 	bl	80009ac <lcdSendCommandProc>
}
 80008f8:	e001      	b.n	80008fe <UsrLcdSetCursor+0x40>
        f_pRow = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	71fb      	strb	r3, [r7, #7]
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <UsrI2CScan>:


void UsrI2CScan(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
    uint16_t i = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	80fb      	strh	r3, [r7, #6]
    uint16_t ret = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	80bb      	strh	r3, [r7, #4]

    HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, startMessage, sprintf((char*)startMessage, "Starting I2C Scanning...\r\n"), 100);
 8000916:	491e      	ldr	r1, [pc, #120]	@ (8000990 <UsrI2CScan+0x88>)
 8000918:	481e      	ldr	r0, [pc, #120]	@ (8000994 <UsrI2CScan+0x8c>)
 800091a:	f003 f8ff 	bl	8003b1c <siprintf>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	2364      	movs	r3, #100	@ 0x64
 8000924:	491b      	ldr	r1, [pc, #108]	@ (8000994 <UsrI2CScan+0x8c>)
 8000926:	481c      	ldr	r0, [pc, #112]	@ (8000998 <UsrI2CScan+0x90>)
 8000928:	f002 fb24 	bl	8002f74 <HAL_UART_Transmit>

    for (i = 1; i < 128; i++)
 800092c:	2301      	movs	r3, #1
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	e01c      	b.n	800096c <UsrI2CScan+0x64>
    {
        ret = HAL_I2C_IsDeviceReady(&_USR_LCD_PANEL_I2C_CHANNEL, (i << 1), 2, 100);
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	b299      	uxth	r1, r3
 8000938:	2364      	movs	r3, #100	@ 0x64
 800093a:	2202      	movs	r2, #2
 800093c:	4817      	ldr	r0, [pc, #92]	@ (800099c <UsrI2CScan+0x94>)
 800093e:	f001 fa7b 	bl	8001e38 <HAL_I2C_IsDeviceReady>
 8000942:	4603      	mov	r3, r0
 8000944:	80bb      	strh	r3, [r7, #4]
        if (ret == HAL_OK)
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10c      	bne.n	8000966 <UsrI2CScan+0x5e>
        {
            HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, data, sprintf((char*)data, "iste adres: 0x%X\n", i), 100);
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	461a      	mov	r2, r3
 8000950:	4913      	ldr	r1, [pc, #76]	@ (80009a0 <UsrI2CScan+0x98>)
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <UsrI2CScan+0x9c>)
 8000954:	f003 f8e2 	bl	8003b1c <siprintf>
 8000958:	4603      	mov	r3, r0
 800095a:	b29a      	uxth	r2, r3
 800095c:	2364      	movs	r3, #100	@ 0x64
 800095e:	4911      	ldr	r1, [pc, #68]	@ (80009a4 <UsrI2CScan+0x9c>)
 8000960:	480d      	ldr	r0, [pc, #52]	@ (8000998 <UsrI2CScan+0x90>)
 8000962:	f002 fb07 	bl	8002f74 <HAL_UART_Transmit>
    for (i = 1; i < 128; i++)
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	3301      	adds	r3, #1
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000970:	d9df      	bls.n	8000932 <UsrI2CScan+0x2a>
        }
    }
    HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, data, sprintf((char*)data, "islem bitmistir.\r\n"), 100);
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <UsrI2CScan+0xa0>)
 8000974:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <UsrI2CScan+0x9c>)
 8000976:	f003 f8d1 	bl	8003b1c <siprintf>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	2364      	movs	r3, #100	@ 0x64
 8000980:	4908      	ldr	r1, [pc, #32]	@ (80009a4 <UsrI2CScan+0x9c>)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <UsrI2CScan+0x90>)
 8000984:	f002 faf6 	bl	8002f74 <HAL_UART_Transmit>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	080044a4 	.word	0x080044a4
 8000994:	20000188 	.word	0x20000188
 8000998:	20000140 	.word	0x20000140
 800099c:	200000ec 	.word	0x200000ec
 80009a0:	080044c0 	.word	0x080044c0
 80009a4:	200001c8 	.word	0x200001c8
 80009a8:	080044d4 	.word	0x080044d4

080009ac <lcdSendCommandProc>:


_io bool lcdSendCommandProc(char m_command)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
    char data_u = ' ';
 80009b6:	2320      	movs	r3, #32
 80009b8:	73fb      	strb	r3, [r7, #15]
    char data_l = ' ';
 80009ba:	2320      	movs	r3, #32
 80009bc:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {"0"};
 80009be:	2330      	movs	r3, #48	@ 0x30
 80009c0:	60bb      	str	r3, [r7, #8]
	 *  Gönderilen yüksek değerlikli 4 bit temizlenir.
	 *  Ardından E = 1 yapılır ve ilk 4 bit lcd'ye gönderilir.
	 *  Ve E = 0 yapılarak, son gönderilen düşük değerli 4 bit porttan silinir.
	 */    
    
    data_u = (m_command & 0xF0);   // cmd & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f023 030f 	bic.w	r3, r3, #15
 80009c8:	73fb      	strb	r3, [r7, #15]
    data_l = ((m_command << 4) & 0xF0); // (cmd << 4) & 0x11110000 -> 0xefgh0000 & 0x11110000 = 0xefgh0000
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0C;  // en = 1 & rs = 0    0xabcd0000 | 0x00001100 -> 0xabcd1100
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	f043 030c 	orr.w	r3, r3, #12
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en = 0 & rs = 0    0xabcd0000 | 0x00001000 -> 0xabcd1000
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en = 1 & rs = 0    0xefgh0000 | 0x00001100 -> 0xefgh1100
 80009e4:	7bbb      	ldrb	r3, [r7, #14]
 80009e6:	f043 030c 	orr.w	r3, r3, #12
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en = 0 & rs = 0    0xefgh0000 | 0x00001000 -> 0xefgh1000
 80009ee:	7bbb      	ldrb	r3, [r7, #14]
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	72fb      	strb	r3, [r7, #11]

    if (HAL_OK == HAL_I2C_Master_Transmit(&_USR_LCD_PANEL_I2C_CHANNEL, (_USR_LCD_I2C_ADDRESS << 1), (uint8_t*)data_t, 4, HAL_MAX_DELAY))
 80009f8:	f107 0208 	add.w	r2, r7, #8
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2304      	movs	r3, #4
 8000a04:	214e      	movs	r1, #78	@ 0x4e
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <lcdSendCommandProc+0x74>)
 8000a08:	f001 f918 	bl	8001c3c <HAL_I2C_Master_Transmit>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <lcdSendCommandProc+0x6a>
        return true;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <lcdSendCommandProc+0x6c>
    return false;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000ec 	.word	0x200000ec

08000a24 <lcdSendDataProc>:


_io bool lcdSendDataProc(char m_data)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
    char data_u = ' ';
 8000a2e:	2320      	movs	r3, #32
 8000a30:	73fb      	strb	r3, [r7, #15]
    char data_l = ' ';
 8000a32:	2320      	movs	r3, #32
 8000a34:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {"0"};
 8000a36:	2330      	movs	r3, #48	@ 0x30
 8000a38:	60bb      	str	r3, [r7, #8]

    // öncelikli ve düşük seviyeli olarak ikiye bölüyor
    data_u = (m_data & 0xF0); // data & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f023 030f 	bic.w	r3, r3, #15
 8000a40:	73fb      	strb	r3, [r7, #15]
    data_l = ((m_data << 4) & 0xF0); // (data << 4) & 0x11110000 -> 0xefgh0000 & 0x11110000 = 0xefgh0000
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0D;  // en = 1 & rs = 1   0xabcd0000 | 0x00001101 -> 0xabcd1101   // yazma yani gönderme yapıyoruz
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	f043 030d 	orr.w	r3, r3, #13
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en = 0 & rs = 1   0xabcd0000 | 0x00001001 -> 0xabcd1001   // silme yapıyoruz
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	f043 0309 	orr.w	r3, r3, #9
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en = 1 & rs = 1   0xefgh0000 | 0x00001100 -> 0xefgh1101   // düşük seviyeli bit gönderme
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	f043 030d 	orr.w	r3, r3, #13
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en = 0 & rs = 1   0xefgh0000 | 0x00001000 -> 0xefgh1001   // sonra silme
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	f043 0309 	orr.w	r3, r3, #9
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	72fb      	strb	r3, [r7, #11]

    if (HAL_OK == HAL_I2C_Master_Transmit(&_USR_LCD_PANEL_I2C_CHANNEL, (_USR_LCD_I2C_ADDRESS << 1), (uint8_t*)data_t, 4, HAL_MAX_DELAY))
 8000a70:	f107 0208 	add.w	r2, r7, #8
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	214e      	movs	r1, #78	@ 0x4e
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <lcdSendDataProc+0x74>)
 8000a80:	f001 f8dc 	bl	8001c3c <HAL_I2C_Master_Transmit>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <lcdSendDataProc+0x6a>
        return true;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <lcdSendDataProc+0x6c>
    return false;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000ec 	.word	0x200000ec

08000a9c <UsrSystemInitial>:
S_ADC_PARAMETERS g_sAdcParameters;
S_ADC_RAW_PARAMETERS g_sAdcRawParameters;


void UsrSystemInitial(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    // UsrAdcInitial(enable);
    // UsrAdcInitial(&g_sAdcParameters);
    UsrI2CScan();
 8000aa0:	f7ff ff32 	bl	8000908 <UsrI2CScan>
    if (UsrLcdInit())
 8000aa4:	f7ff feba 	bl	800081c <UsrLcdInit>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <UsrSystemInitial+0x20>
    {
        UsrLcdSetCursor(0, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff ff04 	bl	80008be <UsrLcdSetCursor>
        UsrLcdSendString("Eren Acarel");
 8000ab6:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <UsrSystemInitial+0x24>)
 8000ab8:	f7ff feec 	bl	8000894 <UsrLcdSendString>
        // UsrLcdClearDisplay();

    }

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	080044e8 	.word	0x080044e8

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f000 f823 	bl	8000b0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae0:	4c09      	ldr	r4, [pc, #36]	@ (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f003 f83d 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fd0f 	bl	8000514 <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b00:	0800455c 	.word	0x0800455c
  ldr r2, =_sbss
 8000b04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b08:	20000358 	.word	0x20000358

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>

08000b0e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 fb4b 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fd62 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fb67 	bl	800123a <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 fb2b 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a03      	ldr	r2, [pc, #12]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000208 	.word	0x20000208

08000bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	@ (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	20000208 	.word	0x20000208

08000be0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0be      	b.n	8000d80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fb1c 	bl	800025c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f9ab 	bl	8000f80 <ADC_ConversionStop_Disable>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8099 	bne.w	8000d6e <HAL_ADC_Init+0x18e>
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 8095 	bne.w	8000d6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c4c:	f023 0302 	bic.w	r3, r3, #2
 8000c50:	f043 0202 	orr.w	r2, r3, #2
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7b1b      	ldrb	r3, [r3, #12]
 8000c66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c78:	d003      	beq.n	8000c82 <HAL_ADC_Init+0xa2>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d102      	bne.n	8000c88 <HAL_ADC_Init+0xa8>
 8000c82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c86:	e000      	b.n	8000c8a <HAL_ADC_Init+0xaa>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7d1b      	ldrb	r3, [r3, #20]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d119      	bne.n	8000ccc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7b1b      	ldrb	r3, [r3, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d109      	bne.n	8000cb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	035a      	lsls	r2, r3, #13
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	e00b      	b.n	8000ccc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f043 0220 	orr.w	r2, r3, #32
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	f043 0201 	orr.w	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <HAL_ADC_Init+0x1a8>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cfc:	d003      	beq.n	8000d06 <HAL_ADC_Init+0x126>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d104      	bne.n	8000d10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	051b      	lsls	r3, r3, #20
 8000d0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_ADC_Init+0x1ac>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d10b      	bne.n	8000d4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3e:	f023 0303 	bic.w	r3, r3, #3
 8000d42:	f043 0201 	orr.w	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d4a:	e018      	b.n	8000d7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d50:	f023 0312 	bic.w	r3, r3, #18
 8000d54:	f043 0210 	orr.w	r2, r3, #16
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d60:	f043 0201 	orr.w	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d6c:	e007      	b.n	8000d7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d72:	f043 0210 	orr.w	r2, r3, #16
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	ffe1f7fd 	.word	0xffe1f7fd
 8000d8c:	ff1f0efe 	.word	0xff1f0efe

08000d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_ADC_ConfigChannel+0x20>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e0dc      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x1da>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d81c      	bhi.n	8000dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3b05      	subs	r3, #5
 8000dd2:	221f      	movs	r2, #31
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4019      	ands	r1, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b05      	subs	r3, #5
 8000dec:	fa00 f203 	lsl.w	r2, r0, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df8:	e03c      	b.n	8000e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b0c      	cmp	r3, #12
 8000e00:	d81c      	bhi.n	8000e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	3b23      	subs	r3, #35	@ 0x23
 8000e14:	221f      	movs	r2, #31
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4019      	ands	r1, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b23      	subs	r3, #35	@ 0x23
 8000e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e3a:	e01b      	b.n	8000e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b41      	subs	r3, #65	@ 0x41
 8000e4e:	221f      	movs	r2, #31
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3b41      	subs	r3, #65	@ 0x41
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d91c      	bls.n	8000eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68d9      	ldr	r1, [r3, #12]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3b1e      	subs	r3, #30
 8000e8e:	2207      	movs	r2, #7
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4019      	ands	r1, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6898      	ldr	r0, [r3, #8]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3b1e      	subs	r3, #30
 8000ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	e019      	b.n	8000eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6919      	ldr	r1, [r3, #16]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4019      	ands	r1, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6898      	ldr	r0, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d003      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ef6:	2b11      	cmp	r3, #17
 8000ef8:	d132      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d125      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d126      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	d11a      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	0c9a      	lsrs	r2, r3, #18
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f40:	e002      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x1b2>
 8000f4e:	e007      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f54:	f043 0220 	orr.w	r2, r3, #32
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40012400 	.word	0x40012400
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	431bde83 	.word	0x431bde83

08000f80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d12e      	bne.n	8000ff8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000faa:	f7ff fe0f 	bl	8000bcc <HAL_GetTick>
 8000fae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fb0:	e01b      	b.n	8000fea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb2:	f7ff fe0b 	bl	8000bcc <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d914      	bls.n	8000fea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10d      	bne.n	8000fea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd2:	f043 0210 	orr.w	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e007      	b.n	8000ffa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d0dc      	beq.n	8000fb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4906      	ldr	r1, [pc, #24]	@ (800109c <__NVIC_EnableIRQ+0x34>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800115c:	f3bf 8f4f 	dsb	sy
}
 8001160:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <__NVIC_SystemReset+0x24>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800116a:	4904      	ldr	r1, [pc, #16]	@ (800117c <__NVIC_SystemReset+0x24>)
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <__NVIC_SystemReset+0x28>)
 800116e:	4313      	orrs	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001172:	f3bf 8f4f 	dsb	sy
}
 8001176:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <__NVIC_SystemReset+0x20>
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0004 	.word	0x05fa0004

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff7a 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff17 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff2c 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff7a 	bl	80010f4 <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff49 	bl	80010a0 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff1f 	bl	8001068 <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001236:	f7ff ff8f 	bl	8001158 <__NVIC_SystemReset>

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff9e 	bl	8001184 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e043      	b.n	80012f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <HAL_DMA_Init+0xa8>)
 8001272:	4413      	add	r3, r2
 8001274:	4a22      	ldr	r2, [pc, #136]	@ (8001300 <HAL_DMA_Init+0xac>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	009a      	lsls	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <HAL_DMA_Init+0xb0>)
 8001286:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800129e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	bffdfff8 	.word	0xbffdfff8
 8001300:	cccccccd 	.word	0xcccccccd
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d008      	beq.n	8001332 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2204      	movs	r2, #4
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e020      	b.n	8001374 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 020e 	bic.w	r2, r2, #14
 8001340:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
	...

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d005      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2204      	movs	r2, #4
 800139c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e051      	b.n	8001448 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_DMA_Abort_IT+0xd4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d029      	beq.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <HAL_DMA_Abort_IT+0xd8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <HAL_DMA_Abort_IT+0x9e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <HAL_DMA_Abort_IT+0xdc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01a      	beq.n	8001418 <HAL_DMA_Abort_IT+0x98>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <HAL_DMA_Abort_IT+0xe0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d012      	beq.n	8001412 <HAL_DMA_Abort_IT+0x92>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_DMA_Abort_IT+0xe4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00a      	beq.n	800140c <HAL_DMA_Abort_IT+0x8c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_DMA_Abort_IT+0xe8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <HAL_DMA_Abort_IT+0x86>
 8001400:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001404:	e00e      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800140a:	e00b      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 800140c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001410:	e008      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001416:	e005      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141c:	e002      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 800141e:	2310      	movs	r3, #16
 8001420:	e000      	b.n	8001424 <HAL_DMA_Abort_IT+0xa4>
 8001422:	2301      	movs	r3, #1
 8001424:	4a11      	ldr	r2, [pc, #68]	@ (800146c <HAL_DMA_Abort_IT+0xec>)
 8001426:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
    } 
  }
  return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020008 	.word	0x40020008
 8001458:	4002001c 	.word	0x4002001c
 800145c:	40020030 	.word	0x40020030
 8001460:	40020044 	.word	0x40020044
 8001464:	40020058 	.word	0x40020058
 8001468:	4002006c 	.word	0x4002006c
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	2204      	movs	r2, #4
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d04f      	beq.n	8001538 <HAL_DMA_IRQHandler+0xc8>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d04a      	beq.n	8001538 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a66      	ldr	r2, [pc, #408]	@ (8001660 <HAL_DMA_IRQHandler+0x1f0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d029      	beq.n	800151e <HAL_DMA_IRQHandler+0xae>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a65      	ldr	r2, [pc, #404]	@ (8001664 <HAL_DMA_IRQHandler+0x1f4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_IRQHandler+0xaa>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a63      	ldr	r2, [pc, #396]	@ (8001668 <HAL_DMA_IRQHandler+0x1f8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01a      	beq.n	8001514 <HAL_DMA_IRQHandler+0xa4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a62      	ldr	r2, [pc, #392]	@ (800166c <HAL_DMA_IRQHandler+0x1fc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d012      	beq.n	800150e <HAL_DMA_IRQHandler+0x9e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a60      	ldr	r2, [pc, #384]	@ (8001670 <HAL_DMA_IRQHandler+0x200>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00a      	beq.n	8001508 <HAL_DMA_IRQHandler+0x98>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001674 <HAL_DMA_IRQHandler+0x204>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d102      	bne.n	8001502 <HAL_DMA_IRQHandler+0x92>
 80014fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001500:	e00e      	b.n	8001520 <HAL_DMA_IRQHandler+0xb0>
 8001502:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001506:	e00b      	b.n	8001520 <HAL_DMA_IRQHandler+0xb0>
 8001508:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800150c:	e008      	b.n	8001520 <HAL_DMA_IRQHandler+0xb0>
 800150e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001512:	e005      	b.n	8001520 <HAL_DMA_IRQHandler+0xb0>
 8001514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001518:	e002      	b.n	8001520 <HAL_DMA_IRQHandler+0xb0>
 800151a:	2340      	movs	r3, #64	@ 0x40
 800151c:	e000      	b.n	8001520 <HAL_DMA_IRQHandler+0xb0>
 800151e:	2304      	movs	r3, #4
 8001520:	4a55      	ldr	r2, [pc, #340]	@ (8001678 <HAL_DMA_IRQHandler+0x208>)
 8001522:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8094 	beq.w	8001656 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001536:	e08e      	b.n	8001656 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	2202      	movs	r2, #2
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d056      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x186>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d051      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020a 	bic.w	r2, r2, #10
 800156e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a38      	ldr	r2, [pc, #224]	@ (8001660 <HAL_DMA_IRQHandler+0x1f0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d029      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x166>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a37      	ldr	r2, [pc, #220]	@ (8001664 <HAL_DMA_IRQHandler+0x1f4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d022      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x162>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a35      	ldr	r2, [pc, #212]	@ (8001668 <HAL_DMA_IRQHandler+0x1f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01a      	beq.n	80015cc <HAL_DMA_IRQHandler+0x15c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a34      	ldr	r2, [pc, #208]	@ (800166c <HAL_DMA_IRQHandler+0x1fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d012      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x156>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a32      	ldr	r2, [pc, #200]	@ (8001670 <HAL_DMA_IRQHandler+0x200>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00a      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x150>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a31      	ldr	r2, [pc, #196]	@ (8001674 <HAL_DMA_IRQHandler+0x204>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <HAL_DMA_IRQHandler+0x14a>
 80015b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015b8:	e00e      	b.n	80015d8 <HAL_DMA_IRQHandler+0x168>
 80015ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015be:	e00b      	b.n	80015d8 <HAL_DMA_IRQHandler+0x168>
 80015c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c4:	e008      	b.n	80015d8 <HAL_DMA_IRQHandler+0x168>
 80015c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ca:	e005      	b.n	80015d8 <HAL_DMA_IRQHandler+0x168>
 80015cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d0:	e002      	b.n	80015d8 <HAL_DMA_IRQHandler+0x168>
 80015d2:	2320      	movs	r3, #32
 80015d4:	e000      	b.n	80015d8 <HAL_DMA_IRQHandler+0x168>
 80015d6:	2302      	movs	r3, #2
 80015d8:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <HAL_DMA_IRQHandler+0x208>)
 80015da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d034      	beq.n	8001656 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f4:	e02f      	b.n	8001656 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	2208      	movs	r2, #8
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d028      	beq.n	8001658 <HAL_DMA_IRQHandler+0x1e8>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d023      	beq.n	8001658 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 020e 	bic.w	r2, r2, #14
 800161e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
    }
  }
  return;
 8001656:	bf00      	nop
 8001658:	bf00      	nop
}
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40020008 	.word	0x40020008
 8001664:	4002001c 	.word	0x4002001c
 8001668:	40020030 	.word	0x40020030
 800166c:	40020044 	.word	0x40020044
 8001670:	40020058 	.word	0x40020058
 8001674:	4002006c 	.word	0x4002006c
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	@ 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e169      	b.n	8001964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8158 	bne.w	800195e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a9a      	ldr	r2, [pc, #616]	@ (800191c <HAL_GPIO_Init+0x2a0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4a98      	ldr	r2, [pc, #608]	@ (800191c <HAL_GPIO_Init+0x2a0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4a98      	ldr	r2, [pc, #608]	@ (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a96      	ldr	r2, [pc, #600]	@ (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a96      	ldr	r2, [pc, #600]	@ (8001924 <HAL_GPIO_Init+0x2a8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a94      	ldr	r2, [pc, #592]	@ (8001924 <HAL_GPIO_Init+0x2a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a94      	ldr	r2, [pc, #592]	@ (8001928 <HAL_GPIO_Init+0x2ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a92      	ldr	r2, [pc, #584]	@ (8001928 <HAL_GPIO_Init+0x2ac>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a92      	ldr	r2, [pc, #584]	@ (800192c <HAL_GPIO_Init+0x2b0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a90      	ldr	r2, [pc, #576]	@ (800192c <HAL_GPIO_Init+0x2b0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a79      	ldr	r2, [pc, #484]	@ (8001930 <HAL_GPIO_Init+0x2b4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	@ 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	@ 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80b1 	beq.w	800195e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001934 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a4c      	ldr	r2, [pc, #304]	@ (8001934 <HAL_GPIO_Init+0x2b8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b4a      	ldr	r3, [pc, #296]	@ (8001934 <HAL_GPIO_Init+0x2b8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a48      	ldr	r2, [pc, #288]	@ (8001938 <HAL_GPIO_Init+0x2bc>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a40      	ldr	r2, [pc, #256]	@ (800193c <HAL_GPIO_Init+0x2c0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_GPIO_Init+0x1ec>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3f      	ldr	r2, [pc, #252]	@ (8001940 <HAL_GPIO_Init+0x2c4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1e8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3e      	ldr	r2, [pc, #248]	@ (8001944 <HAL_GPIO_Init+0x2c8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1e4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_GPIO_Init+0x2cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1e0>
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 800185c:	2304      	movs	r3, #4
 800185e:	e004      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001868:	2300      	movs	r3, #0
 800186a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	4093      	lsls	r3, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187a:	492f      	ldr	r1, [pc, #188]	@ (8001938 <HAL_GPIO_Init+0x2bc>)
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	492c      	ldr	r1, [pc, #176]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4928      	ldr	r1, [pc, #160]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4922      	ldr	r1, [pc, #136]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	491e      	ldr	r1, [pc, #120]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4918      	ldr	r1, [pc, #96]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4914      	ldr	r1, [pc, #80]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d021      	beq.n	8001950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	490e      	ldr	r1, [pc, #56]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e021      	b.n	800195e <HAL_GPIO_Init+0x2e2>
 800191a:	bf00      	nop
 800191c:	10320000 	.word	0x10320000
 8001920:	10310000 	.word	0x10310000
 8001924:	10220000 	.word	0x10220000
 8001928:	10210000 	.word	0x10210000
 800192c:	10120000 	.word	0x10120000
 8001930:	10110000 	.word	0x10110000
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	40010800 	.word	0x40010800
 8001940:	40010c00 	.word	0x40010c00
 8001944:	40011000 	.word	0x40011000
 8001948:	40011400 	.word	0x40011400
 800194c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_GPIO_Init+0x304>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	43db      	mvns	r3, r3
 8001958:	4909      	ldr	r1, [pc, #36]	@ (8001980 <HAL_GPIO_Init+0x304>)
 800195a:	4013      	ands	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae8e 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	372c      	adds	r7, #44	@ 0x2c
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e12b      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fd4a 	bl	8000474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	@ 0x24
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a18:	f001 f960 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a81      	ldr	r2, [pc, #516]	@ (8001c28 <HAL_I2C_Init+0x274>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d807      	bhi.n	8001a38 <HAL_I2C_Init+0x84>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a80      	ldr	r2, [pc, #512]	@ (8001c2c <HAL_I2C_Init+0x278>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf94      	ite	ls
 8001a30:	2301      	movls	r3, #1
 8001a32:	2300      	movhi	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e006      	b.n	8001a46 <HAL_I2C_Init+0x92>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c30 <HAL_I2C_Init+0x27c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0e7      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4a78      	ldr	r2, [pc, #480]	@ (8001c34 <HAL_I2C_Init+0x280>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c28 <HAL_I2C_Init+0x274>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d802      	bhi.n	8001a88 <HAL_I2C_Init+0xd4>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3301      	adds	r3, #1
 8001a86:	e009      	b.n	8001a9c <HAL_I2C_Init+0xe8>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a69      	ldr	r2, [pc, #420]	@ (8001c38 <HAL_I2C_Init+0x284>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	495c      	ldr	r1, [pc, #368]	@ (8001c28 <HAL_I2C_Init+0x274>)
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	d819      	bhi.n	8001af0 <HAL_I2C_Init+0x13c>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e59      	subs	r1, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_I2C_Init+0x138>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e59      	subs	r1, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	e051      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e04f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <HAL_I2C_Init+0x168>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e012      	b.n	8001b42 <HAL_I2C_Init+0x18e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	0099      	lsls	r1, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Init+0x196>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e022      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10e      	bne.n	8001b70 <HAL_I2C_Init+0x1bc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e58      	subs	r0, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b6e:	e00f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	6809      	ldr	r1, [r1, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6911      	ldr	r1, [r2, #16]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68d2      	ldr	r2, [r2, #12]
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	000186a0 	.word	0x000186a0
 8001c2c:	001e847f 	.word	0x001e847f
 8001c30:	003d08ff 	.word	0x003d08ff
 8001c34:	431bde83 	.word	0x431bde83
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7fe ffbc 	bl	8000bcc <HAL_GetTick>
 8001c54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	f040 80e0 	bne.w	8001e24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2319      	movs	r3, #25
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4970      	ldr	r1, [pc, #448]	@ (8001e30 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fa92 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e0d3      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_I2C_Master_Transmit+0x50>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e0cc      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d007      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2221      	movs	r2, #33	@ 0x21
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	893a      	ldrh	r2, [r7, #8]
 8001ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a50      	ldr	r2, [pc, #320]	@ (8001e34 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f9ca 	bl	8002094 <I2C_MasterRequestWrite>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e08d      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d20:	e066      	b.n	8001df0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fb50 	bl	80023cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d107      	bne.n	8001d4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06b      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x188>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d017      	beq.n	8001dc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	6a39      	ldr	r1, [r7, #32]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fb47 	bl	800245c <I2C_WaitOnBTFFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d107      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e01a      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d194      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	00100002 	.word	0x00100002
 8001e34:	ffff0000 	.word	0xffff0000

08001e38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7fe fec0 	bl	8000bcc <HAL_GetTick>
 8001e4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	f040 8111 	bne.w	8002082 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2319      	movs	r3, #25
 8001e66:	2201      	movs	r2, #1
 8001e68:	4988      	ldr	r1, [pc, #544]	@ (800208c <HAL_I2C_IsDeviceReady+0x254>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f994 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
 8001e78:	e104      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_I2C_IsDeviceReady+0x50>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e0fd      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d007      	beq.n	8001eae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2224      	movs	r2, #36	@ 0x24
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a70      	ldr	r2, [pc, #448]	@ (8002090 <HAL_I2C_IsDeviceReady+0x258>)
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f952 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00d      	beq.n	8001f16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f08:	d103      	bne.n	8001f12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0b6      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f16:	897b      	ldrh	r3, [r7, #10]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f26:	f7fe fe51 	bl	8000bcc <HAL_GetTick>
 8001f2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f5a:	e025      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f5c:	f7fe fe36 	bl	8000bcc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d302      	bcc.n	8001f72 <HAL_I2C_IsDeviceReady+0x13a>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22a0      	movs	r2, #160	@ 0xa0
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_I2C_IsDeviceReady+0x188>
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <HAL_I2C_IsDeviceReady+0x188>
 8001fba:	7dbb      	ldrb	r3, [r7, #22]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0cd      	beq.n	8001f5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d129      	bne.n	800202a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2319      	movs	r3, #25
 8002002:	2201      	movs	r2, #1
 8002004:	4921      	ldr	r1, [pc, #132]	@ (800208c <HAL_I2C_IsDeviceReady+0x254>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f8c6 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e036      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e02c      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002038:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002042:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2319      	movs	r3, #25
 800204a:	2201      	movs	r2, #1
 800204c:	490f      	ldr	r1, [pc, #60]	@ (800208c <HAL_I2C_IsDeviceReady+0x254>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f8a2 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e012      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3301      	adds	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	f4ff af32 	bcc.w	8001ed2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	00100002 	.word	0x00100002
 8002090:	ffff0000 	.word	0xffff0000

08002094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d006      	beq.n	80020be <I2C_MasterRequestWrite+0x2a>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d003      	beq.n	80020be <I2C_MasterRequestWrite+0x2a>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020bc:	d108      	bne.n	80020d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e00b      	b.n	80020e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d107      	bne.n	80020e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f84f 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210e:	d103      	bne.n	8002118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e035      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002124:	d108      	bne.n	8002138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e01b      	b.n	8002170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	11db      	asrs	r3, r3, #7
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0306 	and.w	r3, r3, #6
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f063 030f 	orn	r3, r3, #15
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	490e      	ldr	r1, [pc, #56]	@ (8002190 <I2C_MasterRequestWrite+0xfc>)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f898 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e010      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4907      	ldr	r1, [pc, #28]	@ (8002194 <I2C_MasterRequestWrite+0x100>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f888 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	00010008 	.word	0x00010008
 8002194:	00010002 	.word	0x00010002

08002198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	e048      	b.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d044      	beq.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7fe fd0b 	bl	8000bcc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d139      	bne.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0c1b      	lsrs	r3, r3, #16
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10d      	bne.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e00c      	b.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	429a      	cmp	r2, r3
 800220c:	d116      	bne.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e023      	b.n	8002284 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10d      	bne.n	8002262 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	e00c      	b.n	800227c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	43da      	mvns	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d093      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229a:	e071      	b.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022aa:	d123      	bne.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e067      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d041      	beq.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7fe fc66 	bl	8000bcc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d136      	bne.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10c      	bne.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e00b      	b.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	43da      	mvns	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4013      	ands	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e021      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10c      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	43da      	mvns	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e00b      	b.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af6d 	bne.w	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d8:	e034      	b.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f886 	bl	80024ec <I2C_IsAcknowledgeFailed>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e034      	b.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d028      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe fbeb 	bl	8000bcc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11d      	bne.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002412:	2b80      	cmp	r3, #128	@ 0x80
 8002414:	d016      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	2b80      	cmp	r3, #128	@ 0x80
 8002450:	d1c3      	bne.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002468:	e034      	b.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f83e 	bl	80024ec <I2C_IsAcknowledgeFailed>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e034      	b.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d028      	beq.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002482:	f7fe fba3 	bl	8000bcc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11d      	bne.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d016      	beq.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e007      	b.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d1c3      	bne.n	800246a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002502:	d11b      	bne.n	800253c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800250c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f043 0204 	orr.w	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e272      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002568:	4b92      	ldr	r3, [pc, #584]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b04      	cmp	r3, #4
 8002572:	d00c      	beq.n	800258e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002574:	4b8f      	ldr	r3, [pc, #572]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d112      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
 8002580:	4b8c      	ldr	r3, [pc, #560]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b89      	ldr	r3, [pc, #548]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06c      	beq.n	8002674 <HAL_RCC_OscConfig+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d168      	bne.n	8002674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e24c      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x76>
 80025b0:	4b80      	ldr	r3, [pc, #512]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7f      	ldr	r2, [pc, #508]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e02e      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b7b      	ldr	r3, [pc, #492]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7a      	ldr	r2, [pc, #488]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b78      	ldr	r3, [pc, #480]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a77      	ldr	r2, [pc, #476]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xbc>
 80025ea:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a71      	ldr	r2, [pc, #452]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b6f      	ldr	r3, [pc, #444]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6e      	ldr	r2, [pc, #440]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 8002604:	4b6b      	ldr	r3, [pc, #428]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6a      	ldr	r2, [pc, #424]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b68      	ldr	r3, [pc, #416]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a67      	ldr	r2, [pc, #412]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fad2 	bl	8000bcc <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe face 	bl	8000bcc <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	@ 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e200      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b5d      	ldr	r3, [pc, #372]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xe4>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fabe 	bl	8000bcc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe faba 	bl	8000bcc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	@ 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1ec      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x10c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d063      	beq.n	800274a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002682:	4b4c      	ldr	r3, [pc, #304]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268e:	4b49      	ldr	r3, [pc, #292]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d11c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x18c>
 800269a:	4b46      	ldr	r3, [pc, #280]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d116      	bne.n	80026d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	4b43      	ldr	r3, [pc, #268]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCC_OscConfig+0x176>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e1c0      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4939      	ldr	r1, [pc, #228]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	e03a      	b.n	800274a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026dc:	4b36      	ldr	r3, [pc, #216]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fa73 	bl	8000bcc <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7fe fa6f 	bl	8000bcc <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1a1      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4927      	ldr	r1, [pc, #156]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
 800271c:	e015      	b.n	800274a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fa52 	bl	8000bcc <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272c:	f7fe fa4e 	bl	8000bcc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e180      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03a      	beq.n	80027cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d019      	beq.n	8002792 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275e:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <HAL_RCC_OscConfig+0x274>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fa32 	bl	8000bcc <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7fe fa2e 	bl	8000bcc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e160      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800278a:	2001      	movs	r0, #1
 800278c:	f000 face 	bl	8002d2c <RCC_Delay>
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002792:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <HAL_RCC_OscConfig+0x274>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe fa18 	bl	8000bcc <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279e:	e00f      	b.n	80027c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe fa14 	bl	8000bcc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d908      	bls.n	80027c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e146      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	42420000 	.word	0x42420000
 80027bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	4b92      	ldr	r3, [pc, #584]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e9      	bne.n	80027a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a6 	beq.w	8002926 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b8b      	ldr	r3, [pc, #556]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b88      	ldr	r3, [pc, #544]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a87      	ldr	r2, [pc, #540]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b85      	ldr	r3, [pc, #532]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b82      	ldr	r3, [pc, #520]	@ (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b7f      	ldr	r3, [pc, #508]	@ (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	@ (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe f9d5 	bl	8000bcc <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7fe f9d1 	bl	8000bcc <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b64      	cmp	r3, #100	@ 0x64
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e103      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b75      	ldr	r3, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x312>
 800284c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e02d      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x334>
 8002862:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a69      	ldr	r2, [pc, #420]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a66      	ldr	r2, [pc, #408]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	e01c      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x356>
 8002884:	4b61      	ldr	r3, [pc, #388]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a60      	ldr	r2, [pc, #384]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	4b5e      	ldr	r3, [pc, #376]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a5d      	ldr	r2, [pc, #372]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e00b      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800289e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a5a      	ldr	r2, [pc, #360]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b58      	ldr	r3, [pc, #352]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a57      	ldr	r2, [pc, #348]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe f985 	bl	8000bcc <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe f981 	bl	8000bcc <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0b1      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCC_OscConfig+0x37e>
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe f96f 	bl	8000bcc <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe f96b 	bl	8000bcc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e09b      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002924:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d061      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d146      	bne.n	80029d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe f93f 	bl	8000bcc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe f93b 	bl	8000bcc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e06d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002978:	d108      	bne.n	800298c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297a:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4921      	ldr	r1, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a19      	ldr	r1, [r3, #32]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	430b      	orrs	r3, r1
 800299e:	491b      	ldr	r1, [pc, #108]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe f90f 	bl	8000bcc <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe f90b 	bl	8000bcc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e03d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46a>
 80029d0:	e035      	b.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f8f8 	bl	8000bcc <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe f8f4 	bl	8000bcc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e026      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x498>
 80029fe:	e01e      	b.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e019      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_OscConfig+0x500>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d0      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b6a      	ldr	r3, [pc, #424]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b67      	ldr	r3, [pc, #412]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4965      	ldr	r1, [pc, #404]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a58      	ldr	r2, [pc, #352]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ab2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002aca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d040      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d115      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e073      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06b      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4936      	ldr	r1, [pc, #216]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe f846 	bl	8000bcc <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe f842 	bl	8000bcc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e053      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b27      	ldr	r3, [pc, #156]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d210      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4922      	ldr	r1, [pc, #136]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1d0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd ffa4 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	080044f4 	.word	0x080044f4
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x30>
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4e:	e027      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c52:	613b      	str	r3, [r7, #16]
      break;
 8002c54:	e027      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0c9b      	lsrs	r3, r3, #18
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4a17      	ldr	r2, [pc, #92]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0c5b      	lsrs	r3, r3, #17
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e004      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca2:	613b      	str	r3, [r7, #16]
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	693b      	ldr	r3, [r7, #16]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	007a1200 	.word	0x007a1200
 8002cbc:	0800450c 	.word	0x0800450c
 8002cc0:	0800451c 	.word	0x0800451c
 8002cc4:	003d0900 	.word	0x003d0900

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	@ (8002cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff2 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	@ (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08004504 	.word	0x08004504

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0adb      	lsrs	r3, r3, #11
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004504 	.word	0x08004504

08002d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d34:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <RCC_Delay+0x34>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <RCC_Delay+0x38>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d48:	bf00      	nop
  }
  while (Delay --);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f9      	bne.n	8002d48 <RCC_Delay+0x1c>
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000000 	.word	0x20000000
 8002d64:	10624dd3 	.word	0x10624dd3

08002d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d07d      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d88:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	61d3      	str	r3, [r2, #28]
 8002da0:	4b49      	ldr	r3, [pc, #292]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dac:	2301      	movs	r3, #1
 8002dae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b46      	ldr	r3, [pc, #280]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d118      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbc:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a42      	ldr	r2, [pc, #264]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc8:	f7fd ff00 	bl	8000bcc <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	e008      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fd fefc 	bl	8000bcc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	@ 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e06d      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dee:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d027      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e22:	4a29      	ldr	r2, [pc, #164]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d014      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fecb 	bl	8000bcc <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fec7 	bl	8000bcc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e036      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ee      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4917      	ldr	r1, [pc, #92]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	490b      	ldr	r1, [pc, #44]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4904      	ldr	r1, [pc, #16]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42420440 	.word	0x42420440

08002ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e042      	b.n	8002f6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fc2c 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	@ 0x24
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fd71 	bl	8003a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d16d      	bne.n	8003070 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Transmit+0x2c>
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e066      	b.n	8003072 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2221      	movs	r2, #33	@ 0x21
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fe0b 	bl	8000bcc <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_UART_Transmit+0x6c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fe8:	e02a      	b.n	8003040 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	@ 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 faf9 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e036      	b.n	8003072 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	3302      	adds	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e007      	b.n	8003032 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1cf      	bne.n	8002fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2140      	movs	r1, #64	@ 0x40
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fac9 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e006      	b.n	8003072 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b0ba      	sub	sp, #232	@ 0xe8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_UART_IRQHandler+0x66>
 80030ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fbd1 	bl	8003882 <UART_Receive_IT>
      return;
 80030e0:	e25b      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80de 	beq.w	80032a8 <HAL_UART_IRQHandler+0x22c>
 80030ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80d1 	beq.w	80032a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_UART_IRQHandler+0xae>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_UART_IRQHandler+0xd2>
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_UART_IRQHandler+0xf6>
 800315a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_UART_IRQHandler+0x126>
 800317e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800318a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f043 0208 	orr.w	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 81f2 	beq.w	8003590 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_UART_IRQHandler+0x14e>
 80031b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fb5c 	bl	8003882 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_UART_IRQHandler+0x17a>
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04f      	beq.n	8003296 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa66 	bl	80036c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d041      	beq.n	800328e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3314      	adds	r3, #20
 8003210:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003236:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800323a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800324e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1d9      	bne.n	800320a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	4a7e      	ldr	r2, [pc, #504]	@ (800345c <HAL_UART_IRQHandler+0x3e0>)
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe f888 	bl	8001380 <HAL_DMA_Abort_IT>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003280:	4610      	mov	r0, r2
 8003282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00e      	b.n	80032a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f99c 	bl	80035c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e00a      	b.n	80032a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f998 	bl	80035c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e006      	b.n	80032a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f994 	bl	80035c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032a2:	e175      	b.n	8003590 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	bf00      	nop
    return;
 80032a6:	e173      	b.n	8003590 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 814f 	bne.w	8003550 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8148 	beq.w	8003550 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8141 	beq.w	8003550 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80b6 	beq.w	8003460 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8145 	beq.w	8003594 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800330e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003312:	429a      	cmp	r2, r3
 8003314:	f080 813e 	bcs.w	8003594 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800331e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b20      	cmp	r3, #32
 8003328:	f000 8088 	beq.w	800343c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003346:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800334a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003358:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800335c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003364:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1d9      	bne.n	800332c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3314      	adds	r3, #20
 800337e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800339c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e1      	bne.n	8003378 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e3      	bne.n	80033b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800340a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800340c:	f023 0310 	bic.w	r3, r3, #16
 8003410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800341e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003420:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800342c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e3      	bne.n	80033fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd ff66 	bl	8001308 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800344a:	b29b      	uxth	r3, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8bf 	bl	80035d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003458:	e09c      	b.n	8003594 <HAL_UART_IRQHandler+0x518>
 800345a:	bf00      	nop
 800345c:	0800378d 	.word	0x0800378d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 808e 	beq.w	8003598 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800347c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8089 	beq.w	8003598 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80034ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e3      	bne.n	8003486 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	623b      	str	r3, [r7, #32]
   return(result);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e3      	bne.n	80034be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	60fb      	str	r3, [r7, #12]
   return(result);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0310 	bic.w	r3, r3, #16
 800351a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003528:	61fa      	str	r2, [r7, #28]
 800352a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	617b      	str	r3, [r7, #20]
   return(result);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e3      	bne.n	8003504 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f844 	bl	80035d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800354e:	e023      	b.n	8003598 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_UART_IRQHandler+0x4f4>
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f923 	bl	80037b4 <UART_Transmit_IT>
    return;
 800356e:	e014      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <HAL_UART_IRQHandler+0x51e>
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f962 	bl	8003852 <UART_EndTransmit_IT>
    return;
 800358e:	e004      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
    return;
 8003590:	bf00      	nop
 8003592:	e002      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
      return;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
      return;
 8003598:	bf00      	nop
  }
}
 800359a:	37e8      	adds	r7, #232	@ 0xe8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b090      	sub	sp, #64	@ 0x40
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fc:	e050      	b.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d04c      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <UART_WaitOnFlagUntilTimeout+0x30>
 800360c:	f7fd fade 	bl	8000bcc <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003618:	429a      	cmp	r2, r3
 800361a:	d241      	bcs.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800363c:	637a      	str	r2, [r7, #52]	@ 0x34
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	613b      	str	r3, [r7, #16]
   return(result);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003670:	623a      	str	r2, [r7, #32]
 8003672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69f9      	ldr	r1, [r7, #28]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	61bb      	str	r3, [r7, #24]
   return(result);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e00f      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d09f      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3740      	adds	r7, #64	@ 0x40
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b095      	sub	sp, #84	@ 0x54
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80036f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	61fb      	str	r3, [r7, #28]
   return(result);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	2b01      	cmp	r3, #1
 800373e:	d119      	bne.n	8003774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 0310 	bic.w	r3, r3, #16
 8003756:	647b      	str	r3, [r7, #68]	@ 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003760:	61ba      	str	r2, [r7, #24]
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	613b      	str	r3, [r7, #16]
   return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003782:	bf00      	nop
 8003784:	3754      	adds	r7, #84	@ 0x54
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff ff0c 	bl	80035c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b21      	cmp	r3, #33	@ 0x21
 80037c6:	d13e      	bne.n	8003846 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d0:	d114      	bne.n	80037fc <UART_Transmit_IT+0x48>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d110      	bne.n	80037fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	1c9a      	adds	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]
 80037fa:	e008      	b.n	800380e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	1c59      	adds	r1, r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6211      	str	r1, [r2, #32]
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29b      	uxth	r3, r3
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4619      	mov	r1, r3
 800381c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003830:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003840:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003868:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fe94 	bl	80035a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08c      	sub	sp, #48	@ 0x30
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b22      	cmp	r3, #34	@ 0x22
 8003894:	f040 80ae 	bne.w	80039f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d117      	bne.n	80038d2 <UART_Receive_IT+0x50>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	1c9a      	adds	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d0:	e026      	b.n	8003920 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e4:	d007      	beq.n	80038f6 <UART_Receive_IT+0x74>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <UART_Receive_IT+0x82>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e008      	b.n	8003916 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4619      	mov	r1, r3
 800392e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003930:	2b00      	cmp	r3, #0
 8003932:	d15d      	bne.n	80039f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0220 	bic.w	r2, r2, #32
 8003942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	2b01      	cmp	r3, #1
 8003978:	d135      	bne.n	80039e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	613b      	str	r3, [r7, #16]
   return(result);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 0310 	bic.w	r3, r3, #16
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	623a      	str	r2, [r7, #32]
 80039a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	69f9      	ldr	r1, [r7, #28]
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e5      	bne.n	8003980 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d10a      	bne.n	80039d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fdf9 	bl	80035d6 <HAL_UARTEx_RxEventCallback>
 80039e4:	e002      	b.n	80039ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fde3 	bl	80035b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e002      	b.n	80039f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3730      	adds	r7, #48	@ 0x30
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a3a:	f023 030c 	bic.w	r3, r3, #12
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2c      	ldr	r2, [pc, #176]	@ (8003b14 <UART_SetConfig+0x114>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a68:	f7ff f94c 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	e002      	b.n	8003a76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a70:	f7ff f934 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8003a74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009a      	lsls	r2, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	4a22      	ldr	r2, [pc, #136]	@ (8003b18 <UART_SetConfig+0x118>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	0119      	lsls	r1, r3, #4
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009a      	lsls	r2, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <UART_SetConfig+0x118>)
 8003aae:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2064      	movs	r0, #100	@ 0x64
 8003ab6:	fb00 f303 	mul.w	r3, r0, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	3332      	adds	r3, #50	@ 0x32
 8003ac0:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <UART_SetConfig+0x118>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003acc:	4419      	add	r1, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <UART_SetConfig+0x118>)
 8003ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2064      	movs	r0, #100	@ 0x64
 8003aee:	fb00 f303 	mul.w	r3, r0, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	@ 0x32
 8003af8:	4a07      	ldr	r2, [pc, #28]	@ (8003b18 <UART_SetConfig+0x118>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 020f 	and.w	r2, r3, #15
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	440a      	add	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40013800 	.word	0x40013800
 8003b18:	51eb851f 	.word	0x51eb851f

08003b1c <siprintf>:
 8003b1c:	b40e      	push	{r1, r2, r3}
 8003b1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b22:	b500      	push	{lr}
 8003b24:	b09c      	sub	sp, #112	@ 0x70
 8003b26:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b28:	9002      	str	r0, [sp, #8]
 8003b2a:	9006      	str	r0, [sp, #24]
 8003b2c:	9107      	str	r1, [sp, #28]
 8003b2e:	9104      	str	r1, [sp, #16]
 8003b30:	4808      	ldr	r0, [pc, #32]	@ (8003b54 <siprintf+0x38>)
 8003b32:	4909      	ldr	r1, [pc, #36]	@ (8003b58 <siprintf+0x3c>)
 8003b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b38:	9105      	str	r1, [sp, #20]
 8003b3a:	6800      	ldr	r0, [r0, #0]
 8003b3c:	a902      	add	r1, sp, #8
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	f000 f98c 	bl	8003e5c <_svfiprintf_r>
 8003b44:	2200      	movs	r2, #0
 8003b46:	9b02      	ldr	r3, [sp, #8]
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	b01c      	add	sp, #112	@ 0x70
 8003b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b50:	b003      	add	sp, #12
 8003b52:	4770      	bx	lr
 8003b54:	2000000c 	.word	0x2000000c
 8003b58:	ffff0208 	.word	0xffff0208

08003b5c <memset>:
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4402      	add	r2, r0
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d100      	bne.n	8003b66 <memset+0xa>
 8003b64:	4770      	bx	lr
 8003b66:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6a:	e7f9      	b.n	8003b60 <memset+0x4>

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	2600      	movs	r6, #0
 8003b70:	4d0c      	ldr	r5, [pc, #48]	@ (8003ba4 <__libc_init_array+0x38>)
 8003b72:	4c0d      	ldr	r4, [pc, #52]	@ (8003ba8 <__libc_init_array+0x3c>)
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	f000 fc86 	bl	800448c <_init>
 8003b80:	2600      	movs	r6, #0
 8003b82:	4d0a      	ldr	r5, [pc, #40]	@ (8003bac <__libc_init_array+0x40>)
 8003b84:	4c0a      	ldr	r4, [pc, #40]	@ (8003bb0 <__libc_init_array+0x44>)
 8003b86:	1b64      	subs	r4, r4, r5
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08004554 	.word	0x08004554
 8003ba8:	08004554 	.word	0x08004554
 8003bac:	08004554 	.word	0x08004554
 8003bb0:	08004558 	.word	0x08004558

08003bb4 <__retarget_lock_acquire_recursive>:
 8003bb4:	4770      	bx	lr

08003bb6 <__retarget_lock_release_recursive>:
 8003bb6:	4770      	bx	lr

08003bb8 <_free_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4605      	mov	r5, r0
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d040      	beq.n	8003c42 <_free_r+0x8a>
 8003bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc4:	1f0c      	subs	r4, r1, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfb8      	it	lt
 8003bca:	18e4      	addlt	r4, r4, r3
 8003bcc:	f000 f8de 	bl	8003d8c <__malloc_lock>
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c44 <_free_r+0x8c>)
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	b933      	cbnz	r3, 8003be4 <_free_r+0x2c>
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6014      	str	r4, [r2, #0]
 8003bda:	4628      	mov	r0, r5
 8003bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003be0:	f000 b8da 	b.w	8003d98 <__malloc_unlock>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d908      	bls.n	8003bfa <_free_r+0x42>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	1821      	adds	r1, r4, r0
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf01      	itttt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	1809      	addeq	r1, r1, r0
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	e7ed      	b.n	8003bd6 <_free_r+0x1e>
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b10b      	cbz	r3, 8003c04 <_free_r+0x4c>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d9fa      	bls.n	8003bfa <_free_r+0x42>
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	1850      	adds	r0, r2, r1
 8003c08:	42a0      	cmp	r0, r4
 8003c0a:	d10b      	bne.n	8003c24 <_free_r+0x6c>
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	4401      	add	r1, r0
 8003c10:	1850      	adds	r0, r2, r1
 8003c12:	4283      	cmp	r3, r0
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	d1e0      	bne.n	8003bda <_free_r+0x22>
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4408      	add	r0, r1
 8003c1e:	6010      	str	r0, [r2, #0]
 8003c20:	6053      	str	r3, [r2, #4]
 8003c22:	e7da      	b.n	8003bda <_free_r+0x22>
 8003c24:	d902      	bls.n	8003c2c <_free_r+0x74>
 8003c26:	230c      	movs	r3, #12
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	e7d6      	b.n	8003bda <_free_r+0x22>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	1821      	adds	r1, r4, r0
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf01      	itttt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	1809      	addeq	r1, r1, r0
 8003c3a:	6021      	streq	r1, [r4, #0]
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	6054      	str	r4, [r2, #4]
 8003c40:	e7cb      	b.n	8003bda <_free_r+0x22>
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000350 	.word	0x20000350

08003c48 <sbrk_aligned>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c88 <sbrk_aligned+0x40>)
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	6831      	ldr	r1, [r6, #0]
 8003c50:	4605      	mov	r5, r0
 8003c52:	b911      	cbnz	r1, 8003c5a <sbrk_aligned+0x12>
 8003c54:	f000 fbaa 	bl	80043ac <_sbrk_r>
 8003c58:	6030      	str	r0, [r6, #0]
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 fba5 	bl	80043ac <_sbrk_r>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d103      	bne.n	8003c6e <sbrk_aligned+0x26>
 8003c66:	f04f 34ff 	mov.w	r4, #4294967295
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	bd70      	pop	{r4, r5, r6, pc}
 8003c6e:	1cc4      	adds	r4, r0, #3
 8003c70:	f024 0403 	bic.w	r4, r4, #3
 8003c74:	42a0      	cmp	r0, r4
 8003c76:	d0f8      	beq.n	8003c6a <sbrk_aligned+0x22>
 8003c78:	1a21      	subs	r1, r4, r0
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 fb96 	bl	80043ac <_sbrk_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d1f2      	bne.n	8003c6a <sbrk_aligned+0x22>
 8003c84:	e7ef      	b.n	8003c66 <sbrk_aligned+0x1e>
 8003c86:	bf00      	nop
 8003c88:	2000034c 	.word	0x2000034c

08003c8c <_malloc_r>:
 8003c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c90:	1ccd      	adds	r5, r1, #3
 8003c92:	f025 0503 	bic.w	r5, r5, #3
 8003c96:	3508      	adds	r5, #8
 8003c98:	2d0c      	cmp	r5, #12
 8003c9a:	bf38      	it	cc
 8003c9c:	250c      	movcc	r5, #12
 8003c9e:	2d00      	cmp	r5, #0
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	db01      	blt.n	8003ca8 <_malloc_r+0x1c>
 8003ca4:	42a9      	cmp	r1, r5
 8003ca6:	d904      	bls.n	8003cb2 <_malloc_r+0x26>
 8003ca8:	230c      	movs	r3, #12
 8003caa:	6033      	str	r3, [r6, #0]
 8003cac:	2000      	movs	r0, #0
 8003cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d88 <_malloc_r+0xfc>
 8003cb6:	f000 f869 	bl	8003d8c <__malloc_lock>
 8003cba:	f8d8 3000 	ldr.w	r3, [r8]
 8003cbe:	461c      	mov	r4, r3
 8003cc0:	bb44      	cbnz	r4, 8003d14 <_malloc_r+0x88>
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f7ff ffbf 	bl	8003c48 <sbrk_aligned>
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	4604      	mov	r4, r0
 8003cce:	d158      	bne.n	8003d82 <_malloc_r+0xf6>
 8003cd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003cd4:	4627      	mov	r7, r4
 8003cd6:	2f00      	cmp	r7, #0
 8003cd8:	d143      	bne.n	8003d62 <_malloc_r+0xd6>
 8003cda:	2c00      	cmp	r4, #0
 8003cdc:	d04b      	beq.n	8003d76 <_malloc_r+0xea>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	eb04 0903 	add.w	r9, r4, r3
 8003ce8:	f000 fb60 	bl	80043ac <_sbrk_r>
 8003cec:	4581      	cmp	r9, r0
 8003cee:	d142      	bne.n	8003d76 <_malloc_r+0xea>
 8003cf0:	6821      	ldr	r1, [r4, #0]
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	1a6d      	subs	r5, r5, r1
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	f7ff ffa6 	bl	8003c48 <sbrk_aligned>
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d03a      	beq.n	8003d76 <_malloc_r+0xea>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	442b      	add	r3, r5
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	f8d8 3000 	ldr.w	r3, [r8]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	bb62      	cbnz	r2, 8003d68 <_malloc_r+0xdc>
 8003d0e:	f8c8 7000 	str.w	r7, [r8]
 8003d12:	e00f      	b.n	8003d34 <_malloc_r+0xa8>
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	1b52      	subs	r2, r2, r5
 8003d18:	d420      	bmi.n	8003d5c <_malloc_r+0xd0>
 8003d1a:	2a0b      	cmp	r2, #11
 8003d1c:	d917      	bls.n	8003d4e <_malloc_r+0xc2>
 8003d1e:	1961      	adds	r1, r4, r5
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	6025      	str	r5, [r4, #0]
 8003d24:	bf18      	it	ne
 8003d26:	6059      	strne	r1, [r3, #4]
 8003d28:	6863      	ldr	r3, [r4, #4]
 8003d2a:	bf08      	it	eq
 8003d2c:	f8c8 1000 	streq.w	r1, [r8]
 8003d30:	5162      	str	r2, [r4, r5]
 8003d32:	604b      	str	r3, [r1, #4]
 8003d34:	4630      	mov	r0, r6
 8003d36:	f000 f82f 	bl	8003d98 <__malloc_unlock>
 8003d3a:	f104 000b 	add.w	r0, r4, #11
 8003d3e:	1d23      	adds	r3, r4, #4
 8003d40:	f020 0007 	bic.w	r0, r0, #7
 8003d44:	1ac2      	subs	r2, r0, r3
 8003d46:	bf1c      	itt	ne
 8003d48:	1a1b      	subne	r3, r3, r0
 8003d4a:	50a3      	strne	r3, [r4, r2]
 8003d4c:	e7af      	b.n	8003cae <_malloc_r+0x22>
 8003d4e:	6862      	ldr	r2, [r4, #4]
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	bf0c      	ite	eq
 8003d54:	f8c8 2000 	streq.w	r2, [r8]
 8003d58:	605a      	strne	r2, [r3, #4]
 8003d5a:	e7eb      	b.n	8003d34 <_malloc_r+0xa8>
 8003d5c:	4623      	mov	r3, r4
 8003d5e:	6864      	ldr	r4, [r4, #4]
 8003d60:	e7ae      	b.n	8003cc0 <_malloc_r+0x34>
 8003d62:	463c      	mov	r4, r7
 8003d64:	687f      	ldr	r7, [r7, #4]
 8003d66:	e7b6      	b.n	8003cd6 <_malloc_r+0x4a>
 8003d68:	461a      	mov	r2, r3
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	d1fb      	bne.n	8003d68 <_malloc_r+0xdc>
 8003d70:	2300      	movs	r3, #0
 8003d72:	6053      	str	r3, [r2, #4]
 8003d74:	e7de      	b.n	8003d34 <_malloc_r+0xa8>
 8003d76:	230c      	movs	r3, #12
 8003d78:	4630      	mov	r0, r6
 8003d7a:	6033      	str	r3, [r6, #0]
 8003d7c:	f000 f80c 	bl	8003d98 <__malloc_unlock>
 8003d80:	e794      	b.n	8003cac <_malloc_r+0x20>
 8003d82:	6005      	str	r5, [r0, #0]
 8003d84:	e7d6      	b.n	8003d34 <_malloc_r+0xa8>
 8003d86:	bf00      	nop
 8003d88:	20000350 	.word	0x20000350

08003d8c <__malloc_lock>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	@ (8003d94 <__malloc_lock+0x8>)
 8003d8e:	f7ff bf11 	b.w	8003bb4 <__retarget_lock_acquire_recursive>
 8003d92:	bf00      	nop
 8003d94:	20000348 	.word	0x20000348

08003d98 <__malloc_unlock>:
 8003d98:	4801      	ldr	r0, [pc, #4]	@ (8003da0 <__malloc_unlock+0x8>)
 8003d9a:	f7ff bf0c 	b.w	8003bb6 <__retarget_lock_release_recursive>
 8003d9e:	bf00      	nop
 8003da0:	20000348 	.word	0x20000348

08003da4 <__ssputs_r>:
 8003da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da8:	461f      	mov	r7, r3
 8003daa:	688e      	ldr	r6, [r1, #8]
 8003dac:	4682      	mov	sl, r0
 8003dae:	42be      	cmp	r6, r7
 8003db0:	460c      	mov	r4, r1
 8003db2:	4690      	mov	r8, r2
 8003db4:	680b      	ldr	r3, [r1, #0]
 8003db6:	d82d      	bhi.n	8003e14 <__ssputs_r+0x70>
 8003db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003dbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003dc0:	d026      	beq.n	8003e10 <__ssputs_r+0x6c>
 8003dc2:	6965      	ldr	r5, [r4, #20]
 8003dc4:	6909      	ldr	r1, [r1, #16]
 8003dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dca:	eba3 0901 	sub.w	r9, r3, r1
 8003dce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dd2:	1c7b      	adds	r3, r7, #1
 8003dd4:	444b      	add	r3, r9
 8003dd6:	106d      	asrs	r5, r5, #1
 8003dd8:	429d      	cmp	r5, r3
 8003dda:	bf38      	it	cc
 8003ddc:	461d      	movcc	r5, r3
 8003dde:	0553      	lsls	r3, r2, #21
 8003de0:	d527      	bpl.n	8003e32 <__ssputs_r+0x8e>
 8003de2:	4629      	mov	r1, r5
 8003de4:	f7ff ff52 	bl	8003c8c <_malloc_r>
 8003de8:	4606      	mov	r6, r0
 8003dea:	b360      	cbz	r0, 8003e46 <__ssputs_r+0xa2>
 8003dec:	464a      	mov	r2, r9
 8003dee:	6921      	ldr	r1, [r4, #16]
 8003df0:	f000 fafa 	bl	80043e8 <memcpy>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	6126      	str	r6, [r4, #16]
 8003e02:	444e      	add	r6, r9
 8003e04:	6026      	str	r6, [r4, #0]
 8003e06:	463e      	mov	r6, r7
 8003e08:	6165      	str	r5, [r4, #20]
 8003e0a:	eba5 0509 	sub.w	r5, r5, r9
 8003e0e:	60a5      	str	r5, [r4, #8]
 8003e10:	42be      	cmp	r6, r7
 8003e12:	d900      	bls.n	8003e16 <__ssputs_r+0x72>
 8003e14:	463e      	mov	r6, r7
 8003e16:	4632      	mov	r2, r6
 8003e18:	4641      	mov	r1, r8
 8003e1a:	6820      	ldr	r0, [r4, #0]
 8003e1c:	f000 faac 	bl	8004378 <memmove>
 8003e20:	2000      	movs	r0, #0
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	1b9b      	subs	r3, r3, r6
 8003e26:	60a3      	str	r3, [r4, #8]
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	4433      	add	r3, r6
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e32:	462a      	mov	r2, r5
 8003e34:	f000 fae6 	bl	8004404 <_realloc_r>
 8003e38:	4606      	mov	r6, r0
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d1e0      	bne.n	8003e00 <__ssputs_r+0x5c>
 8003e3e:	4650      	mov	r0, sl
 8003e40:	6921      	ldr	r1, [r4, #16]
 8003e42:	f7ff feb9 	bl	8003bb8 <_free_r>
 8003e46:	230c      	movs	r3, #12
 8003e48:	f8ca 3000 	str.w	r3, [sl]
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	e7e9      	b.n	8003e2e <__ssputs_r+0x8a>
	...

08003e5c <_svfiprintf_r>:
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	4698      	mov	r8, r3
 8003e62:	898b      	ldrh	r3, [r1, #12]
 8003e64:	4607      	mov	r7, r0
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	460d      	mov	r5, r1
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	b09d      	sub	sp, #116	@ 0x74
 8003e6e:	d510      	bpl.n	8003e92 <_svfiprintf_r+0x36>
 8003e70:	690b      	ldr	r3, [r1, #16]
 8003e72:	b973      	cbnz	r3, 8003e92 <_svfiprintf_r+0x36>
 8003e74:	2140      	movs	r1, #64	@ 0x40
 8003e76:	f7ff ff09 	bl	8003c8c <_malloc_r>
 8003e7a:	6028      	str	r0, [r5, #0]
 8003e7c:	6128      	str	r0, [r5, #16]
 8003e7e:	b930      	cbnz	r0, 8003e8e <_svfiprintf_r+0x32>
 8003e80:	230c      	movs	r3, #12
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	b01d      	add	sp, #116	@ 0x74
 8003e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8e:	2340      	movs	r3, #64	@ 0x40
 8003e90:	616b      	str	r3, [r5, #20]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e96:	2320      	movs	r3, #32
 8003e98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e9c:	2330      	movs	r3, #48	@ 0x30
 8003e9e:	f04f 0901 	mov.w	r9, #1
 8003ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ea6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004040 <_svfiprintf_r+0x1e4>
 8003eaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003eae:	4623      	mov	r3, r4
 8003eb0:	469a      	mov	sl, r3
 8003eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eb6:	b10a      	cbz	r2, 8003ebc <_svfiprintf_r+0x60>
 8003eb8:	2a25      	cmp	r2, #37	@ 0x25
 8003eba:	d1f9      	bne.n	8003eb0 <_svfiprintf_r+0x54>
 8003ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ec0:	d00b      	beq.n	8003eda <_svfiprintf_r+0x7e>
 8003ec2:	465b      	mov	r3, fp
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f7ff ff6b 	bl	8003da4 <__ssputs_r>
 8003ece:	3001      	adds	r0, #1
 8003ed0:	f000 80a7 	beq.w	8004022 <_svfiprintf_r+0x1c6>
 8003ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ed6:	445a      	add	r2, fp
 8003ed8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eda:	f89a 3000 	ldrb.w	r3, [sl]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 809f 	beq.w	8004022 <_svfiprintf_r+0x1c6>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eee:	f10a 0a01 	add.w	sl, sl, #1
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	9307      	str	r3, [sp, #28]
 8003ef6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003efa:	931a      	str	r3, [sp, #104]	@ 0x68
 8003efc:	4654      	mov	r4, sl
 8003efe:	2205      	movs	r2, #5
 8003f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f04:	484e      	ldr	r0, [pc, #312]	@ (8004040 <_svfiprintf_r+0x1e4>)
 8003f06:	f000 fa61 	bl	80043cc <memchr>
 8003f0a:	9a04      	ldr	r2, [sp, #16]
 8003f0c:	b9d8      	cbnz	r0, 8003f46 <_svfiprintf_r+0xea>
 8003f0e:	06d0      	lsls	r0, r2, #27
 8003f10:	bf44      	itt	mi
 8003f12:	2320      	movmi	r3, #32
 8003f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f18:	0711      	lsls	r1, r2, #28
 8003f1a:	bf44      	itt	mi
 8003f1c:	232b      	movmi	r3, #43	@ 0x2b
 8003f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f22:	f89a 3000 	ldrb.w	r3, [sl]
 8003f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f28:	d015      	beq.n	8003f56 <_svfiprintf_r+0xfa>
 8003f2a:	4654      	mov	r4, sl
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f04f 0c0a 	mov.w	ip, #10
 8003f32:	9a07      	ldr	r2, [sp, #28]
 8003f34:	4621      	mov	r1, r4
 8003f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f3a:	3b30      	subs	r3, #48	@ 0x30
 8003f3c:	2b09      	cmp	r3, #9
 8003f3e:	d94b      	bls.n	8003fd8 <_svfiprintf_r+0x17c>
 8003f40:	b1b0      	cbz	r0, 8003f70 <_svfiprintf_r+0x114>
 8003f42:	9207      	str	r2, [sp, #28]
 8003f44:	e014      	b.n	8003f70 <_svfiprintf_r+0x114>
 8003f46:	eba0 0308 	sub.w	r3, r0, r8
 8003f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	46a2      	mov	sl, r4
 8003f52:	9304      	str	r3, [sp, #16]
 8003f54:	e7d2      	b.n	8003efc <_svfiprintf_r+0xa0>
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	1d19      	adds	r1, r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	9103      	str	r1, [sp, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bfbb      	ittet	lt
 8003f62:	425b      	neglt	r3, r3
 8003f64:	f042 0202 	orrlt.w	r2, r2, #2
 8003f68:	9307      	strge	r3, [sp, #28]
 8003f6a:	9307      	strlt	r3, [sp, #28]
 8003f6c:	bfb8      	it	lt
 8003f6e:	9204      	strlt	r2, [sp, #16]
 8003f70:	7823      	ldrb	r3, [r4, #0]
 8003f72:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f74:	d10a      	bne.n	8003f8c <_svfiprintf_r+0x130>
 8003f76:	7863      	ldrb	r3, [r4, #1]
 8003f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f7a:	d132      	bne.n	8003fe2 <_svfiprintf_r+0x186>
 8003f7c:	9b03      	ldr	r3, [sp, #12]
 8003f7e:	3402      	adds	r4, #2
 8003f80:	1d1a      	adds	r2, r3, #4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	9203      	str	r2, [sp, #12]
 8003f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f8a:	9305      	str	r3, [sp, #20]
 8003f8c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004044 <_svfiprintf_r+0x1e8>
 8003f90:	2203      	movs	r2, #3
 8003f92:	4650      	mov	r0, sl
 8003f94:	7821      	ldrb	r1, [r4, #0]
 8003f96:	f000 fa19 	bl	80043cc <memchr>
 8003f9a:	b138      	cbz	r0, 8003fac <_svfiprintf_r+0x150>
 8003f9c:	2240      	movs	r2, #64	@ 0x40
 8003f9e:	9b04      	ldr	r3, [sp, #16]
 8003fa0:	eba0 000a 	sub.w	r0, r0, sl
 8003fa4:	4082      	lsls	r2, r0
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	3401      	adds	r4, #1
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb0:	2206      	movs	r2, #6
 8003fb2:	4825      	ldr	r0, [pc, #148]	@ (8004048 <_svfiprintf_r+0x1ec>)
 8003fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fb8:	f000 fa08 	bl	80043cc <memchr>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d036      	beq.n	800402e <_svfiprintf_r+0x1d2>
 8003fc0:	4b22      	ldr	r3, [pc, #136]	@ (800404c <_svfiprintf_r+0x1f0>)
 8003fc2:	bb1b      	cbnz	r3, 800400c <_svfiprintf_r+0x1b0>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	f023 0307 	bic.w	r3, r3, #7
 8003fcc:	3308      	adds	r3, #8
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fd2:	4433      	add	r3, r6
 8003fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd6:	e76a      	b.n	8003eae <_svfiprintf_r+0x52>
 8003fd8:	460c      	mov	r4, r1
 8003fda:	2001      	movs	r0, #1
 8003fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fe0:	e7a8      	b.n	8003f34 <_svfiprintf_r+0xd8>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f04f 0c0a 	mov.w	ip, #10
 8003fe8:	4619      	mov	r1, r3
 8003fea:	3401      	adds	r4, #1
 8003fec:	9305      	str	r3, [sp, #20]
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ff4:	3a30      	subs	r2, #48	@ 0x30
 8003ff6:	2a09      	cmp	r2, #9
 8003ff8:	d903      	bls.n	8004002 <_svfiprintf_r+0x1a6>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0c6      	beq.n	8003f8c <_svfiprintf_r+0x130>
 8003ffe:	9105      	str	r1, [sp, #20]
 8004000:	e7c4      	b.n	8003f8c <_svfiprintf_r+0x130>
 8004002:	4604      	mov	r4, r0
 8004004:	2301      	movs	r3, #1
 8004006:	fb0c 2101 	mla	r1, ip, r1, r2
 800400a:	e7f0      	b.n	8003fee <_svfiprintf_r+0x192>
 800400c:	ab03      	add	r3, sp, #12
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	462a      	mov	r2, r5
 8004012:	4638      	mov	r0, r7
 8004014:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <_svfiprintf_r+0x1f4>)
 8004016:	a904      	add	r1, sp, #16
 8004018:	f3af 8000 	nop.w
 800401c:	1c42      	adds	r2, r0, #1
 800401e:	4606      	mov	r6, r0
 8004020:	d1d6      	bne.n	8003fd0 <_svfiprintf_r+0x174>
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	065b      	lsls	r3, r3, #25
 8004026:	f53f af2d 	bmi.w	8003e84 <_svfiprintf_r+0x28>
 800402a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800402c:	e72c      	b.n	8003e88 <_svfiprintf_r+0x2c>
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	462a      	mov	r2, r5
 8004034:	4638      	mov	r0, r7
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <_svfiprintf_r+0x1f4>)
 8004038:	a904      	add	r1, sp, #16
 800403a:	f000 f87d 	bl	8004138 <_printf_i>
 800403e:	e7ed      	b.n	800401c <_svfiprintf_r+0x1c0>
 8004040:	0800451e 	.word	0x0800451e
 8004044:	08004524 	.word	0x08004524
 8004048:	08004528 	.word	0x08004528
 800404c:	00000000 	.word	0x00000000
 8004050:	08003da5 	.word	0x08003da5

08004054 <_printf_common>:
 8004054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004058:	4616      	mov	r6, r2
 800405a:	4698      	mov	r8, r3
 800405c:	688a      	ldr	r2, [r1, #8]
 800405e:	690b      	ldr	r3, [r1, #16]
 8004060:	4607      	mov	r7, r0
 8004062:	4293      	cmp	r3, r2
 8004064:	bfb8      	it	lt
 8004066:	4613      	movlt	r3, r2
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800406e:	460c      	mov	r4, r1
 8004070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004074:	b10a      	cbz	r2, 800407a <_printf_common+0x26>
 8004076:	3301      	adds	r3, #1
 8004078:	6033      	str	r3, [r6, #0]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	0699      	lsls	r1, r3, #26
 800407e:	bf42      	ittt	mi
 8004080:	6833      	ldrmi	r3, [r6, #0]
 8004082:	3302      	addmi	r3, #2
 8004084:	6033      	strmi	r3, [r6, #0]
 8004086:	6825      	ldr	r5, [r4, #0]
 8004088:	f015 0506 	ands.w	r5, r5, #6
 800408c:	d106      	bne.n	800409c <_printf_common+0x48>
 800408e:	f104 0a19 	add.w	sl, r4, #25
 8004092:	68e3      	ldr	r3, [r4, #12]
 8004094:	6832      	ldr	r2, [r6, #0]
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	42ab      	cmp	r3, r5
 800409a:	dc2b      	bgt.n	80040f4 <_printf_common+0xa0>
 800409c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	3b00      	subs	r3, #0
 80040a4:	bf18      	it	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	0692      	lsls	r2, r2, #26
 80040aa:	d430      	bmi.n	800410e <_printf_common+0xba>
 80040ac:	4641      	mov	r1, r8
 80040ae:	4638      	mov	r0, r7
 80040b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040b4:	47c8      	blx	r9
 80040b6:	3001      	adds	r0, #1
 80040b8:	d023      	beq.n	8004102 <_printf_common+0xae>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	f003 0306 	and.w	r3, r3, #6
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	bf14      	ite	ne
 80040c6:	2500      	movne	r5, #0
 80040c8:	6833      	ldreq	r3, [r6, #0]
 80040ca:	f04f 0600 	mov.w	r6, #0
 80040ce:	bf08      	it	eq
 80040d0:	68e5      	ldreq	r5, [r4, #12]
 80040d2:	f104 041a 	add.w	r4, r4, #26
 80040d6:	bf08      	it	eq
 80040d8:	1aed      	subeq	r5, r5, r3
 80040da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040de:	bf08      	it	eq
 80040e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e4:	4293      	cmp	r3, r2
 80040e6:	bfc4      	itt	gt
 80040e8:	1a9b      	subgt	r3, r3, r2
 80040ea:	18ed      	addgt	r5, r5, r3
 80040ec:	42b5      	cmp	r5, r6
 80040ee:	d11a      	bne.n	8004126 <_printf_common+0xd2>
 80040f0:	2000      	movs	r0, #0
 80040f2:	e008      	b.n	8004106 <_printf_common+0xb2>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4652      	mov	r2, sl
 80040f8:	4641      	mov	r1, r8
 80040fa:	4638      	mov	r0, r7
 80040fc:	47c8      	blx	r9
 80040fe:	3001      	adds	r0, #1
 8004100:	d103      	bne.n	800410a <_printf_common+0xb6>
 8004102:	f04f 30ff 	mov.w	r0, #4294967295
 8004106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410a:	3501      	adds	r5, #1
 800410c:	e7c1      	b.n	8004092 <_printf_common+0x3e>
 800410e:	2030      	movs	r0, #48	@ 0x30
 8004110:	18e1      	adds	r1, r4, r3
 8004112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800411c:	4422      	add	r2, r4
 800411e:	3302      	adds	r3, #2
 8004120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004124:	e7c2      	b.n	80040ac <_printf_common+0x58>
 8004126:	2301      	movs	r3, #1
 8004128:	4622      	mov	r2, r4
 800412a:	4641      	mov	r1, r8
 800412c:	4638      	mov	r0, r7
 800412e:	47c8      	blx	r9
 8004130:	3001      	adds	r0, #1
 8004132:	d0e6      	beq.n	8004102 <_printf_common+0xae>
 8004134:	3601      	adds	r6, #1
 8004136:	e7d9      	b.n	80040ec <_printf_common+0x98>

08004138 <_printf_i>:
 8004138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800413c:	7e0f      	ldrb	r7, [r1, #24]
 800413e:	4691      	mov	r9, r2
 8004140:	2f78      	cmp	r7, #120	@ 0x78
 8004142:	4680      	mov	r8, r0
 8004144:	460c      	mov	r4, r1
 8004146:	469a      	mov	sl, r3
 8004148:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800414a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800414e:	d807      	bhi.n	8004160 <_printf_i+0x28>
 8004150:	2f62      	cmp	r7, #98	@ 0x62
 8004152:	d80a      	bhi.n	800416a <_printf_i+0x32>
 8004154:	2f00      	cmp	r7, #0
 8004156:	f000 80d3 	beq.w	8004300 <_printf_i+0x1c8>
 800415a:	2f58      	cmp	r7, #88	@ 0x58
 800415c:	f000 80ba 	beq.w	80042d4 <_printf_i+0x19c>
 8004160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004168:	e03a      	b.n	80041e0 <_printf_i+0xa8>
 800416a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800416e:	2b15      	cmp	r3, #21
 8004170:	d8f6      	bhi.n	8004160 <_printf_i+0x28>
 8004172:	a101      	add	r1, pc, #4	@ (adr r1, 8004178 <_printf_i+0x40>)
 8004174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041e5 	.word	0x080041e5
 8004180:	08004161 	.word	0x08004161
 8004184:	08004161 	.word	0x08004161
 8004188:	08004161 	.word	0x08004161
 800418c:	08004161 	.word	0x08004161
 8004190:	080041e5 	.word	0x080041e5
 8004194:	08004161 	.word	0x08004161
 8004198:	08004161 	.word	0x08004161
 800419c:	08004161 	.word	0x08004161
 80041a0:	08004161 	.word	0x08004161
 80041a4:	080042e7 	.word	0x080042e7
 80041a8:	0800420f 	.word	0x0800420f
 80041ac:	080042a1 	.word	0x080042a1
 80041b0:	08004161 	.word	0x08004161
 80041b4:	08004161 	.word	0x08004161
 80041b8:	08004309 	.word	0x08004309
 80041bc:	08004161 	.word	0x08004161
 80041c0:	0800420f 	.word	0x0800420f
 80041c4:	08004161 	.word	0x08004161
 80041c8:	08004161 	.word	0x08004161
 80041cc:	080042a9 	.word	0x080042a9
 80041d0:	6833      	ldr	r3, [r6, #0]
 80041d2:	1d1a      	adds	r2, r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6032      	str	r2, [r6, #0]
 80041d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041e0:	2301      	movs	r3, #1
 80041e2:	e09e      	b.n	8004322 <_printf_i+0x1ea>
 80041e4:	6833      	ldr	r3, [r6, #0]
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	1d19      	adds	r1, r3, #4
 80041ea:	6031      	str	r1, [r6, #0]
 80041ec:	0606      	lsls	r6, r0, #24
 80041ee:	d501      	bpl.n	80041f4 <_printf_i+0xbc>
 80041f0:	681d      	ldr	r5, [r3, #0]
 80041f2:	e003      	b.n	80041fc <_printf_i+0xc4>
 80041f4:	0645      	lsls	r5, r0, #25
 80041f6:	d5fb      	bpl.n	80041f0 <_printf_i+0xb8>
 80041f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	da03      	bge.n	8004208 <_printf_i+0xd0>
 8004200:	232d      	movs	r3, #45	@ 0x2d
 8004202:	426d      	negs	r5, r5
 8004204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004208:	230a      	movs	r3, #10
 800420a:	4859      	ldr	r0, [pc, #356]	@ (8004370 <_printf_i+0x238>)
 800420c:	e011      	b.n	8004232 <_printf_i+0xfa>
 800420e:	6821      	ldr	r1, [r4, #0]
 8004210:	6833      	ldr	r3, [r6, #0]
 8004212:	0608      	lsls	r0, r1, #24
 8004214:	f853 5b04 	ldr.w	r5, [r3], #4
 8004218:	d402      	bmi.n	8004220 <_printf_i+0xe8>
 800421a:	0649      	lsls	r1, r1, #25
 800421c:	bf48      	it	mi
 800421e:	b2ad      	uxthmi	r5, r5
 8004220:	2f6f      	cmp	r7, #111	@ 0x6f
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	bf14      	ite	ne
 8004226:	230a      	movne	r3, #10
 8004228:	2308      	moveq	r3, #8
 800422a:	4851      	ldr	r0, [pc, #324]	@ (8004370 <_printf_i+0x238>)
 800422c:	2100      	movs	r1, #0
 800422e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004232:	6866      	ldr	r6, [r4, #4]
 8004234:	2e00      	cmp	r6, #0
 8004236:	bfa8      	it	ge
 8004238:	6821      	ldrge	r1, [r4, #0]
 800423a:	60a6      	str	r6, [r4, #8]
 800423c:	bfa4      	itt	ge
 800423e:	f021 0104 	bicge.w	r1, r1, #4
 8004242:	6021      	strge	r1, [r4, #0]
 8004244:	b90d      	cbnz	r5, 800424a <_printf_i+0x112>
 8004246:	2e00      	cmp	r6, #0
 8004248:	d04b      	beq.n	80042e2 <_printf_i+0x1aa>
 800424a:	4616      	mov	r6, r2
 800424c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004250:	fb03 5711 	mls	r7, r3, r1, r5
 8004254:	5dc7      	ldrb	r7, [r0, r7]
 8004256:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800425a:	462f      	mov	r7, r5
 800425c:	42bb      	cmp	r3, r7
 800425e:	460d      	mov	r5, r1
 8004260:	d9f4      	bls.n	800424c <_printf_i+0x114>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d10b      	bne.n	800427e <_printf_i+0x146>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	07df      	lsls	r7, r3, #31
 800426a:	d508      	bpl.n	800427e <_printf_i+0x146>
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	6861      	ldr	r1, [r4, #4]
 8004270:	4299      	cmp	r1, r3
 8004272:	bfde      	ittt	le
 8004274:	2330      	movle	r3, #48	@ 0x30
 8004276:	f806 3c01 	strble.w	r3, [r6, #-1]
 800427a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800427e:	1b92      	subs	r2, r2, r6
 8004280:	6122      	str	r2, [r4, #16]
 8004282:	464b      	mov	r3, r9
 8004284:	4621      	mov	r1, r4
 8004286:	4640      	mov	r0, r8
 8004288:	f8cd a000 	str.w	sl, [sp]
 800428c:	aa03      	add	r2, sp, #12
 800428e:	f7ff fee1 	bl	8004054 <_printf_common>
 8004292:	3001      	adds	r0, #1
 8004294:	d14a      	bne.n	800432c <_printf_i+0x1f4>
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	b004      	add	sp, #16
 800429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	f043 0320 	orr.w	r3, r3, #32
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	2778      	movs	r7, #120	@ 0x78
 80042aa:	4832      	ldr	r0, [pc, #200]	@ (8004374 <_printf_i+0x23c>)
 80042ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	6831      	ldr	r1, [r6, #0]
 80042b4:	061f      	lsls	r7, r3, #24
 80042b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80042ba:	d402      	bmi.n	80042c2 <_printf_i+0x18a>
 80042bc:	065f      	lsls	r7, r3, #25
 80042be:	bf48      	it	mi
 80042c0:	b2ad      	uxthmi	r5, r5
 80042c2:	6031      	str	r1, [r6, #0]
 80042c4:	07d9      	lsls	r1, r3, #31
 80042c6:	bf44      	itt	mi
 80042c8:	f043 0320 	orrmi.w	r3, r3, #32
 80042cc:	6023      	strmi	r3, [r4, #0]
 80042ce:	b11d      	cbz	r5, 80042d8 <_printf_i+0x1a0>
 80042d0:	2310      	movs	r3, #16
 80042d2:	e7ab      	b.n	800422c <_printf_i+0xf4>
 80042d4:	4826      	ldr	r0, [pc, #152]	@ (8004370 <_printf_i+0x238>)
 80042d6:	e7e9      	b.n	80042ac <_printf_i+0x174>
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	f023 0320 	bic.w	r3, r3, #32
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	e7f6      	b.n	80042d0 <_printf_i+0x198>
 80042e2:	4616      	mov	r6, r2
 80042e4:	e7bd      	b.n	8004262 <_printf_i+0x12a>
 80042e6:	6833      	ldr	r3, [r6, #0]
 80042e8:	6825      	ldr	r5, [r4, #0]
 80042ea:	1d18      	adds	r0, r3, #4
 80042ec:	6961      	ldr	r1, [r4, #20]
 80042ee:	6030      	str	r0, [r6, #0]
 80042f0:	062e      	lsls	r6, r5, #24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	d501      	bpl.n	80042fa <_printf_i+0x1c2>
 80042f6:	6019      	str	r1, [r3, #0]
 80042f8:	e002      	b.n	8004300 <_printf_i+0x1c8>
 80042fa:	0668      	lsls	r0, r5, #25
 80042fc:	d5fb      	bpl.n	80042f6 <_printf_i+0x1be>
 80042fe:	8019      	strh	r1, [r3, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	4616      	mov	r6, r2
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	e7bc      	b.n	8004282 <_printf_i+0x14a>
 8004308:	6833      	ldr	r3, [r6, #0]
 800430a:	2100      	movs	r1, #0
 800430c:	1d1a      	adds	r2, r3, #4
 800430e:	6032      	str	r2, [r6, #0]
 8004310:	681e      	ldr	r6, [r3, #0]
 8004312:	6862      	ldr	r2, [r4, #4]
 8004314:	4630      	mov	r0, r6
 8004316:	f000 f859 	bl	80043cc <memchr>
 800431a:	b108      	cbz	r0, 8004320 <_printf_i+0x1e8>
 800431c:	1b80      	subs	r0, r0, r6
 800431e:	6060      	str	r0, [r4, #4]
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	2300      	movs	r3, #0
 8004326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800432a:	e7aa      	b.n	8004282 <_printf_i+0x14a>
 800432c:	4632      	mov	r2, r6
 800432e:	4649      	mov	r1, r9
 8004330:	4640      	mov	r0, r8
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	47d0      	blx	sl
 8004336:	3001      	adds	r0, #1
 8004338:	d0ad      	beq.n	8004296 <_printf_i+0x15e>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	079b      	lsls	r3, r3, #30
 800433e:	d413      	bmi.n	8004368 <_printf_i+0x230>
 8004340:	68e0      	ldr	r0, [r4, #12]
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	4298      	cmp	r0, r3
 8004346:	bfb8      	it	lt
 8004348:	4618      	movlt	r0, r3
 800434a:	e7a6      	b.n	800429a <_printf_i+0x162>
 800434c:	2301      	movs	r3, #1
 800434e:	4632      	mov	r2, r6
 8004350:	4649      	mov	r1, r9
 8004352:	4640      	mov	r0, r8
 8004354:	47d0      	blx	sl
 8004356:	3001      	adds	r0, #1
 8004358:	d09d      	beq.n	8004296 <_printf_i+0x15e>
 800435a:	3501      	adds	r5, #1
 800435c:	68e3      	ldr	r3, [r4, #12]
 800435e:	9903      	ldr	r1, [sp, #12]
 8004360:	1a5b      	subs	r3, r3, r1
 8004362:	42ab      	cmp	r3, r5
 8004364:	dcf2      	bgt.n	800434c <_printf_i+0x214>
 8004366:	e7eb      	b.n	8004340 <_printf_i+0x208>
 8004368:	2500      	movs	r5, #0
 800436a:	f104 0619 	add.w	r6, r4, #25
 800436e:	e7f5      	b.n	800435c <_printf_i+0x224>
 8004370:	0800452f 	.word	0x0800452f
 8004374:	08004540 	.word	0x08004540

08004378 <memmove>:
 8004378:	4288      	cmp	r0, r1
 800437a:	b510      	push	{r4, lr}
 800437c:	eb01 0402 	add.w	r4, r1, r2
 8004380:	d902      	bls.n	8004388 <memmove+0x10>
 8004382:	4284      	cmp	r4, r0
 8004384:	4623      	mov	r3, r4
 8004386:	d807      	bhi.n	8004398 <memmove+0x20>
 8004388:	1e43      	subs	r3, r0, #1
 800438a:	42a1      	cmp	r1, r4
 800438c:	d008      	beq.n	80043a0 <memmove+0x28>
 800438e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004396:	e7f8      	b.n	800438a <memmove+0x12>
 8004398:	4601      	mov	r1, r0
 800439a:	4402      	add	r2, r0
 800439c:	428a      	cmp	r2, r1
 800439e:	d100      	bne.n	80043a2 <memmove+0x2a>
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043aa:	e7f7      	b.n	800439c <memmove+0x24>

080043ac <_sbrk_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	2300      	movs	r3, #0
 80043b0:	4d05      	ldr	r5, [pc, #20]	@ (80043c8 <_sbrk_r+0x1c>)
 80043b2:	4604      	mov	r4, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	f000 f85a 	bl	8004470 <_sbrk>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d102      	bne.n	80043c6 <_sbrk_r+0x1a>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	b103      	cbz	r3, 80043c6 <_sbrk_r+0x1a>
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	20000344 	.word	0x20000344

080043cc <memchr>:
 80043cc:	4603      	mov	r3, r0
 80043ce:	b510      	push	{r4, lr}
 80043d0:	b2c9      	uxtb	r1, r1
 80043d2:	4402      	add	r2, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	d101      	bne.n	80043de <memchr+0x12>
 80043da:	2000      	movs	r0, #0
 80043dc:	e003      	b.n	80043e6 <memchr+0x1a>
 80043de:	7804      	ldrb	r4, [r0, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	428c      	cmp	r4, r1
 80043e4:	d1f6      	bne.n	80043d4 <memchr+0x8>
 80043e6:	bd10      	pop	{r4, pc}

080043e8 <memcpy>:
 80043e8:	440a      	add	r2, r1
 80043ea:	4291      	cmp	r1, r2
 80043ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f0:	d100      	bne.n	80043f4 <memcpy+0xc>
 80043f2:	4770      	bx	lr
 80043f4:	b510      	push	{r4, lr}
 80043f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043fa:	4291      	cmp	r1, r2
 80043fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004400:	d1f9      	bne.n	80043f6 <memcpy+0xe>
 8004402:	bd10      	pop	{r4, pc}

08004404 <_realloc_r>:
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	4680      	mov	r8, r0
 800440a:	4615      	mov	r5, r2
 800440c:	460c      	mov	r4, r1
 800440e:	b921      	cbnz	r1, 800441a <_realloc_r+0x16>
 8004410:	4611      	mov	r1, r2
 8004412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	f7ff bc39 	b.w	8003c8c <_malloc_r>
 800441a:	b92a      	cbnz	r2, 8004428 <_realloc_r+0x24>
 800441c:	f7ff fbcc 	bl	8003bb8 <_free_r>
 8004420:	2400      	movs	r4, #0
 8004422:	4620      	mov	r0, r4
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004428:	f000 f81a 	bl	8004460 <_malloc_usable_size_r>
 800442c:	4285      	cmp	r5, r0
 800442e:	4606      	mov	r6, r0
 8004430:	d802      	bhi.n	8004438 <_realloc_r+0x34>
 8004432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004436:	d8f4      	bhi.n	8004422 <_realloc_r+0x1e>
 8004438:	4629      	mov	r1, r5
 800443a:	4640      	mov	r0, r8
 800443c:	f7ff fc26 	bl	8003c8c <_malloc_r>
 8004440:	4607      	mov	r7, r0
 8004442:	2800      	cmp	r0, #0
 8004444:	d0ec      	beq.n	8004420 <_realloc_r+0x1c>
 8004446:	42b5      	cmp	r5, r6
 8004448:	462a      	mov	r2, r5
 800444a:	4621      	mov	r1, r4
 800444c:	bf28      	it	cs
 800444e:	4632      	movcs	r2, r6
 8004450:	f7ff ffca 	bl	80043e8 <memcpy>
 8004454:	4621      	mov	r1, r4
 8004456:	4640      	mov	r0, r8
 8004458:	f7ff fbae 	bl	8003bb8 <_free_r>
 800445c:	463c      	mov	r4, r7
 800445e:	e7e0      	b.n	8004422 <_realloc_r+0x1e>

08004460 <_malloc_usable_size_r>:
 8004460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004464:	1f18      	subs	r0, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfbc      	itt	lt
 800446a:	580b      	ldrlt	r3, [r1, r0]
 800446c:	18c0      	addlt	r0, r0, r3
 800446e:	4770      	bx	lr

08004470 <_sbrk>:
 8004470:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <_sbrk+0x14>)
 8004472:	4603      	mov	r3, r0
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	b909      	cbnz	r1, 800447c <_sbrk+0xc>
 8004478:	4903      	ldr	r1, [pc, #12]	@ (8004488 <_sbrk+0x18>)
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	6810      	ldr	r0, [r2, #0]
 800447e:	4403      	add	r3, r0
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4770      	bx	lr
 8004484:	20000354 	.word	0x20000354
 8004488:	20000358 	.word	0x20000358

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
