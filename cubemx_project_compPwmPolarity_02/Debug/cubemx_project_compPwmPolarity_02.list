
cubemx_project_compPwmPolarity_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b1c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006c2c  08006c2c  00007c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d74  08006d74  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006d74  08006d74  00007d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d7c  08006d7c  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d7c  08006d7c  00007d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d80  08006d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006d84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000064  08006de8  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08006de8  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014923  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003827  00000000  00000000  0001c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000201d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e65  00000000  00000000  00021458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8c4  00000000  00000000  000222bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b484  00000000  00000000  0003db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939e2  00000000  00000000  00059005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec9e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e4  00000000  00000000  000eca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000f1b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c14 	.word	0x08006c14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08006c14 	.word	0x08006c14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f001 fb0b 	bl	8001dc4 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f9a6 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f001 fe91 	bl	80024f0 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f000 f996 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000080 	.word	0x20000080
 80007e4:	40012400 	.word	0x40012400

080007e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <HAL_ADC_MspInit+0x7c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d129      	bne.n	800085c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_ADC_MspInit+0x80>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000838:	231e      	movs	r3, #30
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	@ (800086c <HAL_ADC_MspInit+0x84>)
 8000848:	f002 fa5e 	bl	8002d08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2012      	movs	r0, #18
 8000852:	f002 f970 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000856:	2012      	movs	r0, #18
 8000858:	f002 f989 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40012400 	.word	0x40012400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_GPIO_Init+0xa4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <MX_GPIO_Init+0xa4>)
 800088a:	f043 0320 	orr.w	r3, r3, #32
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_GPIO_Init+0xa4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0320 	and.w	r3, r3, #32
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_GPIO_Init+0xa4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_GPIO_Init+0xa4>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0308 	and.w	r3, r3, #8
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DECHARGE_Pin|CHARGE_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	21c0      	movs	r1, #192	@ 0xc0
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_GPIO_Init+0xa8>)
 80008d2:	f002 fb9d 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DECHARGE_Pin|CHARGE_Pin;
 80008d6:	23c0      	movs	r3, #192	@ 0xc0
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480a      	ldr	r0, [pc, #40]	@ (8000918 <MX_GPIO_Init+0xa8>)
 80008ee:	f002 fa0b 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BATTERY_DETECT_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_GPIO_Init+0xac>)
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BATTERY_DETECT_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_GPIO_Init+0xb0>)
 8000906:	f002 f9ff 	bl	8002d08 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	10110000 	.word	0x10110000
 8000920:	40010c00 	.word	0x40010c00

08000924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f002 fb6d 	bl	8003040 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f8ca 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000b0 	.word	0x200000b0
 8000978:	40005400 	.word	0x40005400
 800097c:	00061a80 	.word	0x00061a80

08000980 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <HAL_I2C_MspInit+0x90>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d132      	bne.n	8000a06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_I2C_MspInit+0x98>)
 80009ce:	f002 f99b 	bl	8002d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_I2C_MspInit+0x9c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <HAL_I2C_MspInit+0x9c>)
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_I2C_MspInit+0x94>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	@ 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	40010000 	.word	0x40010000

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f001 f948 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f811 	bl	8000a4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f7ff ff20 	bl	8000870 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a30:	f7ff fe9c 	bl	800076c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a34:	f000 f956 	bl	8000ce4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a38:	f000 faf6 	bl	8001028 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a3c:	f000 fa0a 	bl	8000e54 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000a40:	f7ff ff70 	bl	8000924 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  UsrSystemInitial();
 8000a44:	f000 ffe0 	bl	8001a08 <UsrSystemInitial>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UsrSystemGeneral();
 8000a48:	f001 f83a 	bl	8001ac0 <UsrSystemGeneral>
 8000a4c:	e7fc      	b.n	8000a48 <main+0x28>

08000a4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b094      	sub	sp, #80	@ 0x50
 8000a52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a58:	2228      	movs	r2, #40	@ 0x28
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f005 fc49 	bl	80062f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 f895 	bl	8003bd4 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ab0:	f000 f828 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 fb01 	bl	80040d8 <HAL_RCC_ClockConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000adc:	f000 f812 	bl	8000b04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fc81 	bl	80043f4 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af8:	f000 f804 	bl	8000b04 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	@ 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <HAL_MspInit+0x6c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f001 fff3 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b50:	2005      	movs	r0, #5
 8000b52:	f002 f80c 	bl	8002b6e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_MspInit+0x70>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_MspInit+0x70>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f001 f8b6 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <ADC1_2_IRQHandler+0x10>)
 8000bee:	f001 fbad 	bl	800234c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000080 	.word	0x20000080

08000bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (TIM2->SR & (uint32_t)0x01)
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d019      	beq.n	8000c42 <TIM2_IRQHandler+0x46>
	{
		TIM2->SR &= ~(uint32_t)0x01; // clear update interrupt enable
 8000c0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6113      	str	r3, [r2, #16]

		g_timerCount++; // bu degisken her saniye 1 artacak.
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <TIM2_IRQHandler+0x50>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <TIM2_IRQHandler+0x50>)
 8000c26:	6013      	str	r3, [r2, #0]

        g_dutyCycle += 1; // Duty cycle'ı her saniye 1 artır
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c32:	801a      	strh	r2, [r3, #0]

        if (g_dutyCycle > 45) {
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c3a:	d902      	bls.n	8000c42 <TIM2_IRQHandler+0x46>
        	g_dutyCycle = 10; // Duty cycle'ı %100'ü geçmesin
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <TIM2_IRQHandler+0x54>)
 8000c3e:	220a      	movs	r2, #10
 8000c40:	801a      	strh	r2, [r3, #0]
        }
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <TIM2_IRQHandler+0x58>)
 8000c44:	f003 fde9 	bl	800481a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002d0 	.word	0x200002d0
 8000c50:	2000000a 	.word	0x2000000a
 8000c54:	20000150 	.word	0x20000150

08000c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <USART1_IRQHandler+0x10>)
 8000c5e:	f004 fda9 	bl	80057b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000198 	.word	0x20000198

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f005 fb32 	bl	8006304 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20005000 	.word	0x20005000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000104 	.word	0x20000104
 8000cd4:	20000498 	.word	0x20000498

08000cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	@ 0x58
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2220      	movs	r2, #32
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fae9 	bl	80062f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d22:	4b4a      	ldr	r3, [pc, #296]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d24:	4a4a      	ldr	r2, [pc, #296]	@ (8000e50 <MX_TIM1_Init+0x16c>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d28:	4b48      	ldr	r3, [pc, #288]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b47      	ldr	r3, [pc, #284]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d34:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b43      	ldr	r3, [pc, #268]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d42:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b40      	ldr	r3, [pc, #256]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d4e:	483f      	ldr	r0, [pc, #252]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d50:	f003 fcbc 	bl	80046cc <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d5a:	f7ff fed3 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4838      	ldr	r0, [pc, #224]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d6c:	f003 ff20 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d76:	f7ff fec5 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d7a:	4834      	ldr	r0, [pc, #208]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d7c:	f003 fcf5 	bl	800476a <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d86:	f7ff febd 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d8e:	2380      	movs	r3, #128	@ 0x80
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d96:	4619      	mov	r1, r3
 8000d98:	482c      	ldr	r0, [pc, #176]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000d9a:	f004 fb51 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000da4:	f7ff feae 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	@ 0x60
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000db8:	2304      	movs	r3, #4
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481f      	ldr	r0, [pc, #124]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000dce:	f003 fe2d 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000dd8:	f7ff fe94 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	2204      	movs	r2, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4819      	ldr	r0, [pc, #100]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000de6:	f003 fe21 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000df0:	f7ff fe88 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df8:	2208      	movs	r2, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000dfe:	f003 fe15 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e08:	f7ff fe7c 	bl	8000b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000e30:	f004 fb64 	bl	80054fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000e3a:	f7ff fe63 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e3e:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM1_Init+0x168>)
 8000e40:	f000 f8a4 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3758      	adds	r7, #88	@ 0x58
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000108 	.word	0x20000108
 8000e50:	40012c00 	.word	0x40012c00

08000e54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	481b      	ldr	r0, [pc, #108]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000eaa:	f003 fc0f 	bl	80046cc <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000eb4:	f7ff fe26 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000ec6:	f003 fe73 	bl	8004bb0 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ed0:	f7ff fe18 	bl	8000b04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000ee4:	f003 ff2b 	bl	8004d3e <HAL_TIM_SlaveConfigSynchro>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000eee:	f7ff fe09 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <MX_TIM2_Init+0xc4>)
 8000f00:	f004 fa9e 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f0a:	f7ff fdfb 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	@ 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000150 	.word	0x20000150

08000f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <HAL_TIM_Base_MspInit+0x68>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10c      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f46:	e018      	b.n	8000f7a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f50:	d113      	bne.n	8000f7a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_TIM_Base_MspInit+0x6c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	201c      	movs	r0, #28
 8000f70:	f001 fde1 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f74:	201c      	movs	r0, #28
 8000f76:	f001 fdfa 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40012c00 	.word	0x40012c00
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_TIM_MspPostInit+0x8c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d131      	bne.n	8001010 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_TIM_MspPostInit+0x90>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480b      	ldr	r0, [pc, #44]	@ (8001020 <HAL_TIM_MspPostInit+0x94>)
 8000ff2:	f001 fe89 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ff6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <HAL_TIM_MspPostInit+0x98>)
 800100c:	f001 fe7c 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40012c00 	.word	0x40012c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40010c00 	.word	0x40010c00
 8001024:	40010800 	.word	0x40010800

08001028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <MX_USART1_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_USART1_UART_Init+0x4c>)
 8001060:	f004 faaf 	bl	80055c2 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f7ff fd4b 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000198 	.word	0x20000198
 8001078:	40013800 	.word	0x40013800

0800107c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a26      	ldr	r2, [pc, #152]	@ (8001130 <HAL_UART_MspInit+0xb4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d145      	bne.n	8001128 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a24      	ldr	r2, [pc, #144]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_UART_MspInit+0xb8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010cc:	2340      	movs	r3, #64	@ 0x40
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4816      	ldr	r0, [pc, #88]	@ (8001138 <HAL_UART_MspInit+0xbc>)
 80010e0:	f001 fe12 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4810      	ldr	r0, [pc, #64]	@ (8001138 <HAL_UART_MspInit+0xbc>)
 80010f8:	f001 fe06 	bl	8002d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_UART_MspInit+0xc0>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_UART_MspInit+0xc0>)
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2025      	movs	r0, #37	@ 0x25
 800111e:	f001 fd0a 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001122:	2025      	movs	r0, #37	@ 0x25
 8001124:	f001 fd23 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	@ 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40013800 	.word	0x40013800
 8001134:	40021000 	.word	0x40021000
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40010000 	.word	0x40010000

08001140 <AdcValuesMovingAverageProc>:
ADC_ChannelConfTypeDef sConfigPrivate = {0};

static uint16_t AdcValuesMovingAverageProc(uint16_t* buffer, uint8_t size);

static uint16_t AdcValuesMovingAverageProc(uint16_t* buffer, uint8_t size)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
    for(uint8_t i = 0; i < size; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	72fb      	strb	r3, [r7, #11]
 8001154:	e00b      	b.n	800116e <AdcValuesMovingAverageProc+0x2e>
    {
        sum += buffer[i];
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4413      	add	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
    for(uint8_t i = 0; i < size; i++)
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	3301      	adds	r3, #1
 800116c:	72fb      	strb	r3, [r7, #11]
 800116e:	7afa      	ldrb	r2, [r7, #11]
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3ef      	bcc.n	8001156 <AdcValuesMovingAverageProc+0x16>
    }
    return (uint16_t)(sum / size);  // uint16_t
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	b29b      	uxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	0000      	movs	r0, r0
 800118c:	0000      	movs	r0, r0
	...

08001190 <UsrReadAdc>:

void UsrReadAdc(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08d      	sub	sp, #52	@ 0x34
 8001194:	af02      	add	r7, sp, #8
	sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8001196:	4ba2      	ldr	r3, [pc, #648]	@ (8001420 <UsrReadAdc+0x290>)
 8001198:	2201      	movs	r2, #1
 800119a:	605a      	str	r2, [r3, #4]
	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800119c:	4ba0      	ldr	r3, [pc, #640]	@ (8001420 <UsrReadAdc+0x290>)
 800119e:	2207      	movs	r2, #7
 80011a0:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_4;
 80011a2:	4b9f      	ldr	r3, [pc, #636]	@ (8001420 <UsrReadAdc+0x290>)
 80011a4:	2204      	movs	r2, #4
 80011a6:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80011a8:	499d      	ldr	r1, [pc, #628]	@ (8001420 <UsrReadAdc+0x290>)
 80011aa:	489e      	ldr	r0, [pc, #632]	@ (8001424 <UsrReadAdc+0x294>)
 80011ac:	f001 f9a0 	bl	80024f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80011b0:	489c      	ldr	r0, [pc, #624]	@ (8001424 <UsrReadAdc+0x294>)
 80011b2:	f000 fedf 	bl	8001f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80011b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011ba:	489a      	ldr	r0, [pc, #616]	@ (8001424 <UsrReadAdc+0x294>)
 80011bc:	f000 ffb4 	bl	8002128 <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[0] = HAL_ADC_GetValue(&hadc1);
 80011c0:	4898      	ldr	r0, [pc, #608]	@ (8001424 <UsrReadAdc+0x294>)
 80011c2:	f001 f8b7 	bl	8002334 <HAL_ADC_GetValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b97      	ldr	r3, [pc, #604]	@ (8001428 <UsrReadAdc+0x298>)
 80011cc:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80011ce:	4895      	ldr	r0, [pc, #596]	@ (8001424 <UsrReadAdc+0x294>)
 80011d0:	f000 ff7e 	bl	80020d0 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011d4:	4b92      	ldr	r3, [pc, #584]	@ (8001420 <UsrReadAdc+0x290>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_3;
 80011da:	4b91      	ldr	r3, [pc, #580]	@ (8001420 <UsrReadAdc+0x290>)
 80011dc:	2203      	movs	r2, #3
 80011de:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80011e0:	498f      	ldr	r1, [pc, #572]	@ (8001420 <UsrReadAdc+0x290>)
 80011e2:	4890      	ldr	r0, [pc, #576]	@ (8001424 <UsrReadAdc+0x294>)
 80011e4:	f001 f984 	bl	80024f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80011e8:	488e      	ldr	r0, [pc, #568]	@ (8001424 <UsrReadAdc+0x294>)
 80011ea:	f000 fec3 	bl	8001f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80011ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011f2:	488c      	ldr	r0, [pc, #560]	@ (8001424 <UsrReadAdc+0x294>)
 80011f4:	f000 ff98 	bl	8002128 <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[1] = HAL_ADC_GetValue(&hadc1);
 80011f8:	488a      	ldr	r0, [pc, #552]	@ (8001424 <UsrReadAdc+0x294>)
 80011fa:	f001 f89b 	bl	8002334 <HAL_ADC_GetValue>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b89      	ldr	r3, [pc, #548]	@ (8001428 <UsrReadAdc+0x298>)
 8001204:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8001206:	4887      	ldr	r0, [pc, #540]	@ (8001424 <UsrReadAdc+0x294>)
 8001208:	f000 ff62 	bl	80020d0 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800120c:	4b84      	ldr	r3, [pc, #528]	@ (8001420 <UsrReadAdc+0x290>)
 800120e:	2207      	movs	r2, #7
 8001210:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_2;
 8001212:	4b83      	ldr	r3, [pc, #524]	@ (8001420 <UsrReadAdc+0x290>)
 8001214:	2202      	movs	r2, #2
 8001216:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001218:	4981      	ldr	r1, [pc, #516]	@ (8001420 <UsrReadAdc+0x290>)
 800121a:	4882      	ldr	r0, [pc, #520]	@ (8001424 <UsrReadAdc+0x294>)
 800121c:	f001 f968 	bl	80024f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001220:	4880      	ldr	r0, [pc, #512]	@ (8001424 <UsrReadAdc+0x294>)
 8001222:	f000 fea7 	bl	8001f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001226:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800122a:	487e      	ldr	r0, [pc, #504]	@ (8001424 <UsrReadAdc+0x294>)
 800122c:	f000 ff7c 	bl	8002128 <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[2] = HAL_ADC_GetValue(&hadc1);
 8001230:	487c      	ldr	r0, [pc, #496]	@ (8001424 <UsrReadAdc+0x294>)
 8001232:	f001 f87f 	bl	8002334 <HAL_ADC_GetValue>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b7b      	ldr	r3, [pc, #492]	@ (8001428 <UsrReadAdc+0x298>)
 800123c:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 800123e:	4879      	ldr	r0, [pc, #484]	@ (8001424 <UsrReadAdc+0x294>)
 8001240:	f000 ff46 	bl	80020d0 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001244:	4b76      	ldr	r3, [pc, #472]	@ (8001420 <UsrReadAdc+0x290>)
 8001246:	2207      	movs	r2, #7
 8001248:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_1;
 800124a:	4b75      	ldr	r3, [pc, #468]	@ (8001420 <UsrReadAdc+0x290>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001250:	4973      	ldr	r1, [pc, #460]	@ (8001420 <UsrReadAdc+0x290>)
 8001252:	4874      	ldr	r0, [pc, #464]	@ (8001424 <UsrReadAdc+0x294>)
 8001254:	f001 f94c 	bl	80024f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001258:	4872      	ldr	r0, [pc, #456]	@ (8001424 <UsrReadAdc+0x294>)
 800125a:	f000 fe8b 	bl	8001f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800125e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001262:	4870      	ldr	r0, [pc, #448]	@ (8001424 <UsrReadAdc+0x294>)
 8001264:	f000 ff60 	bl	8002128 <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[3] = HAL_ADC_GetValue(&hadc1);
 8001268:	486e      	ldr	r0, [pc, #440]	@ (8001424 <UsrReadAdc+0x294>)
 800126a:	f001 f863 	bl	8002334 <HAL_ADC_GetValue>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b6d      	ldr	r3, [pc, #436]	@ (8001428 <UsrReadAdc+0x298>)
 8001274:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8001276:	486b      	ldr	r0, [pc, #428]	@ (8001424 <UsrReadAdc+0x294>)
 8001278:	f000 ff2a 	bl	80020d0 <HAL_ADC_Stop>

	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800127c:	4b68      	ldr	r3, [pc, #416]	@ (8001420 <UsrReadAdc+0x290>)
 800127e:	2207      	movs	r2, #7
 8001280:	609a      	str	r2, [r3, #8]
	sConfigPrivate.Channel = ADC_CHANNEL_VREFINT;
 8001282:	4b67      	ldr	r3, [pc, #412]	@ (8001420 <UsrReadAdc+0x290>)
 8001284:	2211      	movs	r2, #17
 8001286:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8001288:	4965      	ldr	r1, [pc, #404]	@ (8001420 <UsrReadAdc+0x290>)
 800128a:	4866      	ldr	r0, [pc, #408]	@ (8001424 <UsrReadAdc+0x294>)
 800128c:	f001 f930 	bl	80024f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001290:	4864      	ldr	r0, [pc, #400]	@ (8001424 <UsrReadAdc+0x294>)
 8001292:	f000 fe6f 	bl	8001f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001296:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800129a:	4862      	ldr	r0, [pc, #392]	@ (8001424 <UsrReadAdc+0x294>)
 800129c:	f000 ff44 	bl	8002128 <HAL_ADC_PollForConversion>
	g_rawAdcReadValues[4] = HAL_ADC_GetValue(&hadc1);
 80012a0:	4860      	ldr	r0, [pc, #384]	@ (8001424 <UsrReadAdc+0x294>)
 80012a2:	f001 f847 	bl	8002334 <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001428 <UsrReadAdc+0x298>)
 80012ac:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 80012ae:	485d      	ldr	r0, [pc, #372]	@ (8001424 <UsrReadAdc+0x294>)
 80012b0:	f000 ff0e 	bl	80020d0 <HAL_ADC_Stop>

	// lcd panele yazirma islemleri
	int tens[4] = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
	int ones[4] = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]

    for (uint8_t i = 0; i < 4; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012d4:	e07c      	b.n	80013d0 <UsrReadAdc+0x240>
    {
    	g_adcBuffer[i][g_adcBufferIndex] = g_rawAdcReadValues[i];
 80012d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012de:	4953      	ldr	r1, [pc, #332]	@ (800142c <UsrReadAdc+0x29c>)
 80012e0:	8809      	ldrh	r1, [r1, #0]
 80012e2:	4608      	mov	r0, r1
 80012e4:	4950      	ldr	r1, [pc, #320]	@ (8001428 <UsrReadAdc+0x298>)
 80012e6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80012ea:	4a51      	ldr	r2, [pc, #324]	@ (8001430 <UsrReadAdc+0x2a0>)
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4403      	add	r3, r0
 80012f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_batteryValues[i] = AdcValuesMovingAverageProc(g_adcBuffer[i], _USR_ADC_BUF_FILTER_SIZE);
 80012f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001430 <UsrReadAdc+0x2a0>)
 80012fc:	4413      	add	r3, r2
 80012fe:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8001302:	2104      	movs	r1, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff1b 	bl	8001140 <AdcValuesMovingAverageProc>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b49      	ldr	r3, [pc, #292]	@ (8001434 <UsrReadAdc+0x2a4>)
 8001310:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
//        g_batteryValuesModified[i] = g_batteryValues[i] * 0.0310;
//        tens[i] = g_batteryValuesModified[i] / 10;
//        ones[i] = g_batteryValuesModified[i] % 10;
        g_batteryValuesModified[i] = g_batteryValues[i] * 3.1;
 8001314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001318:	4a46      	ldr	r2, [pc, #280]	@ (8001434 <UsrReadAdc+0x2a4>)
 800131a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f99a 	bl	8000658 <__aeabi_i2d>
 8001324:	a33c      	add	r3, pc, #240	@ (adr r3, 8001418 <UsrReadAdc+0x288>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7fe ff19 	bl	8000160 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff f9f7 	bl	800072c <__aeabi_d2uiz>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <UsrReadAdc+0x2a8>)
 8001344:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        tens[i] = g_batteryValuesModified[i] / 1000;
 8001348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134c:	4a3a      	ldr	r2, [pc, #232]	@ (8001438 <UsrReadAdc+0x2a8>)
 800134e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001352:	4a3a      	ldr	r2, [pc, #232]	@ (800143c <UsrReadAdc+0x2ac>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	b29a      	uxth	r2, r3
 800135c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3328      	adds	r3, #40	@ 0x28
 8001364:	443b      	add	r3, r7
 8001366:	f843 2c14 	str.w	r2, [r3, #-20]
        ones[i] = g_batteryValuesModified[i] % 10;
 800136a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800136e:	4a32      	ldr	r2, [pc, #200]	@ (8001438 <UsrReadAdc+0x2a8>)
 8001370:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001374:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <UsrReadAdc+0x2b0>)
 8001376:	fba3 1302 	umull	r1, r3, r3, r2
 800137a:	08d9      	lsrs	r1, r3, #3
 800137c:	460b      	mov	r3, r1
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	3328      	adds	r3, #40	@ 0x28
 8001390:	443b      	add	r3, r7
 8001392:	f843 2c24 	str.w	r2, [r3, #-36]

        sprintf((char*)m_batteryBufferUpLine, "B0:%d,%d  B1:%d,%d", tens[0], ones[0], tens[1], ones[1]);
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	4927      	ldr	r1, [pc, #156]	@ (8001444 <UsrReadAdc+0x2b4>)
 80013a8:	4827      	ldr	r0, [pc, #156]	@ (8001448 <UsrReadAdc+0x2b8>)
 80013aa:	f004 ff83 	bl	80062b4 <siprintf>
        sprintf((char*)m_batteryBufferDownLine, "B2:%d,%d  B3:%d,%d", tens[2], ones[2], tens[3], ones[3]);
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	4923      	ldr	r1, [pc, #140]	@ (800144c <UsrReadAdc+0x2bc>)
 80013c0:	4823      	ldr	r0, [pc, #140]	@ (8001450 <UsrReadAdc+0x2c0>)
 80013c2:	f004 ff77 	bl	80062b4 <siprintf>
    for (uint8_t i = 0; i < 4; i++)
 80013c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ca:	3301      	adds	r3, #1
 80013cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	f67f af7e 	bls.w	80012d6 <UsrReadAdc+0x146>
    }
    g_adcBufferIndex = (g_adcBufferIndex + 1) % _USR_ADC_BUF_FILTER_SIZE;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <UsrReadAdc+0x29c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	425a      	negs	r2, r3
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	bf58      	it	pl
 80013ec:	4253      	negpl	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <UsrReadAdc+0x29c>)
 80013f2:	801a      	strh	r2, [r3, #0]

//    fark0 = ABS_DIFF(g_batteryValues[0], g_batteryValues[1]);
//    fark1 = ABS_DIFF(g_batteryValues[1], g_batteryValues[2]);
//    fark2 = ABS_DIFF(g_batteryValues[2], g_batteryValues[3]);

	UsrLcdSetCursor(0, 0);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 f8fa 	bl	80015f0 <UsrLcdSetCursor>
	UsrLcdSendString(m_batteryBufferUpLine);
 80013fc:	4812      	ldr	r0, [pc, #72]	@ (8001448 <UsrReadAdc+0x2b8>)
 80013fe:	f000 f8b4 	bl	800156a <UsrLcdSendString>
	UsrLcdSetCursor(1, 0);
 8001402:	2100      	movs	r1, #0
 8001404:	2001      	movs	r0, #1
 8001406:	f000 f8f3 	bl	80015f0 <UsrLcdSetCursor>
	UsrLcdSendString(m_batteryBufferDownLine);
 800140a:	4811      	ldr	r0, [pc, #68]	@ (8001450 <UsrReadAdc+0x2c0>)
 800140c:	f000 f8ad 	bl	800156a <UsrLcdSendString>
}
 8001410:	bf00      	nop
 8001412:	372c      	adds	r7, #44	@ 0x2c
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	cccccccd 	.word	0xcccccccd
 800141c:	4008cccc 	.word	0x4008cccc
 8001420:	20000224 	.word	0x20000224
 8001424:	20000080 	.word	0x20000080
 8001428:	200001e4 	.word	0x200001e4
 800142c:	20000220 	.word	0x20000220
 8001430:	20000200 	.word	0x20000200
 8001434:	200001f0 	.word	0x200001f0
 8001438:	200001f8 	.word	0x200001f8
 800143c:	10624dd3 	.word	0x10624dd3
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	08006c2c 	.word	0x08006c2c
 8001448:	200002d4 	.word	0x200002d4
 800144c:	08006c40 	.word	0x08006c40
 8001450:	200002e4 	.word	0x200002e4

08001454 <UsrCheckBat2Bat3>:

}


void UsrCheckBat2Bat3(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	uint32_t alt, ust = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]

	ust = g_batteryValuesModified[3] + histeris;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <UsrCheckBat2Bat3+0x70>)
 8001460:	88db      	ldrh	r3, [r3, #6]
 8001462:	461a      	mov	r2, r3
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <UsrCheckBat2Bat3+0x74>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	607b      	str	r3, [r7, #4]
	alt = g_batteryValuesModified[2] + histeris;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <UsrCheckBat2Bat3+0x70>)
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	461a      	mov	r2, r3
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <UsrCheckBat2Bat3+0x74>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	603b      	str	r3, [r7, #0]

	if (g_batteryValuesModified[3] > alt)
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <UsrCheckBat2Bat3+0x70>)
 800147c:	88db      	ldrh	r3, [r3, #6]
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4293      	cmp	r3, r2
 8001484:	d204      	bcs.n	8001490 <UsrCheckBat2Bat3+0x3c>
	{
		direction[2] = YUKARI;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <UsrCheckBat2Bat3+0x78>)
 8001488:	2201      	movs	r2, #1
 800148a:	709a      	strb	r2, [r3, #2]
		UsrTrigSwapPwm1Channel1();
 800148c:	f000 fa26 	bl	80018dc <UsrTrigSwapPwm1Channel1>
	}
	if (g_batteryValuesModified[2] > ust)
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <UsrCheckBat2Bat3+0x70>)
 8001492:	889b      	ldrh	r3, [r3, #4]
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4293      	cmp	r3, r2
 800149a:	d204      	bcs.n	80014a6 <UsrCheckBat2Bat3+0x52>
	{
		direction[2] = ASAGI;
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <UsrCheckBat2Bat3+0x78>)
 800149e:	2200      	movs	r2, #0
 80014a0:	709a      	strb	r2, [r3, #2]
		UsrTrigPwm1Channel1();
 80014a2:	f000 f9cd 	bl	8001840 <UsrTrigPwm1Channel1>
	}
	if (alt == ust)
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d105      	bne.n	80014ba <UsrCheckBat2Bat3+0x66>
	{
		TIM1->CCER &= ~(uint32_t)0x4; // close compliment channel
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <UsrCheckBat2Bat3+0x7c>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <UsrCheckBat2Bat3+0x7c>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6213      	str	r3, [r2, #32]
//			TIM1->CCER &= ~(uint32_t)0x500;
//			g_balansComplete = 3;
//		}
//	}

}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001f8 	.word	0x200001f8
 80014c8:	20000004 	.word	0x20000004
 80014cc:	200001e0 	.word	0x200001e0
 80014d0:	40012c00 	.word	0x40012c00

080014d4 <UsrInitGpio>:


#include "usr_gpio.h"

void UsrInitGpio(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
//	GPIOA->CRL &= (uint32_t)0x00;
//	GPIOB->CRL &= (uint32_t)0x00;

//	GPIOA->CRH &= (uint32_t)0x0000;
	GPIOA->CRH |= (uint32_t)0x0BBB;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <UsrInitGpio+0x2c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <UsrInitGpio+0x2c>)
 80014de:	f443 633b 	orr.w	r3, r3, #2992	@ 0xbb0
 80014e2:	f043 030b 	orr.w	r3, r3, #11
 80014e6:	6053      	str	r3, [r2, #4]

//	GPIOB->CRH &= (uint32_t)0x00;
	GPIOB->CRH |= (uint32_t)0xBBB00000;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <UsrInitGpio+0x30>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <UsrInitGpio+0x30>)
 80014ee:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 80014f2:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 80014f6:	6053      	str	r3, [r2, #4]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40010800 	.word	0x40010800
 8001504:	40010c00 	.word	0x40010c00

08001508 <UsrLcdInit>:
static bool lcdSendCommandProc(char m_command);
static bool lcdSendDataProc(char m_data);


bool UsrLcdInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    if(!lcdSendCommandProc(_USR_LCD_RETURN_HOME))
 800150c:	2002      	movs	r0, #2
 800150e:	f000 f8dd 	bl	80016cc <lcdSendCommandProc>
 8001512:	4603      	mov	r3, r0
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <UsrLcdInit+0x1a>
    	return false;
 800151e:	2300      	movs	r3, #0
 8001520:	e021      	b.n	8001566 <UsrLcdInit+0x5e>
    if(!lcdSendCommandProc(_USR_LCD_FUNCTION_SET | _USR_LCD_FUNCTION_SET_DATA_LENGTH)) // Function set -> DB5=1 and DB3=N=1  2-line display mode.      2x16 kullanılabilir
 8001522:	2028      	movs	r0, #40	@ 0x28
 8001524:	f000 f8d2 	bl	80016cc <lcdSendCommandProc>
 8001528:	4603      	mov	r3, r0
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <UsrLcdInit+0x30>
    {	return false;}
 8001534:	2300      	movs	r3, #0
 8001536:	e016      	b.n	8001566 <UsrLcdInit+0x5e>
	if(!lcdSendCommandProc(_USR_LCD_DISPLAY_ON))   // Display ON/OFF Control DB3=1 and DB2=D=1 display is turned on  // if DB1=C=1 cursor on
 8001538:	200c      	movs	r0, #12
 800153a:	f000 f8c7 	bl	80016cc <lcdSendCommandProc>
 800153e:	4603      	mov	r3, r0
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <UsrLcdInit+0x46>
	{	return false;}
 800154a:	2300      	movs	r3, #0
 800154c:	e00b      	b.n	8001566 <UsrLcdInit+0x5e>
	if(!lcdSendCommandProc(0x80))  // imleci ilk satırın basinda tut.
 800154e:	2080      	movs	r0, #128	@ 0x80
 8001550:	f000 f8bc 	bl	80016cc <lcdSendCommandProc>
 8001554:	4603      	mov	r3, r0
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <UsrLcdInit+0x5c>
		return false;
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <UsrLcdInit+0x5e>
	return true;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}

0800156a <UsrLcdSendString>:


void UsrLcdSendString(char *m_string)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
    while(*m_string)
 8001572:	e006      	b.n	8001582 <UsrLcdSendString+0x18>
    {
        lcdSendDataProc(*m_string++);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f8e1 	bl	8001744 <lcdSendDataProc>
    while(*m_string)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f4      	bne.n	8001574 <UsrLcdSendString+0xa>
    }

}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <UsrLcdClearDisplay>:


void UsrLcdClearDisplay(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    lcdSendCommandProc(_USR_LCD_CLEAR_DISPLAY);
 8001598:	2001      	movs	r0, #1
 800159a:	f000 f897 	bl	80016cc <lcdSendCommandProc>
    HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f000 fbec 	bl	8001d7c <HAL_Delay>
    memset(g_sendStringUpLine, 0, strlen(g_sendStringUpLine));
 80015a4:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <UsrLcdClearDisplay+0x4c>)
 80015a6:	f7fe fdd3 	bl	8000150 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	2100      	movs	r1, #0
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <UsrLcdClearDisplay+0x4c>)
 80015b2:	f004 fe9f 	bl	80062f4 <memset>
    memset(g_sendStringDownLine, 0, strlen(g_sendStringDownLine));
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <UsrLcdClearDisplay+0x50>)
 80015b8:	f7fe fdca 	bl	8000150 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <UsrLcdClearDisplay+0x50>)
 80015c4:	f004 fe96 	bl	80062f4 <memset>
    memset(m_batteryBufferUpLine, 0, 16);
 80015c8:	2210      	movs	r2, #16
 80015ca:	2100      	movs	r1, #0
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <UsrLcdClearDisplay+0x54>)
 80015ce:	f004 fe91 	bl	80062f4 <memset>
    memset(m_batteryBufferDownLine, 0, 16);
 80015d2:	2210      	movs	r2, #16
 80015d4:	2100      	movs	r1, #0
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <UsrLcdClearDisplay+0x58>)
 80015d8:	f004 fe8c 	bl	80062f4 <memset>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200002b0 	.word	0x200002b0
 80015e4:	200002c0 	.word	0x200002c0
 80015e8:	200002d4 	.word	0x200002d4
 80015ec:	200002e4 	.word	0x200002e4

080015f0 <UsrLcdSetCursor>:


void UsrLcdSetCursor(uint8_t f_pRow, uint8_t f_pCol)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
    if (f_pRow == 0)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <UsrLcdSetCursor+0x26>
        lcdSendCommandProc(_USR_LCD_SET_DDRAM_ADDR | f_pCol);
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f85c 	bl	80016cc <lcdSendCommandProc>
 8001614:	e00c      	b.n	8001630 <UsrLcdSetCursor+0x40>
    else if (f_pRow == 1)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d107      	bne.n	800162c <UsrLcdSetCursor+0x3c>
        lcdSendCommandProc(_USR_LCD_SET_SUB_DDRAM_ADDR | f_pCol);
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f851 	bl	80016cc <lcdSendCommandProc>
 800162a:	e001      	b.n	8001630 <UsrLcdSetCursor+0x40>
    else
        f_pRow = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001630:	2064      	movs	r0, #100	@ 0x64
 8001632:	f000 fba3 	bl	8001d7c <HAL_Delay>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <UsrI2CScan>:


void UsrI2CScan(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
    uint16_t i = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	80fb      	strh	r3, [r7, #6]
    uint16_t ret = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	80bb      	strh	r3, [r7, #4]

    HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, startMessage, sprintf((char*)startMessage, "Starting I2C Scanning...\r\n"), 100);
 800164e:	4919      	ldr	r1, [pc, #100]	@ (80016b4 <UsrI2CScan+0x74>)
 8001650:	4819      	ldr	r0, [pc, #100]	@ (80016b8 <UsrI2CScan+0x78>)
 8001652:	f004 fe2f 	bl	80062b4 <siprintf>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	2364      	movs	r3, #100	@ 0x64
 800165c:	4916      	ldr	r1, [pc, #88]	@ (80016b8 <UsrI2CScan+0x78>)
 800165e:	4817      	ldr	r0, [pc, #92]	@ (80016bc <UsrI2CScan+0x7c>)
 8001660:	f003 ffff 	bl	8005662 <HAL_UART_Transmit>

    for (i = 1; i < 128; i++)
 8001664:	2301      	movs	r3, #1
 8001666:	80fb      	strh	r3, [r7, #6]
 8001668:	e01c      	b.n	80016a4 <UsrI2CScan+0x64>
    {
        ret = HAL_I2C_IsDeviceReady(&_USR_LCD_PANEL_I2C_CHANNEL, (i << 1), 2, 100);
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b299      	uxth	r1, r3
 8001670:	2364      	movs	r3, #100	@ 0x64
 8001672:	2202      	movs	r2, #2
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <UsrI2CScan+0x80>)
 8001676:	f001 ff25 	bl	80034c4 <HAL_I2C_IsDeviceReady>
 800167a:	4603      	mov	r3, r0
 800167c:	80bb      	strh	r3, [r7, #4]
        if (ret == HAL_OK)
 800167e:	88bb      	ldrh	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10c      	bne.n	800169e <UsrI2CScan+0x5e>
        {
            HAL_UART_Transmit(&_USR_SERIAL_UART_CHANNEL, data, sprintf((char*)data, "device address: 0x%X\n", i), 100);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	461a      	mov	r2, r3
 8001688:	490e      	ldr	r1, [pc, #56]	@ (80016c4 <UsrI2CScan+0x84>)
 800168a:	480f      	ldr	r0, [pc, #60]	@ (80016c8 <UsrI2CScan+0x88>)
 800168c:	f004 fe12 	bl	80062b4 <siprintf>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	490c      	ldr	r1, [pc, #48]	@ (80016c8 <UsrI2CScan+0x88>)
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <UsrI2CScan+0x7c>)
 800169a:	f003 ffe2 	bl	8005662 <HAL_UART_Transmit>
    for (i = 1; i < 128; i++)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	3301      	adds	r3, #1
 80016a2:	80fb      	strh	r3, [r7, #6]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a8:	d9df      	bls.n	800166a <UsrI2CScan+0x2a>
        }
    }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08006c54 	.word	0x08006c54
 80016b8:	20000230 	.word	0x20000230
 80016bc:	20000198 	.word	0x20000198
 80016c0:	200000b0 	.word	0x200000b0
 80016c4:	08006c70 	.word	0x08006c70
 80016c8:	20000270 	.word	0x20000270

080016cc <lcdSendCommandProc>:


static bool lcdSendCommandProc(char m_command)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    char data_u = ' ';
 80016d6:	2320      	movs	r3, #32
 80016d8:	73fb      	strb	r3, [r7, #15]
    char data_l = ' ';
 80016da:	2320      	movs	r3, #32
 80016dc:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {"0"};
 80016de:	2330      	movs	r3, #48	@ 0x30
 80016e0:	60bb      	str	r3, [r7, #8]
	 *  Gönderilen yüksek değerlikli 4 bit temizlenir.
	 *  Ardından E = 1 yapılır ve ilk 4 bit lcd'ye gönderilir.
	 *  Ve E = 0 yapılarak, son gönderilen düşük değerli 4 bit porttan silinir.
	 */

    data_u = (m_command & 0xF0);   // cmd & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f023 030f 	bic.w	r3, r3, #15
 80016e8:	73fb      	strb	r3, [r7, #15]
    data_l = ((m_command << 4) & 0xF0); // (cmd << 4) & 0x11110000 -> 0xefgh0000 & 0x11110000 = 0xefgh0000
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0C;  // en = 1 & rs = 0    0xabcd0000 | 0x00001100 -> 0xabcd1100
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	f043 030c 	orr.w	r3, r3, #12
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en = 0 & rs = 0    0xabcd0000 | 0x00001000 -> 0xabcd1000
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	b2db      	uxtb	r3, r3
 8001702:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en = 1 & rs = 0    0xefgh0000 | 0x00001100 -> 0xefgh1100
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	f043 030c 	orr.w	r3, r3, #12
 800170a:	b2db      	uxtb	r3, r3
 800170c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en = 0 & rs = 0    0xefgh0000 | 0x00001000 -> 0xefgh1000
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	b2db      	uxtb	r3, r3
 8001716:	72fb      	strb	r3, [r7, #11]

    if (HAL_OK == HAL_I2C_Master_Transmit(&_USR_LCD_PANEL_I2C_CHANNEL, (_USR_LCD_I2C_ADDRESS << 1), (uint8_t*)data_t, 4, 100))
 8001718:	f107 0208 	add.w	r2, r7, #8
 800171c:	2364      	movs	r3, #100	@ 0x64
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2304      	movs	r3, #4
 8001722:	214e      	movs	r1, #78	@ 0x4e
 8001724:	4806      	ldr	r0, [pc, #24]	@ (8001740 <lcdSendCommandProc+0x74>)
 8001726:	f001 fdcf 	bl	80032c8 <HAL_I2C_Master_Transmit>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <lcdSendCommandProc+0x68>
        return true;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <lcdSendCommandProc+0x6a>
    return false;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000b0 	.word	0x200000b0

08001744 <lcdSendDataProc>:


static bool lcdSendDataProc(char m_data)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af02      	add	r7, sp, #8
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
    char data_u = ' ';
 800174e:	2320      	movs	r3, #32
 8001750:	73fb      	strb	r3, [r7, #15]
    char data_l = ' ';
 8001752:	2320      	movs	r3, #32
 8001754:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {"0"};
 8001756:	2330      	movs	r3, #48	@ 0x30
 8001758:	60bb      	str	r3, [r7, #8]

    // öncelikli ve düşük seviyeli olarak ikiye bölüyor
    data_u = (m_data & 0xF0); // data & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f023 030f 	bic.w	r3, r3, #15
 8001760:	73fb      	strb	r3, [r7, #15]
    data_l = ((m_data << 4) & 0xF0); // (data << 4) & 0x11110000 -> 0xefgh0000 & 0x11110000 = 0xefgh0000
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0D;  // en = 1 & rs = 1   0xabcd0000 | 0x00001101 -> 0xabcd1101   // yazma yani gönderme yapıyoruz
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	f043 030d 	orr.w	r3, r3, #13
 800176e:	b2db      	uxtb	r3, r3
 8001770:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en = 0 & rs = 1   0xabcd0000 | 0x00001001 -> 0xabcd1001   // silme yapıyoruz
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	f043 0309 	orr.w	r3, r3, #9
 8001778:	b2db      	uxtb	r3, r3
 800177a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en = 1 & rs = 1   0xefgh0000 | 0x00001100 -> 0xefgh1101   // düşük seviyeli bit gönderme
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	f043 030d 	orr.w	r3, r3, #13
 8001782:	b2db      	uxtb	r3, r3
 8001784:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en = 0 & rs = 1   0xefgh0000 | 0x00001000 -> 0xefgh1001   // sonra silme
 8001786:	7bbb      	ldrb	r3, [r7, #14]
 8001788:	f043 0309 	orr.w	r3, r3, #9
 800178c:	b2db      	uxtb	r3, r3
 800178e:	72fb      	strb	r3, [r7, #11]

    if (HAL_OK == HAL_I2C_Master_Transmit(&_USR_LCD_PANEL_I2C_CHANNEL, (_USR_LCD_I2C_ADDRESS << 1), (uint8_t*)data_t, 4, 100))
 8001790:	f107 0208 	add.w	r2, r7, #8
 8001794:	2364      	movs	r3, #100	@ 0x64
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2304      	movs	r3, #4
 800179a:	214e      	movs	r1, #78	@ 0x4e
 800179c:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <lcdSendDataProc+0x74>)
 800179e:	f001 fd93 	bl	80032c8 <HAL_I2C_Master_Transmit>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <lcdSendDataProc+0x68>
        return true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <lcdSendDataProc+0x6a>
    return false;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200000b0 	.word	0x200000b0

080017bc <UsrInitPwm>:
	FREQUENCY = TIM_CLOCK / ARR              1000000 / 1000 = 1 KHz
	DUTY = (CCRx / ARR) x 100                200 / 1000 x100 = 20
*/

void UsrInitPwm(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    // Zamanlayıcı ayarları
	TIM1->PSC = prescaler - 1;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <UsrInitPwm+0x78>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <UsrInitPwm+0x7c>)
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = autoReload - 1;  // Auto-reload register
 80017ca:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <UsrInitPwm+0x80>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <UsrInitPwm+0x7c>)
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1 (upcounting, TIMx_CCRx < TIMx_CNT) oc1 and oc2
	TIM1->CCMR1 |= (uint32_t)0x6464;  // pwm mode 1 and output compare enable
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <UsrInitPwm+0x7c>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <UsrInitPwm+0x7c>)
 80017da:	f443 43c8 	orr.w	r3, r3, #25600	@ 0x6400
 80017de:	f043 0364 	orr.w	r3, r3, #100	@ 0x64
 80017e2:	6193      	str	r3, [r2, #24]

	// Capture/compare register  output compare fast enable
	TIM1->CCMR2 |= (uint32_t)0x006C;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <UsrInitPwm+0x7c>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <UsrInitPwm+0x7c>)
 80017ea:	f043 036c 	orr.w	r3, r3, #108	@ 0x6c
 80017ee:	61d3      	str	r3, [r2, #28]

    // Break and dead-time register (BDTR)
	TIM1->BDTR |= (uint32_t)0x8800;  // MOE enable and OSSI disable
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <UsrInitPwm+0x7c>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <UsrInitPwm+0x7c>)
 80017f6:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 80017fa:	6453      	str	r3, [r2, #68]	@ 0x44

	// Dead time register. reference manual sayfa 361
	/*
	 * t_dtg = t_dts => 1 / 72MHz = 13,9nS ayarlamaya çalıştım.
	 */
	TIM1->BDTR |= (uint32_t)0x19;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <UsrInitPwm+0x7c>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <UsrInitPwm+0x7c>)
 8001802:	f043 0319 	orr.w	r3, r3, #25
 8001806:	6453      	str	r3, [r2, #68]	@ 0x44

	TIM1->EGR |= (uint32_t)0x01; // update generation
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <UsrInitPwm+0x7c>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <UsrInitPwm+0x7c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= (uint32_t)0x80; // auto-reload preload enable
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <UsrInitPwm+0x7c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <UsrInitPwm+0x7c>)
 800181a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800181e:	6013      	str	r3, [r2, #0]

    // Counter enable
	TIM1->CR1 |= (uint32_t)0x01;  // Counter enable
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <UsrInitPwm+0x7c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <UsrInitPwm+0x7c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000008 	.word	0x20000008
 8001838:	40012c00 	.word	0x40012c00
 800183c:	20000006 	.word	0x20000006

08001840 <UsrTrigPwm1Channel1>:


void UsrTrigPwm1Channel1(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	uint16_t tempValue = (autoReload * g_dutyCycle) / 100;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <UsrTrigPwm1Channel1+0x7c>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <UsrTrigPwm1Channel1+0x80>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <UsrTrigPwm1Channel1+0x84>)
 8001856:	fb82 1203 	smull	r1, r2, r2, r3
 800185a:	1152      	asrs	r2, r2, #5
 800185c:	17db      	asrs	r3, r3, #31
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR1 = tempValue; // Duty cycle
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCER &= ~(uint32_t)0xA;  // polarity high
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 800186e:	f023 030a 	bic.w	r3, r3, #10
 8001872:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (uint32_t)0x01;  // TIM1_CH1 output enable and TIM1_CH1N complementary output enable
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6213      	str	r3, [r2, #32]
	Delay(1/2); // delay 1 ms, compliment comes behind
 8001880:	2000      	movs	r0, #0
 8001882:	f000 fa7b 	bl	8001d7c <HAL_Delay>
	TIM1->CCER |= (uint32_t)0x04; // 0x04
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <UsrTrigPwm1Channel1+0x88>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]

//	UsrLcdClearDisplay();
//	UsrLcdSetCursor(0, 0);
	char *a = {"%"};
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <UsrTrigPwm1Channel1+0x8c>)
 8001894:	603b      	str	r3, [r7, #0]
	sprintf(g_sendStringUpLine, "CH1: %c%d DUTY\n", *a, g_dutyCycle);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <UsrTrigPwm1Channel1+0x80>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	490b      	ldr	r1, [pc, #44]	@ (80018d0 <UsrTrigPwm1Channel1+0x90>)
 80018a2:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <UsrTrigPwm1Channel1+0x94>)
 80018a4:	f004 fd06 	bl	80062b4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)g_sendStringUpLine, 16, 100);
 80018a8:	2364      	movs	r3, #100	@ 0x64
 80018aa:	2210      	movs	r2, #16
 80018ac:	4909      	ldr	r1, [pc, #36]	@ (80018d4 <UsrTrigPwm1Channel1+0x94>)
 80018ae:	480a      	ldr	r0, [pc, #40]	@ (80018d8 <UsrTrigPwm1Channel1+0x98>)
 80018b0:	f003 fed7 	bl	8005662 <HAL_UART_Transmit>
//	UsrLcdSendString(g_sendStringUpLine);
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000006 	.word	0x20000006
 80018c0:	2000000a 	.word	0x2000000a
 80018c4:	51eb851f 	.word	0x51eb851f
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	08006c88 	.word	0x08006c88
 80018d0:	08006c8c 	.word	0x08006c8c
 80018d4:	200002b0 	.word	0x200002b0
 80018d8:	20000198 	.word	0x20000198

080018dc <UsrTrigSwapPwm1Channel1>:


void UsrTrigSwapPwm1Channel1(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	uint16_t tempValue = (autoReload * g_dutyCycle) / 100;
 80018e2:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <UsrTrigSwapPwm1Channel1+0x9c>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b24      	ldr	r3, [pc, #144]	@ (800197c <UsrTrigSwapPwm1Channel1+0xa0>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <UsrTrigSwapPwm1Channel1+0xa4>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	1152      	asrs	r2, r2, #5
 80018f8:	17db      	asrs	r3, r3, #31
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	80fb      	strh	r3, [r7, #6]
	TIM1->CCER &= ~(uint32_t)0x5;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a20      	ldr	r2, [pc, #128]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001904:	f023 0305 	bic.w	r3, r3, #5
 8001908:	6213      	str	r3, [r2, #32]

	TIM1->CCR1 = tempValue; // Duty cycle
 800190a:	4a1e      	ldr	r2, [pc, #120]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCER |= (uint32_t)0x04;
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6213      	str	r3, [r2, #32]
	Delay(1/2);  // delay 1 ms, compliment comes behind
 800191c:	2000      	movs	r0, #0
 800191e:	f000 fa2d 	bl	8001d7c <HAL_Delay>
	TIM1->CCER |= (uint32_t)0x01; // TIM1_CH1 output enable and TIM1_CH1N complementary output enable
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (uint32_t)0xA;  // polarity low
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <UsrTrigSwapPwm1Channel1+0xa8>)
 8001934:	f043 030a 	orr.w	r3, r3, #10
 8001938:	6213      	str	r3, [r2, #32]

//	UsrLcdClearDisplay();
//	UsrLcdSetCursor(0, 0);
	char *a = {"%"};
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <UsrTrigSwapPwm1Channel1+0xac>)
 800193c:	603b      	str	r3, [r7, #0]
	sprintf(g_sendStringUpLine, "CH1: %c%d DUTY\n", *a, g_dutyCycle);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <UsrTrigSwapPwm1Channel1+0xa0>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	4910      	ldr	r1, [pc, #64]	@ (800198c <UsrTrigSwapPwm1Channel1+0xb0>)
 800194a:	4811      	ldr	r0, [pc, #68]	@ (8001990 <UsrTrigSwapPwm1Channel1+0xb4>)
 800194c:	f004 fcb2 	bl	80062b4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)g_sendStringUpLine, 16, 100);
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	2210      	movs	r2, #16
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <UsrTrigSwapPwm1Channel1+0xb4>)
 8001956:	480f      	ldr	r0, [pc, #60]	@ (8001994 <UsrTrigSwapPwm1Channel1+0xb8>)
 8001958:	f003 fe83 	bl	8005662 <HAL_UART_Transmit>
//	UsrLcdSendString(g_sendStringUpLine);

//	UsrLcdSetCursor(1,0);
	sprintf(g_sendStringDownLine, "COMPLIMENT\n");
 800195c:	490e      	ldr	r1, [pc, #56]	@ (8001998 <UsrTrigSwapPwm1Channel1+0xbc>)
 800195e:	480f      	ldr	r0, [pc, #60]	@ (800199c <UsrTrigSwapPwm1Channel1+0xc0>)
 8001960:	f004 fca8 	bl	80062b4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)g_sendStringDownLine, 16, 100);
 8001964:	2364      	movs	r3, #100	@ 0x64
 8001966:	2210      	movs	r2, #16
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <UsrTrigSwapPwm1Channel1+0xc0>)
 800196a:	480a      	ldr	r0, [pc, #40]	@ (8001994 <UsrTrigSwapPwm1Channel1+0xb8>)
 800196c:	f003 fe79 	bl	8005662 <HAL_UART_Transmit>
//	UsrLcdSendString(g_sendStringDownLine);
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000006 	.word	0x20000006
 800197c:	2000000a 	.word	0x2000000a
 8001980:	51eb851f 	.word	0x51eb851f
 8001984:	40012c00 	.word	0x40012c00
 8001988:	08006c88 	.word	0x08006c88
 800198c:	08006c8c 	.word	0x08006c8c
 8001990:	200002b0 	.word	0x200002b0
 8001994:	20000198 	.word	0x20000198
 8001998:	08006c9c 	.word	0x08006c9c
 800199c:	200002c0 	.word	0x200002c0

080019a0 <UsrAllChannelLowLevel>:
//	UsrLcdSendString(g_sendStringDownLine);
}


void UsrAllChannelLowLevel(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	uint16_t tempValue = (autoReload * 0) / 100;
 80019a6:	2300      	movs	r3, #0
 80019a8:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR1 = tempValue; // Duty cycle
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <UsrAllChannelLowLevel+0x54>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2 = tempValue;
 80019b0:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <UsrAllChannelLowLevel+0x54>)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM1->CCR3 = tempValue;
 80019b6:	4a0f      	ldr	r2, [pc, #60]	@ (80019f4 <UsrAllChannelLowLevel+0x54>)
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	63d3      	str	r3, [r2, #60]	@ 0x3c

	TIM1->CCER &= ~(uint32_t)0x555;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <UsrAllChannelLowLevel+0x54>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <UsrAllChannelLowLevel+0x54>)
 80019c2:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 80019c6:	f023 0305 	bic.w	r3, r3, #5
 80019ca:	6213      	str	r3, [r2, #32]

//	UsrLcdClearDisplay();
//	UsrLcdSetCursor(0, 0);
	char *a = {"%"};
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <UsrAllChannelLowLevel+0x58>)
 80019ce:	603b      	str	r3, [r7, #0]
	sprintf(g_sendStringUpLine, "ALL CH: %c%d DUTY\n", *a, 0);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	2300      	movs	r3, #0
 80019d8:	4908      	ldr	r1, [pc, #32]	@ (80019fc <UsrAllChannelLowLevel+0x5c>)
 80019da:	4809      	ldr	r0, [pc, #36]	@ (8001a00 <UsrAllChannelLowLevel+0x60>)
 80019dc:	f004 fc6a 	bl	80062b4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)g_sendStringUpLine, 16, 100);
 80019e0:	2364      	movs	r3, #100	@ 0x64
 80019e2:	2210      	movs	r2, #16
 80019e4:	4906      	ldr	r1, [pc, #24]	@ (8001a00 <UsrAllChannelLowLevel+0x60>)
 80019e6:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <UsrAllChannelLowLevel+0x64>)
 80019e8:	f003 fe3b 	bl	8005662 <HAL_UART_Transmit>
//	UsrLcdSendString(g_sendStringUpLine);
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	08006c88 	.word	0x08006c88
 80019fc:	08006cc8 	.word	0x08006cc8
 8001a00:	200002b0 	.word	0x200002b0
 8001a04:	20000198 	.word	0x20000198

08001a08 <UsrSystemInitial>:

char m_batteryBufferUpLine[16];
char m_batteryBufferDownLine[16];

void UsrSystemInitial(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	uint8_t tryCount = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_rxTempBuf, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	4922      	ldr	r1, [pc, #136]	@ (8001aa0 <UsrSystemInitial+0x98>)
 8001a16:	4823      	ldr	r0, [pc, #140]	@ (8001aa4 <UsrSystemInitial+0x9c>)
 8001a18:	f003 fea6 	bl	8005768 <HAL_UART_Receive_IT>

	UsrInitGpio();
 8001a1c:	f7ff fd5a 	bl	80014d4 <UsrInitGpio>
	UsrTim2Init();
 8001a20:	f000 f8c0 	bl	8001ba4 <UsrTim2Init>
	UsrInitPwm();
 8001a24:	f7ff feca 	bl	80017bc <UsrInitPwm>

	HAL_ADCEx_Calibration_Start(&hadc1);
 8001a28:	481f      	ldr	r0, [pc, #124]	@ (8001aa8 <UsrSystemInitial+0xa0>)
 8001a2a:	f000 fef5 	bl	8002818 <HAL_ADCEx_Calibration_Start>

	UsrI2CScan();
 8001a2e:	f7ff fe07 	bl	8001640 <UsrI2CScan>
	if (UsrLcdInit())
 8001a32:	f7ff fd69 	bl	8001508 <UsrLcdInit>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <UsrSystemInitial+0x56>
	{
	  UsrLcdClearDisplay();
 8001a3c:	f7ff fdaa 	bl	8001594 <UsrLcdClearDisplay>
	  UsrLcdSetCursor(0, 0);
 8001a40:	2100      	movs	r1, #0
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fdd4 	bl	80015f0 <UsrLcdSetCursor>
	  sprintf(g_sendStringUpLine, "ASSAN AR-GE");
 8001a48:	4918      	ldr	r1, [pc, #96]	@ (8001aac <UsrSystemInitial+0xa4>)
 8001a4a:	4819      	ldr	r0, [pc, #100]	@ (8001ab0 <UsrSystemInitial+0xa8>)
 8001a4c:	f004 fc32 	bl	80062b4 <siprintf>
	  UsrLcdSendString(g_sendStringUpLine);
 8001a50:	4817      	ldr	r0, [pc, #92]	@ (8001ab0 <UsrSystemInitial+0xa8>)
 8001a52:	f7ff fd8a 	bl	800156a <UsrLcdSendString>
	  HAL_Delay(5000);
 8001a56:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a5a:	f000 f98f 	bl	8001d7c <HAL_Delay>
	}
	UsrAllChannelLowLevel();
 8001a5e:	f7ff ff9f 	bl	80019a0 <UsrAllChannelLowLevel>

	HAL_UART_Transmit(&huart1, (uint8_t*)g_txBuf, sprintf((char*)g_txBuf, "While Loop was started\n"), 100);
 8001a62:	4914      	ldr	r1, [pc, #80]	@ (8001ab4 <UsrSystemInitial+0xac>)
 8001a64:	4814      	ldr	r0, [pc, #80]	@ (8001ab8 <UsrSystemInitial+0xb0>)
 8001a66:	f004 fc25 	bl	80062b4 <siprintf>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	2364      	movs	r3, #100	@ 0x64
 8001a70:	4911      	ldr	r1, [pc, #68]	@ (8001ab8 <UsrSystemInitial+0xb0>)
 8001a72:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <UsrSystemInitial+0x9c>)
 8001a74:	f003 fdf5 	bl	8005662 <HAL_UART_Transmit>
	UsrLcdClearDisplay();
 8001a78:	f7ff fd8c 	bl	8001594 <UsrLcdClearDisplay>
	HAL_GPIO_WritePin(CHARGE_GPIO_Port, CHARGE_Pin, GPIO_PIN_SET);  // Q9 mosfeti
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	480e      	ldr	r0, [pc, #56]	@ (8001abc <UsrSystemInitial+0xb4>)
 8001a82:	f001 fac5 	bl	8003010 <HAL_GPIO_WritePin>

	// adc degerleri hemen ölcülmüyor bunun icin biraz surec gecmelidir. onun icin bu mekanizma kullanildi.
start_label:;
	UsrReadAdc();
 8001a86:	f7ff fb83 	bl	8001190 <UsrReadAdc>
	if (tryCount++ >= 30)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	71fa      	strb	r2, [r7, #7]
 8001a90:	2b1d      	cmp	r3, #29
 8001a92:	d800      	bhi.n	8001a96 <UsrSystemInitial+0x8e>
		goto end_label;
	else
		goto start_label;
 8001a94:	e7f7      	b.n	8001a86 <UsrSystemInitial+0x7e>
		goto end_label;
 8001a96:	bf00      	nop
end_label:;
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200002f4 	.word	0x200002f4
 8001aa4:	20000198 	.word	0x20000198
 8001aa8:	20000080 	.word	0x20000080
 8001aac:	08006cdc 	.word	0x08006cdc
 8001ab0:	200002b0 	.word	0x200002b0
 8001ab4:	08006ce8 	.word	0x08006ce8
 8001ab8:	20000320 	.word	0x20000320
 8001abc:	40010800 	.word	0x40010800

08001ac0 <UsrSystemGeneral>:


void UsrSystemGeneral(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	UsrReadAdc();
 8001ac4:	f7ff fb64 	bl	8001190 <UsrReadAdc>
	if (((g_batteryValuesModified[0] >= 2500) && (g_batteryValuesModified[0] < 4700)) \
 8001ac8:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d92c      	bls.n	8001b2e <UsrSystemGeneral+0x6e>
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	f241 225b 	movw	r2, #4699	@ 0x125b
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d826      	bhi.n	8001b2e <UsrSystemGeneral+0x6e>
			&& ((g_batteryValuesModified[1] >= 2500) && (g_batteryValuesModified[1] < 4700)) \
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001ae2:	885b      	ldrh	r3, [r3, #2]
 8001ae4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d920      	bls.n	8001b2e <UsrSystemGeneral+0x6e>
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001aee:	885b      	ldrh	r3, [r3, #2]
 8001af0:	f241 225b 	movw	r2, #4699	@ 0x125b
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d81a      	bhi.n	8001b2e <UsrSystemGeneral+0x6e>
			&& ((g_batteryValuesModified[2] >= 2500) && (g_batteryValuesModified[2] < 4700)) \
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001afa:	889b      	ldrh	r3, [r3, #4]
 8001afc:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d914      	bls.n	8001b2e <UsrSystemGeneral+0x6e>
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b06:	889b      	ldrh	r3, [r3, #4]
 8001b08:	f241 225b 	movw	r2, #4699	@ 0x125b
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d80e      	bhi.n	8001b2e <UsrSystemGeneral+0x6e>
			&& ((g_batteryValuesModified[3] >= 2500) && (g_batteryValuesModified[3] < 4700)))
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b12:	88db      	ldrh	r3, [r3, #6]
 8001b14:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d908      	bls.n	8001b2e <UsrSystemGeneral+0x6e>
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b1e:	88db      	ldrh	r3, [r3, #6]
 8001b20:	f241 225b 	movw	r2, #4699	@ 0x125b
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d802      	bhi.n	8001b2e <UsrSystemGeneral+0x6e>
	{

//		HAL_GPIO_WritePin(CHARGE_GPIO_Port, CHARGE_Pin, GPIO_PIN_SET);
//		UsrCheckBat0Bat1();
//		UsrCheckBat1Bat2();
		UsrCheckBat2Bat3();
 8001b28:	f7ff fc94 	bl	8001454 <UsrCheckBat2Bat3>
//	  g_rxIntFlg = false;
//  }



}
 8001b2c:	e018      	b.n	8001b60 <UsrSystemGeneral+0xa0>
	else if ((g_batteryValuesModified[0] < 2000) || (g_batteryValuesModified[1] < 2000) \
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b36:	d30e      	bcc.n	8001b56 <UsrSystemGeneral+0x96>
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b3a:	885b      	ldrh	r3, [r3, #2]
 8001b3c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b40:	d309      	bcc.n	8001b56 <UsrSystemGeneral+0x96>
			|| (g_batteryValuesModified[2] < 2000) || (g_batteryValuesModified[3] < 2000))
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b44:	889b      	ldrh	r3, [r3, #4]
 8001b46:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b4a:	d304      	bcc.n	8001b56 <UsrSystemGeneral+0x96>
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <UsrSystemGeneral+0xa4>)
 8001b4e:	88db      	ldrh	r3, [r3, #6]
 8001b50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b54:	d204      	bcs.n	8001b60 <UsrSystemGeneral+0xa0>
		HAL_GPIO_WritePin(DECHARGE_GPIO_Port, DECHARGE_Pin, GPIO_PIN_RESET); // GPIO_PIN_SET Q8 mosfeti
 8001b56:	2200      	movs	r2, #0
 8001b58:	2140      	movs	r1, #64	@ 0x40
 8001b5a:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <UsrSystemGeneral+0xa8>)
 8001b5c:	f001 fa58 	bl	8003010 <HAL_GPIO_WritePin>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200001f8 	.word	0x200001f8
 8001b68:	40010800 	.word	0x40010800

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4906      	ldr	r1, [pc, #24]	@ (8001ba0 <__NVIC_EnableIRQ+0x34>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <UsrTim2Init>:

#include "usr_tim.h"


void UsrTim2Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	uint32_t prescalarValue = 7200 - 1;
 8001baa:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 8001bae:	607b      	str	r3, [r7, #4]
	uint32_t autoReloadValue = 10000 - 1;
 8001bb0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001bb4:	603b      	str	r3, [r7, #0]

	TIM2->PSC = prescalarValue;
 8001bb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->ARR = autoReloadValue; // bu ayarlarla 1s period olusturmaya calistim.
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

//	TIM2->SMCR |= (uint32_t)0x04; // bit[6:4] 000: Internal Trigger 0 (ITR0) and bit[2:0] 100: Reset mode
	TIM2->SMCR |= (uint32_t)0x56; // bit[6:4] 101: Filtered Timer Input 1 (TI1FP1)  and  bit[2:0] 10: Trigger mode
 8001bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd0:	f043 0356 	orr.w	r3, r3, #86	@ 0x56
 8001bd4:	6093      	str	r3, [r2, #8]

	TIM2->DIER |= (uint32_t)0x01;  // update interrupt enable
 8001bd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 8001be6:	201c      	movs	r0, #28
 8001be8:	f7ff ffc0 	bl	8001b6c <__NVIC_EnableIRQ>
	TIM2->CR1 |= (uint32_t)0x01;  // counter enable
 8001bec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_UART_RxCpltCallback>:
uint16_t g_rxIndex;
bool g_rxIntFlg;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_UART_RxCpltCallback+0x50>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d119      	bne.n	8001c4a <HAL_UART_RxCpltCallback+0x46>
	{
		g_rxBuf[g_rxIndex++] = g_rxTempBuf[0];
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_UART_RxCpltCallback+0x54>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	b291      	uxth	r1, r2
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <HAL_UART_RxCpltCallback+0x54>)
 8001c20:	8011      	strh	r1, [r2, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_UART_RxCpltCallback+0x58>)
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_UART_RxCpltCallback+0x5c>)
 8001c2a:	5499      	strb	r1, [r3, r2]
		if(g_rxIndex >= 40)
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_UART_RxCpltCallback+0x54>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	2b27      	cmp	r3, #39	@ 0x27
 8001c32:	d902      	bls.n	8001c3a <HAL_UART_RxCpltCallback+0x36>
			g_rxIndex = 0;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <HAL_UART_RxCpltCallback+0x54>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	801a      	strh	r2, [r3, #0]
		g_rxIntFlg = true;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_UART_RxCpltCallback+0x60>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)g_rxTempBuf, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	4906      	ldr	r1, [pc, #24]	@ (8001c5c <HAL_UART_RxCpltCallback+0x58>)
 8001c44:	4808      	ldr	r0, [pc, #32]	@ (8001c68 <HAL_UART_RxCpltCallback+0x64>)
 8001c46:	f003 fd8f 	bl	8005768 <HAL_UART_Receive_IT>
	}
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013800 	.word	0x40013800
 8001c58:	20000348 	.word	0x20000348
 8001c5c:	200002f4 	.word	0x200002f4
 8001c60:	200002f8 	.word	0x200002f8
 8001c64:	2000034a 	.word	0x2000034a
 8001c68:	20000198 	.word	0x20000198

08001c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c6c:	f7ff f834 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c72:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c88:	4c09      	ldr	r4, [pc, #36]	@ (8001cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f004 fb3b 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c9a:	f7fe fec1 	bl	8000a20 <main>
  bx lr
 8001c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ca8:	08006d84 	.word	0x08006d84
  ldr r2, =_sbss
 8001cac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001cb0:	20000498 	.word	0x20000498

08001cb4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <CAN1_RX1_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <HAL_Init+0x28>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	@ (8001ce0 <HAL_Init+0x28>)
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 ff29 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7fe ff1c 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 ff41 	bl	8002b8a <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 ff09 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	2000000c 	.word	0x2000000c

08001d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_IncTick+0x1c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_IncTick+0x20>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a03      	ldr	r2, [pc, #12]	@ (8001d64 <HAL_IncTick+0x20>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20000010 	.word	0x20000010
 8001d64:	2000034c 	.word	0x2000034c

08001d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b02      	ldr	r3, [pc, #8]	@ (8001d78 <HAL_GetTick+0x10>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	2000034c 	.word	0x2000034c

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffe0 	bl	8001d68 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000010 	.word	0x20000010

08001dc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0be      	b.n	8001f64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fcf0 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fcc3 	bl	8002794 <ADC_ConversionStop_Disable>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 8099 	bne.w	8001f52 <HAL_ADC_Init+0x18e>
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8095 	bne.w	8001f52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e30:	f023 0302 	bic.w	r3, r3, #2
 8001e34:	f043 0202 	orr.w	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7b1b      	ldrb	r3, [r3, #12]
 8001e4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5c:	d003      	beq.n	8001e66 <HAL_ADC_Init+0xa2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_ADC_Init+0xa8>
 8001e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_Init+0xaa>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7d1b      	ldrb	r3, [r3, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d119      	bne.n	8001eb0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7b1b      	ldrb	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	035a      	lsls	r2, r3, #13
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e00b      	b.n	8001eb0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f043 0220 	orr.w	r2, r3, #32
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_ADC_Init+0x1a8>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee0:	d003      	beq.n	8001eea <HAL_ADC_Init+0x126>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d104      	bne.n	8001ef4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	051b      	lsls	r3, r3, #20
 8001ef2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_ADC_Init+0x1ac>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10b      	bne.n	8001f30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f2e:	e018      	b.n	8001f62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	f023 0312 	bic.w	r3, r3, #18
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f50:	e007      	b.n	8001f62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f70:	ff1f0efe 	.word	0xff1f0efe

08001f74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Start+0x1a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e098      	b.n	80020c0 <HAL_ADC_Start+0x14c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fba2 	bl	80026e0 <ADC_Enable>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 8087 	bne.w	80020b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <HAL_ADC_Start+0x154>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_Start+0x5e>
 8001fc6:	4b41      	ldr	r3, [pc, #260]	@ (80020cc <HAL_ADC_Start+0x158>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d026      	beq.n	800203a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ff4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffc:	e01d      	b.n	800203a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2f      	ldr	r2, [pc, #188]	@ (80020cc <HAL_ADC_Start+0x158>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_ADC_Start+0xaa>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <HAL_ADC_Start+0x154>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10d      	bne.n	800203a <HAL_ADC_Start+0xc6>
 800201e:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <HAL_ADC_Start+0x158>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002032:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	f023 0206 	bic.w	r2, r3, #6
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002052:	e002      	b.n	800205a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0202 	mvn.w	r2, #2
 800206a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002076:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800207a:	d113      	bne.n	80020a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_ADC_Start+0x154>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d105      	bne.n	8002092 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_ADC_Start+0x158>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	e00c      	b.n	80020be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e003      	b.n	80020be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40012800 	.word	0x40012800
 80020cc:	40012400 	.word	0x40012400

080020d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Stop+0x1a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e01a      	b.n	8002120 <HAL_ADC_Stop+0x50>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fb4e 	bl	8002794 <ADC_ConversionStop_Disable>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800213e:	f7ff fe13 	bl	8001d68 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	f043 0220 	orr.w	r2, r3, #32
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0d3      	b.n	8002312 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d131      	bne.n	80021dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	d12a      	bne.n	80021dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002186:	e021      	b.n	80021cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d01d      	beq.n	80021cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_ADC_PollForConversion+0x7e>
 8002196:	f7ff fde7 	bl	8001d68 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d212      	bcs.n	80021cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	f043 0204 	orr.w	r2, r3, #4
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0a2      	b.n	8002312 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0d6      	beq.n	8002188 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021da:	e070      	b.n	80022be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021dc:	4b4f      	ldr	r3, [pc, #316]	@ (800231c <HAL_ADC_PollForConversion+0x1f4>)
 80021de:	681c      	ldr	r4, [r3, #0]
 80021e0:	2002      	movs	r0, #2
 80021e2:	f002 f9bd 	bl	8004560 <HAL_RCCEx_GetPeriphCLKFreq>
 80021e6:	4603      	mov	r3, r0
 80021e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <HAL_ADC_PollForConversion+0x1f8>)
 80021f4:	400b      	ands	r3, r1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_ADC_PollForConversion+0x104>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68d9      	ldr	r1, [r3, #12]
 8002200:	4b48      	ldr	r3, [pc, #288]	@ (8002324 <HAL_ADC_PollForConversion+0x1fc>)
 8002202:	400b      	ands	r3, r1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_ADC_PollForConversion+0x104>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	4b46      	ldr	r3, [pc, #280]	@ (8002328 <HAL_ADC_PollForConversion+0x200>)
 8002210:	400b      	ands	r3, r1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_ADC_PollForConversion+0x100>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68d9      	ldr	r1, [r3, #12]
 800221c:	4b43      	ldr	r3, [pc, #268]	@ (800232c <HAL_ADC_PollForConversion+0x204>)
 800221e:	400b      	ands	r3, r1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_PollForConversion+0x100>
 8002224:	2314      	movs	r3, #20
 8002226:	e020      	b.n	800226a <HAL_ADC_PollForConversion+0x142>
 8002228:	2329      	movs	r3, #41	@ 0x29
 800222a:	e01e      	b.n	800226a <HAL_ADC_PollForConversion+0x142>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <HAL_ADC_PollForConversion+0x200>)
 8002234:	400b      	ands	r3, r1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_ADC_PollForConversion+0x120>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68d9      	ldr	r1, [r3, #12]
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <HAL_ADC_PollForConversion+0x204>)
 8002242:	400b      	ands	r3, r1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <HAL_ADC_PollForConversion+0x13c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	4b38      	ldr	r3, [pc, #224]	@ (8002330 <HAL_ADC_PollForConversion+0x208>)
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_ADC_PollForConversion+0x140>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <HAL_ADC_PollForConversion+0x208>)
 800225e:	400b      	ands	r3, r1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_PollForConversion+0x140>
 8002264:	2354      	movs	r3, #84	@ 0x54
 8002266:	e000      	b.n	800226a <HAL_ADC_PollForConversion+0x142>
 8002268:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002270:	e021      	b.n	80022b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d01a      	beq.n	80022b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_ADC_PollForConversion+0x168>
 8002280:	f7ff fd72 	bl	8001d68 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d20f      	bcs.n	80022b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d90b      	bls.n	80022b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	f043 0204 	orr.w	r2, r3, #4
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e030      	b.n	8002312 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d8d9      	bhi.n	8002272 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0212 	mvn.w	r2, #18
 80022c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022e2:	d115      	bne.n	8002310 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000
 8002320:	24924924 	.word	0x24924924
 8002324:	00924924 	.word	0x00924924
 8002328:	12492492 	.word	0x12492492
 800232c:	00492492 	.word	0x00492492
 8002330:	00249249 	.word	0x00249249

08002334 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03e      	beq.n	80023ec <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d039      	beq.n	80023ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800239a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800239e:	d11d      	bne.n	80023dc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d119      	bne.n	80023dc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0220 	bic.w	r2, r2, #32
 80023b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f874 	bl	80024ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0212 	mvn.w	r2, #18
 80023ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04d      	beq.n	8002492 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d048      	beq.n	8002492 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002422:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002426:	d012      	beq.n	800244e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002432:	2b00      	cmp	r3, #0
 8002434:	d125      	bne.n	8002482 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002440:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002444:	d11d      	bne.n	8002482 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800245c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa76 	bl	8002974 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 020c 	mvn.w	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d012      	beq.n	80024c2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f812 	bl	80024dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0201 	mvn.w	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x20>
 800250c:	2302      	movs	r3, #2
 800250e:	e0dc      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1da>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d81c      	bhi.n	800255a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b05      	subs	r3, #5
 8002532:	221f      	movs	r2, #31
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b05      	subs	r3, #5
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	635a      	str	r2, [r3, #52]	@ 0x34
 8002558:	e03c      	b.n	80025d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d81c      	bhi.n	800259c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b23      	subs	r3, #35	@ 0x23
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	4019      	ands	r1, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b23      	subs	r3, #35	@ 0x23
 800258e:	fa00 f203 	lsl.w	r2, r0, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
 800259a:	e01b      	b.n	80025d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	@ 0x41
 80025ae:	221f      	movs	r2, #31
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3b41      	subs	r3, #65	@ 0x41
 80025c8:	fa00 f203 	lsl.w	r2, r0, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	d91c      	bls.n	8002616 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	2207      	movs	r2, #7
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	4019      	ands	r1, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6898      	ldr	r0, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	3b1e      	subs	r3, #30
 8002608:	fa00 f203 	lsl.w	r2, r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	e019      	b.n	800264a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6919      	ldr	r1, [r3, #16]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	2207      	movs	r2, #7
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	4019      	ands	r1, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6898      	ldr	r0, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	fa00 f203 	lsl.w	r2, r0, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b10      	cmp	r3, #16
 8002650:	d003      	beq.n	800265a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002656:	2b11      	cmp	r3, #17
 8002658:	d132      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d125      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d126      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002680:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b10      	cmp	r3, #16
 8002688:	d11a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	0c9a      	lsrs	r2, r3, #18
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x1b2>
 80026ae:	e007      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012400 	.word	0x40012400
 80026d8:	20000000 	.word	0x20000000
 80026dc:	431bde83 	.word	0x431bde83

080026e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d040      	beq.n	8002780 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <ADC_Enable+0xac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1f      	ldr	r2, [pc, #124]	@ (8002790 <ADC_Enable+0xb0>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800271c:	e002      	b.n	8002724 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3b01      	subs	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f9      	bne.n	800271e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800272a:	f7ff fb1d 	bl	8001d68 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002730:	e01f      	b.n	8002772 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002732:	f7ff fb19 	bl	8001d68 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d918      	bls.n	8002772 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d011      	beq.n	8002772 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	f043 0210 	orr.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d1d8      	bne.n	8002732 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000
 8002790:	431bde83 	.word	0x431bde83

08002794 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12e      	bne.n	800280c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027be:	f7ff fad3 	bl	8001d68 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027c4:	e01b      	b.n	80027fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c6:	f7ff facf 	bl	8001d68 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d914      	bls.n	80027fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10d      	bne.n	80027fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d0dc      	beq.n	80027c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADCEx_Calibration_Start+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e097      	b.n	8002966 <HAL_ADCEx_Calibration_Start+0x14e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa8 	bl	8002794 <ADC_ConversionStop_Disable>
 8002844:	4603      	mov	r3, r0
 8002846:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff49 	bl	80026e0 <ADC_Enable>
 800284e:	4603      	mov	r3, r0
 8002850:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 8081 	bne.w	800295c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002862:	f023 0302 	bic.w	r3, r3, #2
 8002866:	f043 0202 	orr.w	r2, r3, #2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_ADCEx_Calibration_Start+0x158>)
 8002870:	681c      	ldr	r4, [r3, #0]
 8002872:	2002      	movs	r0, #2
 8002874:	f001 fe74 	bl	8004560 <HAL_RCCEx_GetPeriphCLKFreq>
 8002878:	4603      	mov	r3, r0
 800287a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800287e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002880:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002882:	e002      	b.n	800288a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3b01      	subs	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0208 	orr.w	r2, r2, #8
 800289e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028a0:	f7ff fa62 	bl	8001d68 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028a6:	e01b      	b.n	80028e0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028a8:	f7ff fa5e 	bl	8001d68 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d914      	bls.n	80028e0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f023 0312 	bic.w	r3, r3, #18
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e042      	b.n	8002966 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1dc      	bne.n	80028a8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0204 	orr.w	r2, r2, #4
 80028fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028fe:	f7ff fa33 	bl	8001d68 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002904:	e01b      	b.n	800293e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002906:	f7ff fa2f 	bl	8001d68 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b0a      	cmp	r3, #10
 8002912:	d914      	bls.n	800293e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	f023 0312 	bic.w	r3, r3, #18
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e013      	b.n	8002966 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1dc      	bne.n	8002906 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	f023 0303 	bic.w	r3, r3, #3
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
}
 8002966:	4618      	mov	r0, r3
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000

08002974 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <__NVIC_SetPriorityGrouping>:
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4906      	ldr	r1, [pc, #24]	@ (8002a20 <__NVIC_EnableIRQ+0x34>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	@ 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff90 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff2d 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff42 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff90 	bl	8002a78 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5f 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff35 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d008      	beq.n	8002bcc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e020      	b.n	8002c0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 020e 	bic.w	r2, r2, #14
 8002bda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d005      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2204      	movs	r2, #4
 8002c34:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e051      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 020e 	bic.w	r2, r2, #14
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a22      	ldr	r2, [pc, #136]	@ (8002cec <HAL_DMA_Abort_IT+0xd4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d029      	beq.n	8002cba <HAL_DMA_Abort_IT+0xa2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	@ (8002cf0 <HAL_DMA_Abort_IT+0xd8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Abort_IT+0x9e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf4 <HAL_DMA_Abort_IT+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01a      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x98>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf8 <HAL_DMA_Abort_IT+0xe0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d012      	beq.n	8002caa <HAL_DMA_Abort_IT+0x92>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	@ (8002cfc <HAL_DMA_Abort_IT+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x8c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	@ (8002d00 <HAL_DMA_Abort_IT+0xe8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d102      	bne.n	8002c9e <HAL_DMA_Abort_IT+0x86>
 8002c98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c9c:	e00e      	b.n	8002cbc <HAL_DMA_Abort_IT+0xa4>
 8002c9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca2:	e00b      	b.n	8002cbc <HAL_DMA_Abort_IT+0xa4>
 8002ca4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca8:	e008      	b.n	8002cbc <HAL_DMA_Abort_IT+0xa4>
 8002caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cae:	e005      	b.n	8002cbc <HAL_DMA_Abort_IT+0xa4>
 8002cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cb4:	e002      	b.n	8002cbc <HAL_DMA_Abort_IT+0xa4>
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Abort_IT+0xa4>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4a11      	ldr	r2, [pc, #68]	@ (8002d04 <HAL_DMA_Abort_IT+0xec>)
 8002cbe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    } 
  }
  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40020008 	.word	0x40020008
 8002cf0:	4002001c 	.word	0x4002001c
 8002cf4:	40020030 	.word	0x40020030
 8002cf8:	40020044 	.word	0x40020044
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	4002006c 	.word	0x4002006c
 8002d04:	40020000 	.word	0x40020000

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b08b      	sub	sp, #44	@ 0x2c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1a:	e169      	b.n	8002ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 8158 	bne.w	8002fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a9a      	ldr	r2, [pc, #616]	@ (8002fa8 <HAL_GPIO_Init+0x2a0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d05e      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d44:	4a98      	ldr	r2, [pc, #608]	@ (8002fa8 <HAL_GPIO_Init+0x2a0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d875      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d4a:	4a98      	ldr	r2, [pc, #608]	@ (8002fac <HAL_GPIO_Init+0x2a4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d058      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d50:	4a96      	ldr	r2, [pc, #600]	@ (8002fac <HAL_GPIO_Init+0x2a4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d86f      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d56:	4a96      	ldr	r2, [pc, #600]	@ (8002fb0 <HAL_GPIO_Init+0x2a8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d052      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d5c:	4a94      	ldr	r2, [pc, #592]	@ (8002fb0 <HAL_GPIO_Init+0x2a8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d869      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d62:	4a94      	ldr	r2, [pc, #592]	@ (8002fb4 <HAL_GPIO_Init+0x2ac>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d04c      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d68:	4a92      	ldr	r2, [pc, #584]	@ (8002fb4 <HAL_GPIO_Init+0x2ac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d863      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d6e:	4a92      	ldr	r2, [pc, #584]	@ (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d046      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d74:	4a90      	ldr	r2, [pc, #576]	@ (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d85d      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d82a      	bhi.n	8002dd4 <HAL_GPIO_Init+0xcc>
 8002d7e:	2b12      	cmp	r3, #18
 8002d80:	d859      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d82:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <HAL_GPIO_Init+0x80>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002e03 	.word	0x08002e03
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002def 	.word	0x08002def
 8002d94:	08002e31 	.word	0x08002e31
 8002d98:	08002e37 	.word	0x08002e37
 8002d9c:	08002e37 	.word	0x08002e37
 8002da0:	08002e37 	.word	0x08002e37
 8002da4:	08002e37 	.word	0x08002e37
 8002da8:	08002e37 	.word	0x08002e37
 8002dac:	08002e37 	.word	0x08002e37
 8002db0:	08002e37 	.word	0x08002e37
 8002db4:	08002e37 	.word	0x08002e37
 8002db8:	08002e37 	.word	0x08002e37
 8002dbc:	08002e37 	.word	0x08002e37
 8002dc0:	08002e37 	.word	0x08002e37
 8002dc4:	08002e37 	.word	0x08002e37
 8002dc8:	08002e37 	.word	0x08002e37
 8002dcc:	08002de5 	.word	0x08002de5
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	4a79      	ldr	r2, [pc, #484]	@ (8002fbc <HAL_GPIO_Init+0x2b4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dda:	e02c      	b.n	8002e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	623b      	str	r3, [r7, #32]
          break;
 8002de2:	e029      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	3304      	adds	r3, #4
 8002dea:	623b      	str	r3, [r7, #32]
          break;
 8002dec:	e024      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	3308      	adds	r3, #8
 8002df4:	623b      	str	r3, [r7, #32]
          break;
 8002df6:	e01f      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e01a      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	623b      	str	r3, [r7, #32]
          break;
 8002e0e:	e013      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e18:	2308      	movs	r3, #8
 8002e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	611a      	str	r2, [r3, #16]
          break;
 8002e22:	e009      	b.n	8002e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e24:	2308      	movs	r3, #8
 8002e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	615a      	str	r2, [r3, #20]
          break;
 8002e2e:	e003      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
          break;
 8002e34:	e000      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          break;
 8002e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2bff      	cmp	r3, #255	@ 0xff
 8002e3c:	d801      	bhi.n	8002e42 <HAL_GPIO_Init+0x13a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_Init+0x13e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2bff      	cmp	r3, #255	@ 0xff
 8002e4c:	d802      	bhi.n	8002e54 <HAL_GPIO_Init+0x14c>
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_Init+0x152>
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	3b08      	subs	r3, #8
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	210f      	movs	r1, #15
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	6a39      	ldr	r1, [r7, #32]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80b1 	beq.w	8002fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e88:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc0 <HAL_GPIO_Init+0x2b8>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc0 <HAL_GPIO_Init+0x2b8>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc0 <HAL_GPIO_Init+0x2b8>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ea0:	4a48      	ldr	r2, [pc, #288]	@ (8002fc4 <HAL_GPIO_Init+0x2bc>)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a40      	ldr	r2, [pc, #256]	@ (8002fc8 <HAL_GPIO_Init+0x2c0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_GPIO_Init+0x1ec>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3f      	ldr	r2, [pc, #252]	@ (8002fcc <HAL_GPIO_Init+0x2c4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_GPIO_Init+0x1e8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fd0 <HAL_GPIO_Init+0x2c8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <HAL_GPIO_Init+0x1e4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd4 <HAL_GPIO_Init+0x2cc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_GPIO_Init+0x1e0>
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e006      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e004      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e002      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef8:	f002 0203 	and.w	r2, r2, #3
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	4093      	lsls	r3, r2
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f06:	492f      	ldr	r1, [pc, #188]	@ (8002fc4 <HAL_GPIO_Init+0x2bc>)
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f20:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	492c      	ldr	r1, [pc, #176]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	4928      	ldr	r1, [pc, #160]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f48:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4922      	ldr	r1, [pc, #136]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	491e      	ldr	r1, [pc, #120]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f70:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4918      	ldr	r1, [pc, #96]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f7e:	4b16      	ldr	r3, [pc, #88]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4914      	ldr	r1, [pc, #80]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d021      	beq.n	8002fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f98:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	490e      	ldr	r1, [pc, #56]	@ (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e021      	b.n	8002fea <HAL_GPIO_Init+0x2e2>
 8002fa6:	bf00      	nop
 8002fa8:	10320000 	.word	0x10320000
 8002fac:	10310000 	.word	0x10310000
 8002fb0:	10220000 	.word	0x10220000
 8002fb4:	10210000 	.word	0x10210000
 8002fb8:	10120000 	.word	0x10120000
 8002fbc:	10110000 	.word	0x10110000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40010800 	.word	0x40010800
 8002fcc:	40010c00 	.word	0x40010c00
 8002fd0:	40011000 	.word	0x40011000
 8002fd4:	40011400 	.word	0x40011400
 8002fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	4909      	ldr	r1, [pc, #36]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	3301      	adds	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f47f ae8e 	bne.w	8002d1c <HAL_GPIO_Init+0x14>
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	372c      	adds	r7, #44	@ 0x2c
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40010400 	.word	0x40010400

08003010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800302c:	e003      	b.n	8003036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	611a      	str	r2, [r3, #16]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e12b      	b.n	80032aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fc8a 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a4:	f001 f960 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a81      	ldr	r2, [pc, #516]	@ (80032b4 <HAL_I2C_Init+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d807      	bhi.n	80030c4 <HAL_I2C_Init+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a80      	ldr	r2, [pc, #512]	@ (80032b8 <HAL_I2C_Init+0x278>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e006      	b.n	80030d2 <HAL_I2C_Init+0x92>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a7d      	ldr	r2, [pc, #500]	@ (80032bc <HAL_I2C_Init+0x27c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0e7      	b.n	80032aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a78      	ldr	r2, [pc, #480]	@ (80032c0 <HAL_I2C_Init+0x280>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a6a      	ldr	r2, [pc, #424]	@ (80032b4 <HAL_I2C_Init+0x274>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <HAL_I2C_Init+0xd4>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	e009      	b.n	8003128 <HAL_I2C_Init+0xe8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	4a69      	ldr	r2, [pc, #420]	@ (80032c4 <HAL_I2C_Init+0x284>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	3301      	adds	r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800313a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	495c      	ldr	r1, [pc, #368]	@ (80032b4 <HAL_I2C_Init+0x274>)
 8003144:	428b      	cmp	r3, r1
 8003146:	d819      	bhi.n	800317c <HAL_I2C_Init+0x13c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e59      	subs	r1, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb1 f3f3 	udiv	r3, r1, r3
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800315c:	400b      	ands	r3, r1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_I2C_Init+0x138>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e59      	subs	r1, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	e051      	b.n	800321c <HAL_I2C_Init+0x1dc>
 8003178:	2304      	movs	r3, #4
 800317a:	e04f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <HAL_I2C_Init+0x168>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e012      	b.n	80031ce <HAL_I2C_Init+0x18e>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Init+0x196>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10e      	bne.n	80031fc <HAL_I2C_Init+0x1bc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e58      	subs	r0, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	440b      	add	r3, r1
 80031ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031fa:	e00f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	6809      	ldr	r1, [r1, #0]
 8003220:	4313      	orrs	r3, r2
 8003222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800324a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6911      	ldr	r1, [r2, #16]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	000186a0 	.word	0x000186a0
 80032b8:	001e847f 	.word	0x001e847f
 80032bc:	003d08ff 	.word	0x003d08ff
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	10624dd3 	.word	0x10624dd3

080032c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
 80032d8:	4613      	mov	r3, r2
 80032da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7fe fd44 	bl	8001d68 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	f040 80e0 	bne.w	80034b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2319      	movs	r3, #25
 80032f6:	2201      	movs	r2, #1
 80032f8:	4970      	ldr	r1, [pc, #448]	@ (80034bc <HAL_I2C_Master_Transmit+0x1f4>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fa92 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	e0d3      	b.n	80034b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_I2C_Master_Transmit+0x50>
 8003314:	2302      	movs	r3, #2
 8003316:	e0cc      	b.n	80034b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d007      	beq.n	800333e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800334c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2221      	movs	r2, #33	@ 0x21
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2210      	movs	r2, #16
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	893a      	ldrh	r2, [r7, #8]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a50      	ldr	r2, [pc, #320]	@ (80034c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800337e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f9ca 	bl	8003720 <I2C_MasterRequestWrite>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e08d      	b.n	80034b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033ac:	e066      	b.n	800347c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fb50 	bl	8003a58 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d107      	bne.n	80033d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06b      	b.n	80034b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d11b      	bne.n	8003450 <HAL_I2C_Master_Transmit+0x188>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d017      	beq.n	8003450 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	6a39      	ldr	r1, [r7, #32]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fb47 	bl	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	2b04      	cmp	r3, #4
 8003466:	d107      	bne.n	8003478 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003476:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01a      	b.n	80034b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d194      	bne.n	80033ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	00100002 	.word	0x00100002
 80034c0:	ffff0000 	.word	0xffff0000

080034c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7fe fc48 	bl	8001d68 <HAL_GetTick>
 80034d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	f040 8111 	bne.w	800370e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2319      	movs	r3, #25
 80034f2:	2201      	movs	r2, #1
 80034f4:	4988      	ldr	r1, [pc, #544]	@ (8003718 <HAL_I2C_IsDeviceReady+0x254>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f994 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	e104      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_I2C_IsDeviceReady+0x50>
 8003510:	2302      	movs	r3, #2
 8003512:	e0fd      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d007      	beq.n	800353a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2224      	movs	r2, #36	@ 0x24
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a70      	ldr	r2, [pc, #448]	@ (800371c <HAL_I2C_IsDeviceReady+0x258>)
 800355c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800356c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2200      	movs	r2, #0
 8003576:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f952 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003594:	d103      	bne.n	800359e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800359c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0b6      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fbd9 	bl	8001d68 <HAL_GetTick>
 80035b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035e6:	e025      	b.n	8003634 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fe fbbe 	bl	8001d68 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <HAL_I2C_IsDeviceReady+0x13a>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22a0      	movs	r2, #160	@ 0xa0
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2ba0      	cmp	r3, #160	@ 0xa0
 800363e:	d005      	beq.n	800364c <HAL_I2C_IsDeviceReady+0x188>
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_I2C_IsDeviceReady+0x188>
 8003646:	7dbb      	ldrb	r3, [r7, #22]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0cd      	beq.n	80035e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d129      	bne.n	80036b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003670:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2319      	movs	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	4921      	ldr	r1, [pc, #132]	@ (8003718 <HAL_I2C_IsDeviceReady+0x254>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8c6 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e036      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e02c      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	490f      	ldr	r1, [pc, #60]	@ (8003718 <HAL_I2C_IsDeviceReady+0x254>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f8a2 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e012      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	f4ff af32 	bcc.w	800355e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	00100002 	.word	0x00100002
 800371c:	ffff0000 	.word	0xffff0000

08003720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d006      	beq.n	800374a <I2C_MasterRequestWrite+0x2a>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d003      	beq.n	800374a <I2C_MasterRequestWrite+0x2a>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003748:	d108      	bne.n	800375c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e00b      	b.n	8003774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	2b12      	cmp	r3, #18
 8003762:	d107      	bne.n	8003774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f84f 	bl	8003824 <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379a:	d103      	bne.n	80037a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e035      	b.n	8003814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b0:	d108      	bne.n	80037c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037b2:	897b      	ldrh	r3, [r7, #10]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037c0:	611a      	str	r2, [r3, #16]
 80037c2:	e01b      	b.n	80037fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037c4:	897b      	ldrh	r3, [r7, #10]
 80037c6:	11db      	asrs	r3, r3, #7
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f003 0306 	and.w	r3, r3, #6
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f063 030f 	orn	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	490e      	ldr	r1, [pc, #56]	@ (800381c <I2C_MasterRequestWrite+0xfc>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f898 	bl	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e010      	b.n	8003814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4907      	ldr	r1, [pc, #28]	@ (8003820 <I2C_MasterRequestWrite+0x100>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f888 	bl	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	00010008 	.word	0x00010008
 8003820:	00010002 	.word	0x00010002

08003824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003834:	e048      	b.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d044      	beq.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe fa93 	bl	8001d68 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d139      	bne.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10d      	bne.n	800387a <I2C_WaitOnFlagUntilTimeout+0x56>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	43da      	mvns	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	e00c      	b.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x70>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	43da      	mvns	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	429a      	cmp	r2, r3
 8003898:	d116      	bne.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e023      	b.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	0c1b      	lsrs	r3, r3, #16
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10d      	bne.n	80038ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	e00c      	b.n	8003908 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	43da      	mvns	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	429a      	cmp	r2, r3
 800390c:	d093      	beq.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003926:	e071      	b.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003936:	d123      	bne.n	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003946:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f043 0204 	orr.w	r2, r3, #4
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e067      	b.n	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d041      	beq.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fe f9ee 	bl	8001d68 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d136      	bne.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10c      	bne.n	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	e00b      	b.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	43da      	mvns	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4013      	ands	r3, r2
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e021      	b.n	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	0c1b      	lsrs	r3, r3, #16
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10c      	bne.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e00b      	b.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f af6d 	bne.w	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a64:	e034      	b.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f886 	bl	8003b78 <I2C_IsAcknowledgeFailed>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e034      	b.n	8003ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d028      	beq.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fe f973 	bl	8001d68 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11d      	bne.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	d016      	beq.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b80      	cmp	r3, #128	@ 0x80
 8003adc:	d1c3      	bne.n	8003a66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af4:	e034      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f83e 	bl	8003b78 <I2C_IsAcknowledgeFailed>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e034      	b.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d028      	beq.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe f92b 	bl	8001d68 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11d      	bne.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d016      	beq.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e007      	b.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d1c3      	bne.n	8003af6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8e:	d11b      	bne.n	8003bc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e272      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8087 	beq.w	8003d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf4:	4b92      	ldr	r3, [pc, #584]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d00c      	beq.n	8003c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c00:	4b8f      	ldr	r3, [pc, #572]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d112      	bne.n	8003c32 <HAL_RCC_OscConfig+0x5e>
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d10b      	bne.n	8003c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1a:	4b89      	ldr	r3, [pc, #548]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d06c      	beq.n	8003d00 <HAL_RCC_OscConfig+0x12c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d168      	bne.n	8003d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e24c      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x76>
 8003c3c:	4b80      	ldr	r3, [pc, #512]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7f      	ldr	r2, [pc, #508]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	e02e      	b.n	8003ca8 <HAL_RCC_OscConfig+0xd4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x98>
 8003c52:	4b7b      	ldr	r3, [pc, #492]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7a      	ldr	r2, [pc, #488]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b78      	ldr	r3, [pc, #480]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a77      	ldr	r2, [pc, #476]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e01d      	b.n	8003ca8 <HAL_RCC_OscConfig+0xd4>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0xbc>
 8003c76:	4b72      	ldr	r3, [pc, #456]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a71      	ldr	r2, [pc, #452]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b6f      	ldr	r3, [pc, #444]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6e      	ldr	r2, [pc, #440]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0xd4>
 8003c90:	4b6b      	ldr	r3, [pc, #428]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6a      	ldr	r2, [pc, #424]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b68      	ldr	r3, [pc, #416]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a67      	ldr	r2, [pc, #412]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f85a 	bl	8001d68 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f856 	bl	8001d68 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e200      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b5d      	ldr	r3, [pc, #372]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xe4>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fe f846 	bl	8001d68 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fe f842 	bl	8001d68 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	@ 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1ec      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf2:	4b53      	ldr	r3, [pc, #332]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x10c>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d063      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d1a:	4b49      	ldr	r3, [pc, #292]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d11c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x18c>
 8003d26:	4b46      	ldr	r3, [pc, #280]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	4b43      	ldr	r3, [pc, #268]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_RCC_OscConfig+0x176>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e1c0      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4939      	ldr	r1, [pc, #228]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	e03a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d68:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fffb 	bl	8001d68 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd fff7 	bl	8001d68 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1a1      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d88:	4b2d      	ldr	r3, [pc, #180]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4927      	ldr	r1, [pc, #156]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
 8003da8:	e015      	b.n	8003dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003daa:	4b26      	ldr	r3, [pc, #152]	@ (8003e44 <HAL_RCC_OscConfig+0x270>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd ffda 	bl	8001d68 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db8:	f7fd ffd6 	bl	8001d68 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e180      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d03a      	beq.n	8003e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d019      	beq.n	8003e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fd ffba 	bl	8001d68 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df8:	f7fd ffb6 	bl	8001d68 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e160      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f000 face 	bl	80043b8 <RCC_Delay>
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fd ffa0 	bl	8001d68 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2a:	e00f      	b.n	8003e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7fd ff9c 	bl	8001d68 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d908      	bls.n	8003e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e146      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	42420000 	.word	0x42420000
 8003e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4c:	4b92      	ldr	r3, [pc, #584]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e9      	bne.n	8003e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80a6 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b88      	ldr	r3, [pc, #544]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4a87      	ldr	r2, [pc, #540]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	61d3      	str	r3, [r2, #28]
 8003e82:	4b85      	ldr	r3, [pc, #532]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b82      	ldr	r3, [pc, #520]	@ (800409c <HAL_RCC_OscConfig+0x4c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800409c <HAL_RCC_OscConfig+0x4c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800409c <HAL_RCC_OscConfig+0x4c8>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd ff5d 	bl	8001d68 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd ff59 	bl	8001d68 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	@ 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e103      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	4b75      	ldr	r3, [pc, #468]	@ (800409c <HAL_RCC_OscConfig+0x4c8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x312>
 8003ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x36e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x334>
 8003eee:	4b6a      	ldr	r3, [pc, #424]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4a69      	ldr	r2, [pc, #420]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6213      	str	r3, [r2, #32]
 8003efa:	4b67      	ldr	r3, [pc, #412]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a66      	ldr	r2, [pc, #408]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6213      	str	r3, [r2, #32]
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x36e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x356>
 8003f10:	4b61      	ldr	r3, [pc, #388]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	4a60      	ldr	r2, [pc, #384]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6213      	str	r3, [r2, #32]
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4a5d      	ldr	r2, [pc, #372]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6213      	str	r3, [r2, #32]
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x36e>
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6213      	str	r3, [r2, #32]
 8003f36:	4b58      	ldr	r3, [pc, #352]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	4a57      	ldr	r2, [pc, #348]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd ff0d 	bl	8001d68 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd ff09 	bl	8001d68 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0b1      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4b      	ldr	r3, [pc, #300]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x37e>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fd fef7 	bl	8001d68 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd fef3 	bl	8001d68 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e09b      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b40      	ldr	r3, [pc, #256]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	4a3b      	ldr	r2, [pc, #236]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8087 	beq.w	80040ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	4b36      	ldr	r3, [pc, #216]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d061      	beq.n	800408c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d146      	bne.n	800405e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b33      	ldr	r3, [pc, #204]	@ (80040a0 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fec7 	bl	8001d68 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fec3 	bl	8001d68 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e06d      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff0:	4b29      	ldr	r3, [pc, #164]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004004:	d108      	bne.n	8004018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004006:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4921      	ldr	r1, [pc, #132]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004018:	4b1f      	ldr	r3, [pc, #124]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a19      	ldr	r1, [r3, #32]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	430b      	orrs	r3, r1
 800402a:	491b      	ldr	r1, [pc, #108]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fd fe97 	bl	8001d68 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fd fe93 	bl	8001d68 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e03d      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x46a>
 800405c:	e035      	b.n	80040ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <HAL_RCC_OscConfig+0x4cc>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fd fe80 	bl	8001d68 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd fe7c 	bl	8001d68 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e026      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x498>
 800408a:	e01e      	b.n	80040ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e019      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
 80040a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_RCC_OscConfig+0x500>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000

080040d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0d0      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b67      	ldr	r3, [pc, #412]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 0207 	bic.w	r2, r3, #7
 8004102:	4965      	ldr	r1, [pc, #404]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b63      	ldr	r3, [pc, #396]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b8      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004134:	4b59      	ldr	r3, [pc, #356]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a58      	ldr	r2, [pc, #352]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800413e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800414c:	4b53      	ldr	r3, [pc, #332]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a52      	ldr	r2, [pc, #328]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b50      	ldr	r3, [pc, #320]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	494d      	ldr	r1, [pc, #308]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d040      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b47      	ldr	r3, [pc, #284]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d115      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07f      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	4b41      	ldr	r3, [pc, #260]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e073      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	4b3d      	ldr	r3, [pc, #244]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06b      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b39      	ldr	r3, [pc, #228]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4936      	ldr	r1, [pc, #216]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c8:	f7fd fdce 	bl	8001d68 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd fdca 	bl	8001d68 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e053      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b2d      	ldr	r3, [pc, #180]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b27      	ldr	r3, [pc, #156]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d210      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 0207 	bic.w	r2, r3, #7
 800420e:	4922      	ldr	r1, [pc, #136]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b20      	ldr	r3, [pc, #128]	@ (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e032      	b.n	800428e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4916      	ldr	r1, [pc, #88]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004242:	4313      	orrs	r3, r2
 8004244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004252:	4b12      	ldr	r3, [pc, #72]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	490e      	ldr	r1, [pc, #56]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004266:	f000 f821 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	490a      	ldr	r1, [pc, #40]	@ (80042a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	4a09      	ldr	r2, [pc, #36]	@ (80042a4 <HAL_RCC_ClockConfig+0x1cc>)
 8004280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004282:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fd2c 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40022000 	.word	0x40022000
 800429c:	40021000 	.word	0x40021000
 80042a0:	08006d00 	.word	0x08006d00
 80042a4:	20000000 	.word	0x20000000
 80042a8:	2000000c 	.word	0x2000000c

080042ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x94>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x30>
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x36>
 80042da:	e027      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042dc:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x98>)
 80042de:	613b      	str	r3, [r7, #16]
      break;
 80042e0:	e027      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	0c9b      	lsrs	r3, r3, #18
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
 80042ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x94>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	0c5b      	lsrs	r3, r3, #17
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	4a11      	ldr	r2, [pc, #68]	@ (800434c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004306:	5cd3      	ldrb	r3, [r2, r3]
 8004308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a0d      	ldr	r2, [pc, #52]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x98>)
 800430e:	fb03 f202 	mul.w	r2, r3, r2
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e004      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	613b      	str	r3, [r7, #16]
      break;
 800432a:	e002      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x98>)
 800432e:	613b      	str	r3, [r7, #16]
      break;
 8004330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004332:	693b      	ldr	r3, [r7, #16]
}
 8004334:	4618      	mov	r0, r3
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	007a1200 	.word	0x007a1200
 8004348:	08006d18 	.word	0x08006d18
 800434c:	08006d28 	.word	0x08006d28
 8004350:	003d0900 	.word	0x003d0900

08004354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004358:	4b02      	ldr	r3, [pc, #8]	@ (8004364 <HAL_RCC_GetHCLKFreq+0x10>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	20000000 	.word	0x20000000

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800436c:	f7ff fff2 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	@ (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	08006d10 	.word	0x08006d10

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffde 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	0adb      	lsrs	r3, r3, #11
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	@ (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40021000 	.word	0x40021000
 80043b4:	08006d10 	.word	0x08006d10

080043b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <RCC_Delay+0x34>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <RCC_Delay+0x38>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0a5b      	lsrs	r3, r3, #9
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043d4:	bf00      	nop
  }
  while (Delay --);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f9      	bne.n	80043d4 <RCC_Delay+0x1c>
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	20000000 	.word	0x20000000
 80043f0:	10624dd3 	.word	0x10624dd3

080043f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d07d      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004414:	4b4f      	ldr	r3, [pc, #316]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004420:	4b4c      	ldr	r3, [pc, #304]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4a4b      	ldr	r2, [pc, #300]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442a:	61d3      	str	r3, [r2, #28]
 800442c:	4b49      	ldr	r3, [pc, #292]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b46      	ldr	r3, [pc, #280]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d118      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004448:	4b43      	ldr	r3, [pc, #268]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a42      	ldr	r2, [pc, #264]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800444e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004454:	f7fd fc88 	bl	8001d68 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	e008      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445c:	f7fd fc84 	bl	8001d68 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e06d      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b3a      	ldr	r3, [pc, #232]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800447a:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004482:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d02e      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d027      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004498:	4b2e      	ldr	r3, [pc, #184]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044a2:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a8:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044ae:	4a29      	ldr	r2, [pc, #164]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d014      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fd fc53 	bl	8001d68 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	e00a      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fd fc4f 	bl	8001d68 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e036      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ee      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4917      	ldr	r1, [pc, #92]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004500:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4a13      	ldr	r2, [pc, #76]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004518:	4b0e      	ldr	r3, [pc, #56]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	490b      	ldr	r1, [pc, #44]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004536:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4904      	ldr	r1, [pc, #16]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	40007000 	.word	0x40007000
 800455c:	42420440 	.word	0x42420440

08004560 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b10      	cmp	r3, #16
 8004586:	f200 808a 	bhi.w	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d045      	beq.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d075      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004596:	e082      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004598:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800459e:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d07b      	beq.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	0c9b      	lsrs	r3, r3, #18
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	4a41      	ldr	r2, [pc, #260]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80045b4:	5cd3      	ldrb	r3, [r2, r3]
 80045b6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045c2:	4b3c      	ldr	r3, [pc, #240]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	0c5b      	lsrs	r3, r3, #17
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	4a3b      	ldr	r2, [pc, #236]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045dc:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e004      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4a34      	ldr	r2, [pc, #208]	@ (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045f8:	4b2e      	ldr	r3, [pc, #184]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004604:	d102      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	61bb      	str	r3, [r7, #24]
      break;
 800460a:	e04a      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4a2d      	ldr	r2, [pc, #180]	@ (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	61bb      	str	r3, [r7, #24]
      break;
 800461a:	e042      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800461c:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462c:	d108      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e01f      	b.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464a:	d109      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800464c:	4b19      	ldr	r3, [pc, #100]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004658:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e00f      	b.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800466a:	d11c      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004678:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800467c:	61bb      	str	r3, [r7, #24]
      break;
 800467e:	e012      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004680:	e011      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004682:	f7ff fe85 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8004686:	4602      	mov	r2, r0
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0b9b      	lsrs	r3, r3, #14
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	61bb      	str	r3, [r7, #24]
      break;
 800469c:	e004      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046a6:	bf00      	nop
    }
  }
  return (frequency);
 80046a8:	69bb      	ldr	r3, [r7, #24]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000
 80046b8:	08006d2c 	.word	0x08006d2c
 80046bc:	08006d3c 	.word	0x08006d3c
 80046c0:	007a1200 	.word	0x007a1200
 80046c4:	003d0900 	.word	0x003d0900
 80046c8:	aaaaaaab 	.word	0xaaaaaaab

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e041      	b.n	8004762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc fc12 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fb86 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e041      	b.n	8004800 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f839 	bl	8004808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 fb37 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d122      	bne.n	8004876 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d11b      	bne.n	8004876 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f06f 0202 	mvn.w	r2, #2
 8004846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fac2 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004862:	e005      	b.n	8004870 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fab5 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fac4 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b04      	cmp	r3, #4
 8004882:	d122      	bne.n	80048ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d11b      	bne.n	80048ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0204 	mvn.w	r2, #4
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa98 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 80048b6:	e005      	b.n	80048c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa8b 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa9a 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d122      	bne.n	800491e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d11b      	bne.n	800491e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0208 	mvn.w	r2, #8
 80048ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2204      	movs	r2, #4
 80048f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa6e 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 800490a:	e005      	b.n	8004918 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fa61 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa70 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d122      	bne.n	8004972 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b10      	cmp	r3, #16
 8004938:	d11b      	bne.n	8004972 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0210 	mvn.w	r2, #16
 8004942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2208      	movs	r2, #8
 8004948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa44 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 800495e:	e005      	b.n	800496c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa37 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa46 	bl	8004df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10e      	bne.n	800499e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b01      	cmp	r3, #1
 800498c:	d107      	bne.n	800499e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f06f 0201 	mvn.w	r2, #1
 8004996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fa12 	bl	8004dc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b80      	cmp	r3, #128	@ 0x80
 80049aa:	d10e      	bne.n	80049ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b6:	2b80      	cmp	r3, #128	@ 0x80
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fdf3 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b40      	cmp	r3, #64	@ 0x40
 80049d6:	d10e      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b40      	cmp	r3, #64	@ 0x40
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa0a 	bl	8004e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d10e      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d107      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0220 	mvn.w	r2, #32
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fdbe 	bl	800559e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ae      	b.n	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	f200 809f 	bhi.w	8004b98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004b99 	.word	0x08004b99
 8004a68:	08004b99 	.word	0x08004b99
 8004a6c:	08004b99 	.word	0x08004b99
 8004a70:	08004ad5 	.word	0x08004ad5
 8004a74:	08004b99 	.word	0x08004b99
 8004a78:	08004b99 	.word	0x08004b99
 8004a7c:	08004b99 	.word	0x08004b99
 8004a80:	08004b17 	.word	0x08004b17
 8004a84:	08004b99 	.word	0x08004b99
 8004a88:	08004b99 	.word	0x08004b99
 8004a8c:	08004b99 	.word	0x08004b99
 8004a90:	08004b57 	.word	0x08004b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa20 	bl	8004ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0204 	bic.w	r2, r2, #4
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	619a      	str	r2, [r3, #24]
      break;
 8004ad2:	e064      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa66 	bl	8004fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	021a      	lsls	r2, r3, #8
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	619a      	str	r2, [r3, #24]
      break;
 8004b14:	e043      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 faaf 	bl	8005080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0208 	orr.w	r2, r2, #8
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0204 	bic.w	r2, r2, #4
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
      break;
 8004b54:	e023      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 faf9 	bl	8005154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	021a      	lsls	r2, r3, #8
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	61da      	str	r2, [r3, #28]
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIM_ConfigClockSource+0x1c>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e0b4      	b.n	8004d36 <HAL_TIM_ConfigClockSource+0x186>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c04:	d03e      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0xd4>
 8004c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c0a:	f200 8087 	bhi.w	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c12:	f000 8086 	beq.w	8004d22 <HAL_TIM_ConfigClockSource+0x172>
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1a:	d87f      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b70      	cmp	r3, #112	@ 0x70
 8004c1e:	d01a      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0xa6>
 8004c20:	2b70      	cmp	r3, #112	@ 0x70
 8004c22:	d87b      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b60      	cmp	r3, #96	@ 0x60
 8004c26:	d050      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x11a>
 8004c28:	2b60      	cmp	r3, #96	@ 0x60
 8004c2a:	d877      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b50      	cmp	r3, #80	@ 0x50
 8004c2e:	d03c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0xfa>
 8004c30:	2b50      	cmp	r3, #80	@ 0x50
 8004c32:	d873      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d058      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x13a>
 8004c38:	2b40      	cmp	r3, #64	@ 0x40
 8004c3a:	d86f      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b30      	cmp	r3, #48	@ 0x30
 8004c3e:	d064      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	2b30      	cmp	r3, #48	@ 0x30
 8004c42:	d86b      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d060      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d867      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d05c      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d05a      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x15a>
 8004c54:	e062      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c66:	f000 fbcb 	bl	8005400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	609a      	str	r2, [r3, #8]
      break;
 8004c82:	e04f      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c94:	f000 fbb4 	bl	8005400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ca6:	609a      	str	r2, [r3, #8]
      break;
 8004ca8:	e03c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 fb2b 	bl	8005312 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2150      	movs	r1, #80	@ 0x50
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fb82 	bl	80053cc <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e02c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fb49 	bl	800536e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2160      	movs	r1, #96	@ 0x60
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fb72 	bl	80053cc <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e01c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f000 fb0b 	bl	8005312 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2140      	movs	r1, #64	@ 0x40
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fb62 	bl	80053cc <TIM_ITRx_SetConfig>
      break;
 8004d08:	e00c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f000 fb59 	bl	80053cc <TIM_ITRx_SetConfig>
      break;
 8004d1a:	e003      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d20:	e000      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e031      	b.n	8004dba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa41 	bl	80051f0 <TIM_SlaveTimer_SetConfig>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e018      	b.n	8004dba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004da6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <TIM_Base_SetConfig+0xb8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <TIM_Base_SetConfig+0x30>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0x30>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a26      	ldr	r2, [pc, #152]	@ (8004ed8 <TIM_Base_SetConfig+0xbc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0x30>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a25      	ldr	r2, [pc, #148]	@ (8004edc <TIM_Base_SetConfig+0xc0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d108      	bne.n	8004e5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed4 <TIM_Base_SetConfig+0xb8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00b      	beq.n	8004e7e <TIM_Base_SetConfig+0x62>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6c:	d007      	beq.n	8004e7e <TIM_Base_SetConfig+0x62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a19      	ldr	r2, [pc, #100]	@ (8004ed8 <TIM_Base_SetConfig+0xbc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_Base_SetConfig+0x62>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <TIM_Base_SetConfig+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d108      	bne.n	8004e90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a07      	ldr	r2, [pc, #28]	@ (8004ed4 <TIM_Base_SetConfig+0xb8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800

08004ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 0201 	bic.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0302 	bic.w	r3, r3, #2
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <TIM_OC1_SetConfig+0xc8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10c      	bne.n	8004f56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0308 	bic.w	r3, r3, #8
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a13      	ldr	r2, [pc, #76]	@ (8004fa8 <TIM_OC1_SetConfig+0xc8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00

08004fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f023 0210 	bic.w	r2, r3, #16
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0320 	bic.w	r3, r3, #32
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1d      	ldr	r2, [pc, #116]	@ (800507c <TIM_OC2_SetConfig+0xd0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10d      	bne.n	8005028 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005026:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a14      	ldr	r2, [pc, #80]	@ (800507c <TIM_OC2_SetConfig+0xd0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d113      	bne.n	8005058 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00

08005080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <TIM_OC3_SetConfig+0xd0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d10d      	bne.n	80050fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <TIM_OC3_SetConfig+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d113      	bne.n	800512a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	621a      	str	r2, [r3, #32]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00

08005154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800518a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800519e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0f      	ldr	r2, [pc, #60]	@ (80051ec <TIM_OC4_SetConfig+0x98>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d109      	bne.n	80051c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	019b      	lsls	r3, r3, #6
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00

080051f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 0307 	bic.w	r3, r3, #7
 800521e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b70      	cmp	r3, #112	@ 0x70
 8005238:	d01a      	beq.n	8005270 <TIM_SlaveTimer_SetConfig+0x80>
 800523a:	2b70      	cmp	r3, #112	@ 0x70
 800523c:	d860      	bhi.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
 800523e:	2b60      	cmp	r3, #96	@ 0x60
 8005240:	d054      	beq.n	80052ec <TIM_SlaveTimer_SetConfig+0xfc>
 8005242:	2b60      	cmp	r3, #96	@ 0x60
 8005244:	d85c      	bhi.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
 8005246:	2b50      	cmp	r3, #80	@ 0x50
 8005248:	d046      	beq.n	80052d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800524a:	2b50      	cmp	r3, #80	@ 0x50
 800524c:	d858      	bhi.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	d019      	beq.n	8005286 <TIM_SlaveTimer_SetConfig+0x96>
 8005252:	2b40      	cmp	r3, #64	@ 0x40
 8005254:	d854      	bhi.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
 8005256:	2b30      	cmp	r3, #48	@ 0x30
 8005258:	d055      	beq.n	8005306 <TIM_SlaveTimer_SetConfig+0x116>
 800525a:	2b30      	cmp	r3, #48	@ 0x30
 800525c:	d850      	bhi.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
 800525e:	2b20      	cmp	r3, #32
 8005260:	d051      	beq.n	8005306 <TIM_SlaveTimer_SetConfig+0x116>
 8005262:	2b20      	cmp	r3, #32
 8005264:	d84c      	bhi.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d04d      	beq.n	8005306 <TIM_SlaveTimer_SetConfig+0x116>
 800526a:	2b10      	cmp	r3, #16
 800526c:	d04b      	beq.n	8005306 <TIM_SlaveTimer_SetConfig+0x116>
 800526e:	e047      	b.n	8005300 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005280:	f000 f8be 	bl	8005400 <TIM_ETR_SetConfig>
      break;
 8005284:	e040      	b.n	8005308 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b05      	cmp	r3, #5
 800528c:	d101      	bne.n	8005292 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e03b      	b.n	800530a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
      break;
 80052d6:	e017      	b.n	8005308 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e4:	461a      	mov	r2, r3
 80052e6:	f000 f814 	bl	8005312 <TIM_TI1_ConfigInputStage>
      break;
 80052ea:	e00d      	b.n	8005308 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f8:	461a      	mov	r2, r3
 80052fa:	f000 f838 	bl	800536e <TIM_TI2_ConfigInputStage>
      break;
 80052fe:	e003      	b.n	8005308 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	e000      	b.n	8005308 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005306:	bf00      	nop
  }

  return status;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005312:	b480      	push	{r7}
 8005314:	b087      	sub	sp, #28
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0201 	bic.w	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800533c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 030a 	bic.w	r3, r3, #10
 800534e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536e:	b480      	push	{r7}
 8005370:	b087      	sub	sp, #28
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f023 0210 	bic.w	r2, r3, #16
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	031b      	lsls	r3, r3, #12
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f043 0307 	orr.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	609a      	str	r2, [r3, #8]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800541a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
	...

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e046      	b.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a4:	d009      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a10      	ldr	r2, [pc, #64]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10c      	bne.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005514:	2302      	movs	r3, #2
 8005516:	e03d      	b.n	8005594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e042      	b.n	800565a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fb fd47 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2224      	movs	r2, #36	@ 0x24
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005604:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fdc6 	bl	8006198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800561a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800562a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800563a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b08a      	sub	sp, #40	@ 0x28
 8005666:	af02      	add	r7, sp, #8
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b20      	cmp	r3, #32
 8005680:	d16d      	bne.n	800575e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_Transmit+0x2c>
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e066      	b.n	8005760 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2221      	movs	r2, #33	@ 0x21
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a0:	f7fc fb62 	bl	8001d68 <HAL_GetTick>
 80056a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ba:	d108      	bne.n	80056ce <HAL_UART_Transmit+0x6c>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e003      	b.n	80056d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056d6:	e02a      	b.n	800572e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	2180      	movs	r1, #128	@ 0x80
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fb15 	bl	8005d12 <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e036      	b.n	8005760 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005706:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	3302      	adds	r3, #2
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e007      	b.n	8005720 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3301      	adds	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1cf      	bne.n	80056d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	2140      	movs	r1, #64	@ 0x40
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fae5 	bl	8005d12 <UART_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e006      	b.n	8005760 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e000      	b.n	8005760 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800575e:	2302      	movs	r3, #2
  }
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b20      	cmp	r3, #32
 8005780:	d112      	bne.n	80057a8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_UART_Receive_IT+0x26>
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e00b      	b.n	80057aa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	461a      	mov	r2, r3
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fb25 	bl	8005dee <UART_Start_Receive_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	e000      	b.n	80057aa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b0ba      	sub	sp, #232	@ 0xe8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10f      	bne.n	800581a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_UART_IRQHandler+0x66>
 8005806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fc01 	bl	800601a <UART_Receive_IT>
      return;
 8005818:	e25b      	b.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800581a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80de 	beq.w	80059e0 <HAL_UART_IRQHandler+0x22c>
 8005824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80d1 	beq.w	80059e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_UART_IRQHandler+0xae>
 800584a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_UART_IRQHandler+0xd2>
 800586e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f043 0202 	orr.w	r2, r3, #2
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_UART_IRQHandler+0xf6>
 8005892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	f043 0204 	orr.w	r2, r3, #4
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d011      	beq.n	80058da <HAL_UART_IRQHandler+0x126>
 80058b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d105      	bne.n	80058ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d2:	f043 0208 	orr.w	r2, r3, #8
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 81f2 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x14e>
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb8c 	bl	800601a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <HAL_UART_IRQHandler+0x17a>
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d04f      	beq.n	80059ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa96 	bl	8005e60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d041      	beq.n	80059c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3314      	adds	r3, #20
 8005948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800595c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800596e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800597a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1d9      	bne.n	8005942 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d013      	beq.n	80059be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b94 <HAL_UART_IRQHandler+0x3e0>)
 800599c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fd f938 	bl	8002c18 <HAL_DMA_Abort_IT>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059b8:	4610      	mov	r0, r2
 80059ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059bc:	e00e      	b.n	80059dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f993 	bl	8005cea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	e00a      	b.n	80059dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f98f 	bl	8005cea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	e006      	b.n	80059dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f98b 	bl	8005cea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059da:	e175      	b.n	8005cc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	bf00      	nop
    return;
 80059de:	e173      	b.n	8005cc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	f040 814f 	bne.w	8005c88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8148 	beq.w	8005c88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8141 	beq.w	8005c88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80b6 	beq.w	8005b98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8145 	beq.w	8005ccc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	f080 813e 	bcs.w	8005ccc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	f000 8088 	beq.w	8005b74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1d9      	bne.n	8005a64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ac0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ad4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ad8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005adc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ae6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e1      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e3      	bne.n	8005aec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e3      	bne.n	8005b32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd f817 	bl	8002ba2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8b6 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b90:	e09c      	b.n	8005ccc <HAL_UART_IRQHandler+0x518>
 8005b92:	bf00      	nop
 8005b94:	08005f25 	.word	0x08005f25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 808e 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8089 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005be2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005be4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e3      	bne.n	8005bbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	623b      	str	r3, [r7, #32]
   return(result);
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e3      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c60:	61fa      	str	r2, [r7, #28]
 8005c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e3      	bne.n	8005c3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f83b 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c86:	e023      	b.n	8005cd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x4f4>
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f953 	bl	8005f4c <UART_Transmit_IT>
    return;
 8005ca6:	e014      	b.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f992 	bl	8005fea <UART_EndTransmit_IT>
    return;
 8005cc6:	e004      	b.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005cc8:	bf00      	nop
 8005cca:	e002      	b.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ccc:	bf00      	nop
 8005cce:	e000      	b.n	8005cd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cd0:	bf00      	nop
  }
}
 8005cd2:	37e8      	adds	r7, #232	@ 0xe8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b090      	sub	sp, #64	@ 0x40
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d22:	e050      	b.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d04c      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d32:	f7fc f819 	bl	8001d68 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d241      	bcs.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d62:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d64:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e5      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d96:	623a      	str	r2, [r7, #32]
 8005d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e5      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e00f      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	bf0c      	ite	eq
 8005dd6:	2301      	moveq	r3, #1
 8005dd8:	2300      	movne	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d09f      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3740      	adds	r7, #64	@ 0x40
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	88fa      	ldrh	r2, [r7, #6]
 8005e06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2222      	movs	r2, #34	@ 0x22
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0220 	orr.w	r2, r2, #32
 8005e52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b095      	sub	sp, #84	@ 0x54
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e5      	bne.n	8005e68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d119      	bne.n	8005f0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	330c      	adds	r3, #12
 8005ef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef8:	61ba      	str	r2, [r7, #24]
 8005efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6979      	ldr	r1, [r7, #20]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e5      	bne.n	8005ed8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f1a:	bf00      	nop
 8005f1c:	3754      	adds	r7, #84	@ 0x54
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff fed3 	bl	8005cea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b21      	cmp	r3, #33	@ 0x21
 8005f5e:	d13e      	bne.n	8005fde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f68:	d114      	bne.n	8005f94 <UART_Transmit_IT+0x48>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d110      	bne.n	8005f94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]
 8005f92:	e008      	b.n	8005fa6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	1c59      	adds	r1, r3, #1
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6211      	str	r1, [r2, #32]
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006000:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fe64 	bl	8005cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08c      	sub	sp, #48	@ 0x30
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b22      	cmp	r3, #34	@ 0x22
 800602c:	f040 80ae 	bne.w	800618c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006038:	d117      	bne.n	800606a <UART_Receive_IT+0x50>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d113      	bne.n	800606a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006058:	b29a      	uxth	r2, r3
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	@ 0x28
 8006068:	e026      	b.n	80060b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607c:	d007      	beq.n	800608e <UART_Receive_IT+0x74>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <UART_Receive_IT+0x82>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e008      	b.n	80060ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d15d      	bne.n	8006188 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0220 	bic.w	r2, r2, #32
 80060da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	2b01      	cmp	r3, #1
 8006110:	d135      	bne.n	800617e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	613b      	str	r3, [r7, #16]
   return(result);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 0310 	bic.w	r3, r3, #16
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006138:	623a      	str	r2, [r7, #32]
 800613a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	61bb      	str	r3, [r7, #24]
   return(result);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b10      	cmp	r3, #16
 8006158:	d10a      	bne.n	8006170 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fdc0 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
 800617c:	e002      	b.n	8006184 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb fd40 	bl	8001c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e002      	b.n	800618e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3730      	adds	r7, #48	@ 0x30
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80061d2:	f023 030c 	bic.w	r3, r3, #12
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	430b      	orrs	r3, r1
 80061de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <UART_SetConfig+0x114>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d103      	bne.n	8006208 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006200:	f7fe f8c6 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	e002      	b.n	800620e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fe f8ae 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 800620c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009a      	lsls	r2, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	4a22      	ldr	r2, [pc, #136]	@ (80062b0 <UART_SetConfig+0x118>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	0119      	lsls	r1, r3, #4
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009a      	lsls	r2, r3, #2
 8006238:	441a      	add	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	fbb2 f2f3 	udiv	r2, r2, r3
 8006244:	4b1a      	ldr	r3, [pc, #104]	@ (80062b0 <UART_SetConfig+0x118>)
 8006246:	fba3 0302 	umull	r0, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2064      	movs	r0, #100	@ 0x64
 800624e:	fb00 f303 	mul.w	r3, r0, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	3332      	adds	r3, #50	@ 0x32
 8006258:	4a15      	ldr	r2, [pc, #84]	@ (80062b0 <UART_SetConfig+0x118>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006264:	4419      	add	r1, r3
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009a      	lsls	r2, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	fbb2 f2f3 	udiv	r2, r2, r3
 800627c:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <UART_SetConfig+0x118>)
 800627e:	fba3 0302 	umull	r0, r3, r3, r2
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2064      	movs	r0, #100	@ 0x64
 8006286:	fb00 f303 	mul.w	r3, r0, r3
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	3332      	adds	r3, #50	@ 0x32
 8006290:	4a07      	ldr	r2, [pc, #28]	@ (80062b0 <UART_SetConfig+0x118>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	440a      	add	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40013800 	.word	0x40013800
 80062b0:	51eb851f 	.word	0x51eb851f

080062b4 <siprintf>:
 80062b4:	b40e      	push	{r1, r2, r3}
 80062b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062ba:	b500      	push	{lr}
 80062bc:	b09c      	sub	sp, #112	@ 0x70
 80062be:	ab1d      	add	r3, sp, #116	@ 0x74
 80062c0:	9002      	str	r0, [sp, #8]
 80062c2:	9006      	str	r0, [sp, #24]
 80062c4:	9107      	str	r1, [sp, #28]
 80062c6:	9104      	str	r1, [sp, #16]
 80062c8:	4808      	ldr	r0, [pc, #32]	@ (80062ec <siprintf+0x38>)
 80062ca:	4909      	ldr	r1, [pc, #36]	@ (80062f0 <siprintf+0x3c>)
 80062cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d0:	9105      	str	r1, [sp, #20]
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	a902      	add	r1, sp, #8
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	f000 f992 	bl	8006600 <_svfiprintf_r>
 80062dc:	2200      	movs	r2, #0
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	b01c      	add	sp, #112	@ 0x70
 80062e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e8:	b003      	add	sp, #12
 80062ea:	4770      	bx	lr
 80062ec:	20000014 	.word	0x20000014
 80062f0:	ffff0208 	.word	0xffff0208

080062f4 <memset>:
 80062f4:	4603      	mov	r3, r0
 80062f6:	4402      	add	r2, r0
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d100      	bne.n	80062fe <memset+0xa>
 80062fc:	4770      	bx	lr
 80062fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006302:	e7f9      	b.n	80062f8 <memset+0x4>

08006304 <__errno>:
 8006304:	4b01      	ldr	r3, [pc, #4]	@ (800630c <__errno+0x8>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000014 	.word	0x20000014

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	2600      	movs	r6, #0
 8006314:	4d0c      	ldr	r5, [pc, #48]	@ (8006348 <__libc_init_array+0x38>)
 8006316:	4c0d      	ldr	r4, [pc, #52]	@ (800634c <__libc_init_array+0x3c>)
 8006318:	1b64      	subs	r4, r4, r5
 800631a:	10a4      	asrs	r4, r4, #2
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	f000 fc78 	bl	8006c14 <_init>
 8006324:	2600      	movs	r6, #0
 8006326:	4d0a      	ldr	r5, [pc, #40]	@ (8006350 <__libc_init_array+0x40>)
 8006328:	4c0a      	ldr	r4, [pc, #40]	@ (8006354 <__libc_init_array+0x44>)
 800632a:	1b64      	subs	r4, r4, r5
 800632c:	10a4      	asrs	r4, r4, #2
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	08006d7c 	.word	0x08006d7c
 800634c:	08006d7c 	.word	0x08006d7c
 8006350:	08006d7c 	.word	0x08006d7c
 8006354:	08006d80 	.word	0x08006d80

08006358 <__retarget_lock_acquire_recursive>:
 8006358:	4770      	bx	lr

0800635a <__retarget_lock_release_recursive>:
 800635a:	4770      	bx	lr

0800635c <_free_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4605      	mov	r5, r0
 8006360:	2900      	cmp	r1, #0
 8006362:	d040      	beq.n	80063e6 <_free_r+0x8a>
 8006364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006368:	1f0c      	subs	r4, r1, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfb8      	it	lt
 800636e:	18e4      	addlt	r4, r4, r3
 8006370:	f000 f8de 	bl	8006530 <__malloc_lock>
 8006374:	4a1c      	ldr	r2, [pc, #112]	@ (80063e8 <_free_r+0x8c>)
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	b933      	cbnz	r3, 8006388 <_free_r+0x2c>
 800637a:	6063      	str	r3, [r4, #4]
 800637c:	6014      	str	r4, [r2, #0]
 800637e:	4628      	mov	r0, r5
 8006380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006384:	f000 b8da 	b.w	800653c <__malloc_unlock>
 8006388:	42a3      	cmp	r3, r4
 800638a:	d908      	bls.n	800639e <_free_r+0x42>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	1821      	adds	r1, r4, r0
 8006390:	428b      	cmp	r3, r1
 8006392:	bf01      	itttt	eq
 8006394:	6819      	ldreq	r1, [r3, #0]
 8006396:	685b      	ldreq	r3, [r3, #4]
 8006398:	1809      	addeq	r1, r1, r0
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	e7ed      	b.n	800637a <_free_r+0x1e>
 800639e:	461a      	mov	r2, r3
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	b10b      	cbz	r3, 80063a8 <_free_r+0x4c>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d9fa      	bls.n	800639e <_free_r+0x42>
 80063a8:	6811      	ldr	r1, [r2, #0]
 80063aa:	1850      	adds	r0, r2, r1
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d10b      	bne.n	80063c8 <_free_r+0x6c>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	4401      	add	r1, r0
 80063b4:	1850      	adds	r0, r2, r1
 80063b6:	4283      	cmp	r3, r0
 80063b8:	6011      	str	r1, [r2, #0]
 80063ba:	d1e0      	bne.n	800637e <_free_r+0x22>
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4408      	add	r0, r1
 80063c2:	6010      	str	r0, [r2, #0]
 80063c4:	6053      	str	r3, [r2, #4]
 80063c6:	e7da      	b.n	800637e <_free_r+0x22>
 80063c8:	d902      	bls.n	80063d0 <_free_r+0x74>
 80063ca:	230c      	movs	r3, #12
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	e7d6      	b.n	800637e <_free_r+0x22>
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	1821      	adds	r1, r4, r0
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf01      	itttt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	1809      	addeq	r1, r1, r0
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	6054      	str	r4, [r2, #4]
 80063e4:	e7cb      	b.n	800637e <_free_r+0x22>
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	20000494 	.word	0x20000494

080063ec <sbrk_aligned>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4e0f      	ldr	r6, [pc, #60]	@ (800642c <sbrk_aligned+0x40>)
 80063f0:	460c      	mov	r4, r1
 80063f2:	6831      	ldr	r1, [r6, #0]
 80063f4:	4605      	mov	r5, r0
 80063f6:	b911      	cbnz	r1, 80063fe <sbrk_aligned+0x12>
 80063f8:	f000 fbaa 	bl	8006b50 <_sbrk_r>
 80063fc:	6030      	str	r0, [r6, #0]
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fba5 	bl	8006b50 <_sbrk_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d103      	bne.n	8006412 <sbrk_aligned+0x26>
 800640a:	f04f 34ff 	mov.w	r4, #4294967295
 800640e:	4620      	mov	r0, r4
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	1cc4      	adds	r4, r0, #3
 8006414:	f024 0403 	bic.w	r4, r4, #3
 8006418:	42a0      	cmp	r0, r4
 800641a:	d0f8      	beq.n	800640e <sbrk_aligned+0x22>
 800641c:	1a21      	subs	r1, r4, r0
 800641e:	4628      	mov	r0, r5
 8006420:	f000 fb96 	bl	8006b50 <_sbrk_r>
 8006424:	3001      	adds	r0, #1
 8006426:	d1f2      	bne.n	800640e <sbrk_aligned+0x22>
 8006428:	e7ef      	b.n	800640a <sbrk_aligned+0x1e>
 800642a:	bf00      	nop
 800642c:	20000490 	.word	0x20000490

08006430 <_malloc_r>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	1ccd      	adds	r5, r1, #3
 8006436:	f025 0503 	bic.w	r5, r5, #3
 800643a:	3508      	adds	r5, #8
 800643c:	2d0c      	cmp	r5, #12
 800643e:	bf38      	it	cc
 8006440:	250c      	movcc	r5, #12
 8006442:	2d00      	cmp	r5, #0
 8006444:	4606      	mov	r6, r0
 8006446:	db01      	blt.n	800644c <_malloc_r+0x1c>
 8006448:	42a9      	cmp	r1, r5
 800644a:	d904      	bls.n	8006456 <_malloc_r+0x26>
 800644c:	230c      	movs	r3, #12
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	2000      	movs	r0, #0
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800652c <_malloc_r+0xfc>
 800645a:	f000 f869 	bl	8006530 <__malloc_lock>
 800645e:	f8d8 3000 	ldr.w	r3, [r8]
 8006462:	461c      	mov	r4, r3
 8006464:	bb44      	cbnz	r4, 80064b8 <_malloc_r+0x88>
 8006466:	4629      	mov	r1, r5
 8006468:	4630      	mov	r0, r6
 800646a:	f7ff ffbf 	bl	80063ec <sbrk_aligned>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	4604      	mov	r4, r0
 8006472:	d158      	bne.n	8006526 <_malloc_r+0xf6>
 8006474:	f8d8 4000 	ldr.w	r4, [r8]
 8006478:	4627      	mov	r7, r4
 800647a:	2f00      	cmp	r7, #0
 800647c:	d143      	bne.n	8006506 <_malloc_r+0xd6>
 800647e:	2c00      	cmp	r4, #0
 8006480:	d04b      	beq.n	800651a <_malloc_r+0xea>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4639      	mov	r1, r7
 8006486:	4630      	mov	r0, r6
 8006488:	eb04 0903 	add.w	r9, r4, r3
 800648c:	f000 fb60 	bl	8006b50 <_sbrk_r>
 8006490:	4581      	cmp	r9, r0
 8006492:	d142      	bne.n	800651a <_malloc_r+0xea>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	4630      	mov	r0, r6
 8006498:	1a6d      	subs	r5, r5, r1
 800649a:	4629      	mov	r1, r5
 800649c:	f7ff ffa6 	bl	80063ec <sbrk_aligned>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d03a      	beq.n	800651a <_malloc_r+0xea>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	442b      	add	r3, r5
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	f8d8 3000 	ldr.w	r3, [r8]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	bb62      	cbnz	r2, 800650c <_malloc_r+0xdc>
 80064b2:	f8c8 7000 	str.w	r7, [r8]
 80064b6:	e00f      	b.n	80064d8 <_malloc_r+0xa8>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	1b52      	subs	r2, r2, r5
 80064bc:	d420      	bmi.n	8006500 <_malloc_r+0xd0>
 80064be:	2a0b      	cmp	r2, #11
 80064c0:	d917      	bls.n	80064f2 <_malloc_r+0xc2>
 80064c2:	1961      	adds	r1, r4, r5
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	6025      	str	r5, [r4, #0]
 80064c8:	bf18      	it	ne
 80064ca:	6059      	strne	r1, [r3, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	bf08      	it	eq
 80064d0:	f8c8 1000 	streq.w	r1, [r8]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 f82f 	bl	800653c <__malloc_unlock>
 80064de:	f104 000b 	add.w	r0, r4, #11
 80064e2:	1d23      	adds	r3, r4, #4
 80064e4:	f020 0007 	bic.w	r0, r0, #7
 80064e8:	1ac2      	subs	r2, r0, r3
 80064ea:	bf1c      	itt	ne
 80064ec:	1a1b      	subne	r3, r3, r0
 80064ee:	50a3      	strne	r3, [r4, r2]
 80064f0:	e7af      	b.n	8006452 <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	f8c8 2000 	streq.w	r2, [r8]
 80064fc:	605a      	strne	r2, [r3, #4]
 80064fe:	e7eb      	b.n	80064d8 <_malloc_r+0xa8>
 8006500:	4623      	mov	r3, r4
 8006502:	6864      	ldr	r4, [r4, #4]
 8006504:	e7ae      	b.n	8006464 <_malloc_r+0x34>
 8006506:	463c      	mov	r4, r7
 8006508:	687f      	ldr	r7, [r7, #4]
 800650a:	e7b6      	b.n	800647a <_malloc_r+0x4a>
 800650c:	461a      	mov	r2, r3
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	d1fb      	bne.n	800650c <_malloc_r+0xdc>
 8006514:	2300      	movs	r3, #0
 8006516:	6053      	str	r3, [r2, #4]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa8>
 800651a:	230c      	movs	r3, #12
 800651c:	4630      	mov	r0, r6
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	f000 f80c 	bl	800653c <__malloc_unlock>
 8006524:	e794      	b.n	8006450 <_malloc_r+0x20>
 8006526:	6005      	str	r5, [r0, #0]
 8006528:	e7d6      	b.n	80064d8 <_malloc_r+0xa8>
 800652a:	bf00      	nop
 800652c:	20000494 	.word	0x20000494

08006530 <__malloc_lock>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__malloc_lock+0x8>)
 8006532:	f7ff bf11 	b.w	8006358 <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	2000048c 	.word	0x2000048c

0800653c <__malloc_unlock>:
 800653c:	4801      	ldr	r0, [pc, #4]	@ (8006544 <__malloc_unlock+0x8>)
 800653e:	f7ff bf0c 	b.w	800635a <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	2000048c 	.word	0x2000048c

08006548 <__ssputs_r>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	461f      	mov	r7, r3
 800654e:	688e      	ldr	r6, [r1, #8]
 8006550:	4682      	mov	sl, r0
 8006552:	42be      	cmp	r6, r7
 8006554:	460c      	mov	r4, r1
 8006556:	4690      	mov	r8, r2
 8006558:	680b      	ldr	r3, [r1, #0]
 800655a:	d82d      	bhi.n	80065b8 <__ssputs_r+0x70>
 800655c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006560:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006564:	d026      	beq.n	80065b4 <__ssputs_r+0x6c>
 8006566:	6965      	ldr	r5, [r4, #20]
 8006568:	6909      	ldr	r1, [r1, #16]
 800656a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800656e:	eba3 0901 	sub.w	r9, r3, r1
 8006572:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006576:	1c7b      	adds	r3, r7, #1
 8006578:	444b      	add	r3, r9
 800657a:	106d      	asrs	r5, r5, #1
 800657c:	429d      	cmp	r5, r3
 800657e:	bf38      	it	cc
 8006580:	461d      	movcc	r5, r3
 8006582:	0553      	lsls	r3, r2, #21
 8006584:	d527      	bpl.n	80065d6 <__ssputs_r+0x8e>
 8006586:	4629      	mov	r1, r5
 8006588:	f7ff ff52 	bl	8006430 <_malloc_r>
 800658c:	4606      	mov	r6, r0
 800658e:	b360      	cbz	r0, 80065ea <__ssputs_r+0xa2>
 8006590:	464a      	mov	r2, r9
 8006592:	6921      	ldr	r1, [r4, #16]
 8006594:	f000 fafa 	bl	8006b8c <memcpy>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800659e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	6126      	str	r6, [r4, #16]
 80065a6:	444e      	add	r6, r9
 80065a8:	6026      	str	r6, [r4, #0]
 80065aa:	463e      	mov	r6, r7
 80065ac:	6165      	str	r5, [r4, #20]
 80065ae:	eba5 0509 	sub.w	r5, r5, r9
 80065b2:	60a5      	str	r5, [r4, #8]
 80065b4:	42be      	cmp	r6, r7
 80065b6:	d900      	bls.n	80065ba <__ssputs_r+0x72>
 80065b8:	463e      	mov	r6, r7
 80065ba:	4632      	mov	r2, r6
 80065bc:	4641      	mov	r1, r8
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	f000 faac 	bl	8006b1c <memmove>
 80065c4:	2000      	movs	r0, #0
 80065c6:	68a3      	ldr	r3, [r4, #8]
 80065c8:	1b9b      	subs	r3, r3, r6
 80065ca:	60a3      	str	r3, [r4, #8]
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	4433      	add	r3, r6
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	462a      	mov	r2, r5
 80065d8:	f000 fae6 	bl	8006ba8 <_realloc_r>
 80065dc:	4606      	mov	r6, r0
 80065de:	2800      	cmp	r0, #0
 80065e0:	d1e0      	bne.n	80065a4 <__ssputs_r+0x5c>
 80065e2:	4650      	mov	r0, sl
 80065e4:	6921      	ldr	r1, [r4, #16]
 80065e6:	f7ff feb9 	bl	800635c <_free_r>
 80065ea:	230c      	movs	r3, #12
 80065ec:	f8ca 3000 	str.w	r3, [sl]
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295
 80065f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	e7e9      	b.n	80065d2 <__ssputs_r+0x8a>
	...

08006600 <_svfiprintf_r>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	4698      	mov	r8, r3
 8006606:	898b      	ldrh	r3, [r1, #12]
 8006608:	4607      	mov	r7, r0
 800660a:	061b      	lsls	r3, r3, #24
 800660c:	460d      	mov	r5, r1
 800660e:	4614      	mov	r4, r2
 8006610:	b09d      	sub	sp, #116	@ 0x74
 8006612:	d510      	bpl.n	8006636 <_svfiprintf_r+0x36>
 8006614:	690b      	ldr	r3, [r1, #16]
 8006616:	b973      	cbnz	r3, 8006636 <_svfiprintf_r+0x36>
 8006618:	2140      	movs	r1, #64	@ 0x40
 800661a:	f7ff ff09 	bl	8006430 <_malloc_r>
 800661e:	6028      	str	r0, [r5, #0]
 8006620:	6128      	str	r0, [r5, #16]
 8006622:	b930      	cbnz	r0, 8006632 <_svfiprintf_r+0x32>
 8006624:	230c      	movs	r3, #12
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	b01d      	add	sp, #116	@ 0x74
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006632:	2340      	movs	r3, #64	@ 0x40
 8006634:	616b      	str	r3, [r5, #20]
 8006636:	2300      	movs	r3, #0
 8006638:	9309      	str	r3, [sp, #36]	@ 0x24
 800663a:	2320      	movs	r3, #32
 800663c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006640:	2330      	movs	r3, #48	@ 0x30
 8006642:	f04f 0901 	mov.w	r9, #1
 8006646:	f8cd 800c 	str.w	r8, [sp, #12]
 800664a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80067e4 <_svfiprintf_r+0x1e4>
 800664e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006652:	4623      	mov	r3, r4
 8006654:	469a      	mov	sl, r3
 8006656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800665a:	b10a      	cbz	r2, 8006660 <_svfiprintf_r+0x60>
 800665c:	2a25      	cmp	r2, #37	@ 0x25
 800665e:	d1f9      	bne.n	8006654 <_svfiprintf_r+0x54>
 8006660:	ebba 0b04 	subs.w	fp, sl, r4
 8006664:	d00b      	beq.n	800667e <_svfiprintf_r+0x7e>
 8006666:	465b      	mov	r3, fp
 8006668:	4622      	mov	r2, r4
 800666a:	4629      	mov	r1, r5
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff ff6b 	bl	8006548 <__ssputs_r>
 8006672:	3001      	adds	r0, #1
 8006674:	f000 80a7 	beq.w	80067c6 <_svfiprintf_r+0x1c6>
 8006678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800667a:	445a      	add	r2, fp
 800667c:	9209      	str	r2, [sp, #36]	@ 0x24
 800667e:	f89a 3000 	ldrb.w	r3, [sl]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 809f 	beq.w	80067c6 <_svfiprintf_r+0x1c6>
 8006688:	2300      	movs	r3, #0
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006692:	f10a 0a01 	add.w	sl, sl, #1
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	9307      	str	r3, [sp, #28]
 800669a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800669e:	931a      	str	r3, [sp, #104]	@ 0x68
 80066a0:	4654      	mov	r4, sl
 80066a2:	2205      	movs	r2, #5
 80066a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a8:	484e      	ldr	r0, [pc, #312]	@ (80067e4 <_svfiprintf_r+0x1e4>)
 80066aa:	f000 fa61 	bl	8006b70 <memchr>
 80066ae:	9a04      	ldr	r2, [sp, #16]
 80066b0:	b9d8      	cbnz	r0, 80066ea <_svfiprintf_r+0xea>
 80066b2:	06d0      	lsls	r0, r2, #27
 80066b4:	bf44      	itt	mi
 80066b6:	2320      	movmi	r3, #32
 80066b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066bc:	0711      	lsls	r1, r2, #28
 80066be:	bf44      	itt	mi
 80066c0:	232b      	movmi	r3, #43	@ 0x2b
 80066c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80066cc:	d015      	beq.n	80066fa <_svfiprintf_r+0xfa>
 80066ce:	4654      	mov	r4, sl
 80066d0:	2000      	movs	r0, #0
 80066d2:	f04f 0c0a 	mov.w	ip, #10
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	4621      	mov	r1, r4
 80066da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066de:	3b30      	subs	r3, #48	@ 0x30
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	d94b      	bls.n	800677c <_svfiprintf_r+0x17c>
 80066e4:	b1b0      	cbz	r0, 8006714 <_svfiprintf_r+0x114>
 80066e6:	9207      	str	r2, [sp, #28]
 80066e8:	e014      	b.n	8006714 <_svfiprintf_r+0x114>
 80066ea:	eba0 0308 	sub.w	r3, r0, r8
 80066ee:	fa09 f303 	lsl.w	r3, r9, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	46a2      	mov	sl, r4
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	e7d2      	b.n	80066a0 <_svfiprintf_r+0xa0>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	9103      	str	r1, [sp, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	bfbb      	ittet	lt
 8006706:	425b      	neglt	r3, r3
 8006708:	f042 0202 	orrlt.w	r2, r2, #2
 800670c:	9307      	strge	r3, [sp, #28]
 800670e:	9307      	strlt	r3, [sp, #28]
 8006710:	bfb8      	it	lt
 8006712:	9204      	strlt	r2, [sp, #16]
 8006714:	7823      	ldrb	r3, [r4, #0]
 8006716:	2b2e      	cmp	r3, #46	@ 0x2e
 8006718:	d10a      	bne.n	8006730 <_svfiprintf_r+0x130>
 800671a:	7863      	ldrb	r3, [r4, #1]
 800671c:	2b2a      	cmp	r3, #42	@ 0x2a
 800671e:	d132      	bne.n	8006786 <_svfiprintf_r+0x186>
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	3402      	adds	r4, #2
 8006724:	1d1a      	adds	r2, r3, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	9203      	str	r2, [sp, #12]
 800672a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800672e:	9305      	str	r3, [sp, #20]
 8006730:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80067e8 <_svfiprintf_r+0x1e8>
 8006734:	2203      	movs	r2, #3
 8006736:	4650      	mov	r0, sl
 8006738:	7821      	ldrb	r1, [r4, #0]
 800673a:	f000 fa19 	bl	8006b70 <memchr>
 800673e:	b138      	cbz	r0, 8006750 <_svfiprintf_r+0x150>
 8006740:	2240      	movs	r2, #64	@ 0x40
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	eba0 000a 	sub.w	r0, r0, sl
 8006748:	4082      	lsls	r2, r0
 800674a:	4313      	orrs	r3, r2
 800674c:	3401      	adds	r4, #1
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006754:	2206      	movs	r2, #6
 8006756:	4825      	ldr	r0, [pc, #148]	@ (80067ec <_svfiprintf_r+0x1ec>)
 8006758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800675c:	f000 fa08 	bl	8006b70 <memchr>
 8006760:	2800      	cmp	r0, #0
 8006762:	d036      	beq.n	80067d2 <_svfiprintf_r+0x1d2>
 8006764:	4b22      	ldr	r3, [pc, #136]	@ (80067f0 <_svfiprintf_r+0x1f0>)
 8006766:	bb1b      	cbnz	r3, 80067b0 <_svfiprintf_r+0x1b0>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	3307      	adds	r3, #7
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	3308      	adds	r3, #8
 8006772:	9303      	str	r3, [sp, #12]
 8006774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006776:	4433      	add	r3, r6
 8006778:	9309      	str	r3, [sp, #36]	@ 0x24
 800677a:	e76a      	b.n	8006652 <_svfiprintf_r+0x52>
 800677c:	460c      	mov	r4, r1
 800677e:	2001      	movs	r0, #1
 8006780:	fb0c 3202 	mla	r2, ip, r2, r3
 8006784:	e7a8      	b.n	80066d8 <_svfiprintf_r+0xd8>
 8006786:	2300      	movs	r3, #0
 8006788:	f04f 0c0a 	mov.w	ip, #10
 800678c:	4619      	mov	r1, r3
 800678e:	3401      	adds	r4, #1
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	4620      	mov	r0, r4
 8006794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006798:	3a30      	subs	r2, #48	@ 0x30
 800679a:	2a09      	cmp	r2, #9
 800679c:	d903      	bls.n	80067a6 <_svfiprintf_r+0x1a6>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0c6      	beq.n	8006730 <_svfiprintf_r+0x130>
 80067a2:	9105      	str	r1, [sp, #20]
 80067a4:	e7c4      	b.n	8006730 <_svfiprintf_r+0x130>
 80067a6:	4604      	mov	r4, r0
 80067a8:	2301      	movs	r3, #1
 80067aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ae:	e7f0      	b.n	8006792 <_svfiprintf_r+0x192>
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	462a      	mov	r2, r5
 80067b6:	4638      	mov	r0, r7
 80067b8:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <_svfiprintf_r+0x1f4>)
 80067ba:	a904      	add	r1, sp, #16
 80067bc:	f3af 8000 	nop.w
 80067c0:	1c42      	adds	r2, r0, #1
 80067c2:	4606      	mov	r6, r0
 80067c4:	d1d6      	bne.n	8006774 <_svfiprintf_r+0x174>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	065b      	lsls	r3, r3, #25
 80067ca:	f53f af2d 	bmi.w	8006628 <_svfiprintf_r+0x28>
 80067ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067d0:	e72c      	b.n	800662c <_svfiprintf_r+0x2c>
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	462a      	mov	r2, r5
 80067d8:	4638      	mov	r0, r7
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <_svfiprintf_r+0x1f4>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	f000 f87d 	bl	80068dc <_printf_i>
 80067e2:	e7ed      	b.n	80067c0 <_svfiprintf_r+0x1c0>
 80067e4:	08006d3e 	.word	0x08006d3e
 80067e8:	08006d44 	.word	0x08006d44
 80067ec:	08006d48 	.word	0x08006d48
 80067f0:	00000000 	.word	0x00000000
 80067f4:	08006549 	.word	0x08006549

080067f8 <_printf_common>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	4616      	mov	r6, r2
 80067fe:	4698      	mov	r8, r3
 8006800:	688a      	ldr	r2, [r1, #8]
 8006802:	690b      	ldr	r3, [r1, #16]
 8006804:	4607      	mov	r7, r0
 8006806:	4293      	cmp	r3, r2
 8006808:	bfb8      	it	lt
 800680a:	4613      	movlt	r3, r2
 800680c:	6033      	str	r3, [r6, #0]
 800680e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006812:	460c      	mov	r4, r1
 8006814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006818:	b10a      	cbz	r2, 800681e <_printf_common+0x26>
 800681a:	3301      	adds	r3, #1
 800681c:	6033      	str	r3, [r6, #0]
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	0699      	lsls	r1, r3, #26
 8006822:	bf42      	ittt	mi
 8006824:	6833      	ldrmi	r3, [r6, #0]
 8006826:	3302      	addmi	r3, #2
 8006828:	6033      	strmi	r3, [r6, #0]
 800682a:	6825      	ldr	r5, [r4, #0]
 800682c:	f015 0506 	ands.w	r5, r5, #6
 8006830:	d106      	bne.n	8006840 <_printf_common+0x48>
 8006832:	f104 0a19 	add.w	sl, r4, #25
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	6832      	ldr	r2, [r6, #0]
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	42ab      	cmp	r3, r5
 800683e:	dc2b      	bgt.n	8006898 <_printf_common+0xa0>
 8006840:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	3b00      	subs	r3, #0
 8006848:	bf18      	it	ne
 800684a:	2301      	movne	r3, #1
 800684c:	0692      	lsls	r2, r2, #26
 800684e:	d430      	bmi.n	80068b2 <_printf_common+0xba>
 8006850:	4641      	mov	r1, r8
 8006852:	4638      	mov	r0, r7
 8006854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006858:	47c8      	blx	r9
 800685a:	3001      	adds	r0, #1
 800685c:	d023      	beq.n	80068a6 <_printf_common+0xae>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	f003 0306 	and.w	r3, r3, #6
 8006866:	2b04      	cmp	r3, #4
 8006868:	bf14      	ite	ne
 800686a:	2500      	movne	r5, #0
 800686c:	6833      	ldreq	r3, [r6, #0]
 800686e:	f04f 0600 	mov.w	r6, #0
 8006872:	bf08      	it	eq
 8006874:	68e5      	ldreq	r5, [r4, #12]
 8006876:	f104 041a 	add.w	r4, r4, #26
 800687a:	bf08      	it	eq
 800687c:	1aed      	subeq	r5, r5, r3
 800687e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006882:	bf08      	it	eq
 8006884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006888:	4293      	cmp	r3, r2
 800688a:	bfc4      	itt	gt
 800688c:	1a9b      	subgt	r3, r3, r2
 800688e:	18ed      	addgt	r5, r5, r3
 8006890:	42b5      	cmp	r5, r6
 8006892:	d11a      	bne.n	80068ca <_printf_common+0xd2>
 8006894:	2000      	movs	r0, #0
 8006896:	e008      	b.n	80068aa <_printf_common+0xb2>
 8006898:	2301      	movs	r3, #1
 800689a:	4652      	mov	r2, sl
 800689c:	4641      	mov	r1, r8
 800689e:	4638      	mov	r0, r7
 80068a0:	47c8      	blx	r9
 80068a2:	3001      	adds	r0, #1
 80068a4:	d103      	bne.n	80068ae <_printf_common+0xb6>
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ae:	3501      	adds	r5, #1
 80068b0:	e7c1      	b.n	8006836 <_printf_common+0x3e>
 80068b2:	2030      	movs	r0, #48	@ 0x30
 80068b4:	18e1      	adds	r1, r4, r3
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c0:	4422      	add	r2, r4
 80068c2:	3302      	adds	r3, #2
 80068c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c8:	e7c2      	b.n	8006850 <_printf_common+0x58>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4622      	mov	r2, r4
 80068ce:	4641      	mov	r1, r8
 80068d0:	4638      	mov	r0, r7
 80068d2:	47c8      	blx	r9
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0e6      	beq.n	80068a6 <_printf_common+0xae>
 80068d8:	3601      	adds	r6, #1
 80068da:	e7d9      	b.n	8006890 <_printf_common+0x98>

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	7e0f      	ldrb	r7, [r1, #24]
 80068e2:	4691      	mov	r9, r2
 80068e4:	2f78      	cmp	r7, #120	@ 0x78
 80068e6:	4680      	mov	r8, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	469a      	mov	sl, r3
 80068ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	@ 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d3 	beq.w	8006aa4 <_printf_i+0x1c8>
 80068fe:	2f58      	cmp	r7, #88	@ 0x58
 8006900:	f000 80ba 	beq.w	8006a78 <_printf_i+0x19c>
 8006904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a101      	add	r1, pc, #4	@ (adr r1, 800691c <_printf_i+0x40>)
 8006918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a8b 	.word	0x08006a8b
 800694c:	080069b3 	.word	0x080069b3
 8006950:	08006a45 	.word	0x08006a45
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006aad 	.word	0x08006aad
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b3 	.word	0x080069b3
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a4d 	.word	0x08006a4d
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6032      	str	r2, [r6, #0]
 800697c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e09e      	b.n	8006ac6 <_printf_i+0x1ea>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	6031      	str	r1, [r6, #0]
 8006990:	0606      	lsls	r6, r0, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0xbc>
 8006994:	681d      	ldr	r5, [r3, #0]
 8006996:	e003      	b.n	80069a0 <_printf_i+0xc4>
 8006998:	0645      	lsls	r5, r0, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0xb8>
 800699c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	da03      	bge.n	80069ac <_printf_i+0xd0>
 80069a4:	232d      	movs	r3, #45	@ 0x2d
 80069a6:	426d      	negs	r5, r5
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ac:	230a      	movs	r3, #10
 80069ae:	4859      	ldr	r0, [pc, #356]	@ (8006b14 <_printf_i+0x238>)
 80069b0:	e011      	b.n	80069d6 <_printf_i+0xfa>
 80069b2:	6821      	ldr	r1, [r4, #0]
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	0608      	lsls	r0, r1, #24
 80069b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069bc:	d402      	bmi.n	80069c4 <_printf_i+0xe8>
 80069be:	0649      	lsls	r1, r1, #25
 80069c0:	bf48      	it	mi
 80069c2:	b2ad      	uxthmi	r5, r5
 80069c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069c6:	6033      	str	r3, [r6, #0]
 80069c8:	bf14      	ite	ne
 80069ca:	230a      	movne	r3, #10
 80069cc:	2308      	moveq	r3, #8
 80069ce:	4851      	ldr	r0, [pc, #324]	@ (8006b14 <_printf_i+0x238>)
 80069d0:	2100      	movs	r1, #0
 80069d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069d6:	6866      	ldr	r6, [r4, #4]
 80069d8:	2e00      	cmp	r6, #0
 80069da:	bfa8      	it	ge
 80069dc:	6821      	ldrge	r1, [r4, #0]
 80069de:	60a6      	str	r6, [r4, #8]
 80069e0:	bfa4      	itt	ge
 80069e2:	f021 0104 	bicge.w	r1, r1, #4
 80069e6:	6021      	strge	r1, [r4, #0]
 80069e8:	b90d      	cbnz	r5, 80069ee <_printf_i+0x112>
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	d04b      	beq.n	8006a86 <_printf_i+0x1aa>
 80069ee:	4616      	mov	r6, r2
 80069f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80069f4:	fb03 5711 	mls	r7, r3, r1, r5
 80069f8:	5dc7      	ldrb	r7, [r0, r7]
 80069fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069fe:	462f      	mov	r7, r5
 8006a00:	42bb      	cmp	r3, r7
 8006a02:	460d      	mov	r5, r1
 8006a04:	d9f4      	bls.n	80069f0 <_printf_i+0x114>
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d10b      	bne.n	8006a22 <_printf_i+0x146>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	07df      	lsls	r7, r3, #31
 8006a0e:	d508      	bpl.n	8006a22 <_printf_i+0x146>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	6861      	ldr	r1, [r4, #4]
 8006a14:	4299      	cmp	r1, r3
 8006a16:	bfde      	ittt	le
 8006a18:	2330      	movle	r3, #48	@ 0x30
 8006a1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a22:	1b92      	subs	r2, r2, r6
 8006a24:	6122      	str	r2, [r4, #16]
 8006a26:	464b      	mov	r3, r9
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f8cd a000 	str.w	sl, [sp]
 8006a30:	aa03      	add	r2, sp, #12
 8006a32:	f7ff fee1 	bl	80067f8 <_printf_common>
 8006a36:	3001      	adds	r0, #1
 8006a38:	d14a      	bne.n	8006ad0 <_printf_i+0x1f4>
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3e:	b004      	add	sp, #16
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f043 0320 	orr.w	r3, r3, #32
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	2778      	movs	r7, #120	@ 0x78
 8006a4e:	4832      	ldr	r0, [pc, #200]	@ (8006b18 <_printf_i+0x23c>)
 8006a50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	6831      	ldr	r1, [r6, #0]
 8006a58:	061f      	lsls	r7, r3, #24
 8006a5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a5e:	d402      	bmi.n	8006a66 <_printf_i+0x18a>
 8006a60:	065f      	lsls	r7, r3, #25
 8006a62:	bf48      	it	mi
 8006a64:	b2ad      	uxthmi	r5, r5
 8006a66:	6031      	str	r1, [r6, #0]
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	bf44      	itt	mi
 8006a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006a70:	6023      	strmi	r3, [r4, #0]
 8006a72:	b11d      	cbz	r5, 8006a7c <_printf_i+0x1a0>
 8006a74:	2310      	movs	r3, #16
 8006a76:	e7ab      	b.n	80069d0 <_printf_i+0xf4>
 8006a78:	4826      	ldr	r0, [pc, #152]	@ (8006b14 <_printf_i+0x238>)
 8006a7a:	e7e9      	b.n	8006a50 <_printf_i+0x174>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f023 0320 	bic.w	r3, r3, #32
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	e7f6      	b.n	8006a74 <_printf_i+0x198>
 8006a86:	4616      	mov	r6, r2
 8006a88:	e7bd      	b.n	8006a06 <_printf_i+0x12a>
 8006a8a:	6833      	ldr	r3, [r6, #0]
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	1d18      	adds	r0, r3, #4
 8006a90:	6961      	ldr	r1, [r4, #20]
 8006a92:	6030      	str	r0, [r6, #0]
 8006a94:	062e      	lsls	r6, r5, #24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	d501      	bpl.n	8006a9e <_printf_i+0x1c2>
 8006a9a:	6019      	str	r1, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <_printf_i+0x1c8>
 8006a9e:	0668      	lsls	r0, r5, #25
 8006aa0:	d5fb      	bpl.n	8006a9a <_printf_i+0x1be>
 8006aa2:	8019      	strh	r1, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4616      	mov	r6, r2
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	e7bc      	b.n	8006a26 <_printf_i+0x14a>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	1d1a      	adds	r2, r3, #4
 8006ab2:	6032      	str	r2, [r6, #0]
 8006ab4:	681e      	ldr	r6, [r3, #0]
 8006ab6:	6862      	ldr	r2, [r4, #4]
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f000 f859 	bl	8006b70 <memchr>
 8006abe:	b108      	cbz	r0, 8006ac4 <_printf_i+0x1e8>
 8006ac0:	1b80      	subs	r0, r0, r6
 8006ac2:	6060      	str	r0, [r4, #4]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ace:	e7aa      	b.n	8006a26 <_printf_i+0x14a>
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	47d0      	blx	sl
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0ad      	beq.n	8006a3a <_printf_i+0x15e>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	079b      	lsls	r3, r3, #30
 8006ae2:	d413      	bmi.n	8006b0c <_printf_i+0x230>
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	bfb8      	it	lt
 8006aec:	4618      	movlt	r0, r3
 8006aee:	e7a6      	b.n	8006a3e <_printf_i+0x162>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4632      	mov	r2, r6
 8006af4:	4649      	mov	r1, r9
 8006af6:	4640      	mov	r0, r8
 8006af8:	47d0      	blx	sl
 8006afa:	3001      	adds	r0, #1
 8006afc:	d09d      	beq.n	8006a3a <_printf_i+0x15e>
 8006afe:	3501      	adds	r5, #1
 8006b00:	68e3      	ldr	r3, [r4, #12]
 8006b02:	9903      	ldr	r1, [sp, #12]
 8006b04:	1a5b      	subs	r3, r3, r1
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dcf2      	bgt.n	8006af0 <_printf_i+0x214>
 8006b0a:	e7eb      	b.n	8006ae4 <_printf_i+0x208>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	f104 0619 	add.w	r6, r4, #25
 8006b12:	e7f5      	b.n	8006b00 <_printf_i+0x224>
 8006b14:	08006d4f 	.word	0x08006d4f
 8006b18:	08006d60 	.word	0x08006d60

08006b1c <memmove>:
 8006b1c:	4288      	cmp	r0, r1
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	eb01 0402 	add.w	r4, r1, r2
 8006b24:	d902      	bls.n	8006b2c <memmove+0x10>
 8006b26:	4284      	cmp	r4, r0
 8006b28:	4623      	mov	r3, r4
 8006b2a:	d807      	bhi.n	8006b3c <memmove+0x20>
 8006b2c:	1e43      	subs	r3, r0, #1
 8006b2e:	42a1      	cmp	r1, r4
 8006b30:	d008      	beq.n	8006b44 <memmove+0x28>
 8006b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b3a:	e7f8      	b.n	8006b2e <memmove+0x12>
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	4402      	add	r2, r0
 8006b40:	428a      	cmp	r2, r1
 8006b42:	d100      	bne.n	8006b46 <memmove+0x2a>
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b4e:	e7f7      	b.n	8006b40 <memmove+0x24>

08006b50 <_sbrk_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	2300      	movs	r3, #0
 8006b54:	4d05      	ldr	r5, [pc, #20]	@ (8006b6c <_sbrk_r+0x1c>)
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	f7fa f886 	bl	8000c6c <_sbrk>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_sbrk_r+0x1a>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_sbrk_r+0x1a>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000488 	.word	0x20000488

08006b70 <memchr>:
 8006b70:	4603      	mov	r3, r0
 8006b72:	b510      	push	{r4, lr}
 8006b74:	b2c9      	uxtb	r1, r1
 8006b76:	4402      	add	r2, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	d101      	bne.n	8006b82 <memchr+0x12>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e003      	b.n	8006b8a <memchr+0x1a>
 8006b82:	7804      	ldrb	r4, [r0, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	428c      	cmp	r4, r1
 8006b88:	d1f6      	bne.n	8006b78 <memchr+0x8>
 8006b8a:	bd10      	pop	{r4, pc}

08006b8c <memcpy>:
 8006b8c:	440a      	add	r2, r1
 8006b8e:	4291      	cmp	r1, r2
 8006b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b94:	d100      	bne.n	8006b98 <memcpy+0xc>
 8006b96:	4770      	bx	lr
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b9e:	4291      	cmp	r1, r2
 8006ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba4:	d1f9      	bne.n	8006b9a <memcpy+0xe>
 8006ba6:	bd10      	pop	{r4, pc}

08006ba8 <_realloc_r>:
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	4680      	mov	r8, r0
 8006bae:	4615      	mov	r5, r2
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	b921      	cbnz	r1, 8006bbe <_realloc_r+0x16>
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bba:	f7ff bc39 	b.w	8006430 <_malloc_r>
 8006bbe:	b92a      	cbnz	r2, 8006bcc <_realloc_r+0x24>
 8006bc0:	f7ff fbcc 	bl	800635c <_free_r>
 8006bc4:	2400      	movs	r4, #0
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bcc:	f000 f81a 	bl	8006c04 <_malloc_usable_size_r>
 8006bd0:	4285      	cmp	r5, r0
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	d802      	bhi.n	8006bdc <_realloc_r+0x34>
 8006bd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006bda:	d8f4      	bhi.n	8006bc6 <_realloc_r+0x1e>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4640      	mov	r0, r8
 8006be0:	f7ff fc26 	bl	8006430 <_malloc_r>
 8006be4:	4607      	mov	r7, r0
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d0ec      	beq.n	8006bc4 <_realloc_r+0x1c>
 8006bea:	42b5      	cmp	r5, r6
 8006bec:	462a      	mov	r2, r5
 8006bee:	4621      	mov	r1, r4
 8006bf0:	bf28      	it	cs
 8006bf2:	4632      	movcs	r2, r6
 8006bf4:	f7ff ffca 	bl	8006b8c <memcpy>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	f7ff fbae 	bl	800635c <_free_r>
 8006c00:	463c      	mov	r4, r7
 8006c02:	e7e0      	b.n	8006bc6 <_realloc_r+0x1e>

08006c04 <_malloc_usable_size_r>:
 8006c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c08:	1f18      	subs	r0, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bfbc      	itt	lt
 8006c0e:	580b      	ldrlt	r3, [r1, r0]
 8006c10:	18c0      	addlt	r0, r0, r3
 8006c12:	4770      	bx	lr

08006c14 <_init>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr

08006c20 <_fini>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	bf00      	nop
 8006c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c26:	bc08      	pop	{r3}
 8006c28:	469e      	mov	lr, r3
 8006c2a:	4770      	bx	lr
